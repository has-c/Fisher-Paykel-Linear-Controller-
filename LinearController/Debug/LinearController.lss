
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000ba0  00000c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800108  00800108  00000c3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001edc  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c9  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf0  00000000  00000000  00003529  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  0000411c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000627  00000000  00000000  0000438c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000994  00000000  00000000  000049b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00005347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_11>
  30:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 40 05 	call	0xa80	; 0xa80 <main>
  9e:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8b 60       	ori	r24, 0x0B	; 11
  ae:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
  b0:	ef e6       	ldi	r30, 0x6F	; 111
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
  c4:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  c8:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  cc:	08 95       	ret

000000ce <UART_Init>:
//interrupt config
uint8_t UART_Receive(){
	uint8_t pumpingEffort = UDR0;
	UART_Transmit(pumpingEffort + 48);
	return pumpingEffort;
}
  ce:	e5 ec       	ldi	r30, 0xC5	; 197
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	20 81       	ld	r18, Z
  d4:	92 2b       	or	r25, r18
  d6:	90 83       	st	Z, r25
  d8:	e4 ec       	ldi	r30, 0xC4	; 196
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	89 2b       	or	r24, r25
  e0:	80 83       	st	Z, r24
  e2:	e1 ec       	ldi	r30, 0xC1	; 193
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	89 60       	ori	r24, 0x09	; 9
  ea:	80 83       	st	Z, r24
  ec:	e2 ec       	ldi	r30, 0xC2	; 194
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	86 60       	ori	r24, 0x06	; 6
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <UART_Transmit>:
  f8:	e0 ec       	ldi	r30, 0xC0	; 192
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	99 23       	and	r25, r25
 100:	e9 f3       	breq	.-6      	; 0xfc <UART_Transmit+0x4>
 102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 106:	08 95       	ret

00000108 <UART_InterpretPumpingEffort>:

void UART_InterpretPumpingEffort(){
	pumpingEffort = 1; //mock pumping effort
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <pumpingEffort>
	if(pumpingEffort==0){ //turn off mode 
 10e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 112:	81 11       	cpse	r24, r1
 114:	06 c0       	rjmp	.+12     	; 0x122 <UART_InterpretPumpingEffort+0x1a>
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
 116:	e4 e6       	ldi	r30, 0x64	; 100
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8f 6e       	ori	r24, 0xEF	; 239
 11e:	80 83       	st	Z, r24
 120:	19 c0       	rjmp	.+50     	; 0x154 <UART_InterpretPumpingEffort+0x4c>
		power_all_disable(); //disables all modules on the microcontroller 
		//power_usart_enable(); //enable UART for communication to see when to turn back on
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){
 122:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 126:	88 23       	and	r24, r24
 128:	41 f0       	breq	.+16     	; 0x13a <UART_InterpretPumpingEffort+0x32>
 12a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 12e:	83 3b       	cpi	r24, 0xB3	; 179
 130:	20 f4       	brcc	.+8      	; 0x13a <UART_InterpretPumpingEffort+0x32>
		//70% of values - care about efficiency and meeting pumpingEffort
		//efficiency actions turn two switches off
		//disable all unused modules
		//dutyCycle = (PROPORTIONALITY_CONSTANT* MAX_LOW_POWER * (pumpingEffort/178))/(10000*1000);	//10000 and 1000 are because we didnt use floats [integer overflow error here]
		lowPowerMode = true;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lowPowerMode>
 138:	0d c0       	rjmp	.+26     	; 0x154 <UART_InterpretPumpingEffort+0x4c>
						 
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){
 13a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 13e:	83 3b       	cpi	r24, 0xB3	; 179
 140:	38 f0       	brcs	.+14     	; 0x150 <UART_InterpretPumpingEffort+0x48>
 142:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 146:	8f 3f       	cpi	r24, 0xFF	; 255
 148:	19 f0       	breq	.+6      	; 0x150 <UART_InterpretPumpingEffort+0x48>
		//30% of values - go ham fam
		lowPowerMode = false;
 14a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lowPowerMode>
 14e:	02 c0       	rjmp	.+4      	; 0x154 <UART_InterpretPumpingEffort+0x4c>
	}else{ //255 lose your mind
		//change duty cycle and pwm to max out the motor
		lowPowerMode = false;
 150:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lowPowerMode>
	}
	changePumpingEffort = false;
 154:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 158:	08 95       	ret

0000015a <MFCmodulator>:
	ERRORmodulator(errorClear, jamErrorFlag, collisionErrorFlag);

}


void MFCmodulator(uint8_t requiredValue, uint8_t currentValue){
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	18 2f       	mov	r17, r24
 16a:	d6 2f       	mov	r29, r22
	//temp conversion variables. Used to split 3 digit numbers as only one digit can be sent at a time
	uint8_t firstDigit = 0;
	uint8_t secondDigit = 0;
	uint8_t thirdDigit = 0;
	
	UART_Transmit(13); //carriage return
 16c:	8d e0       	ldi	r24, 0x0D	; 13
 16e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(123); //{
 172:	8b e7       	ldi	r24, 0x7B	; 123
 174:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(10); //line feed 
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 17e:	8d e0       	ldi	r24, 0x0D	; 13
 180:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	//LCC Identifier 
	UART_Transmit(34); //"
 184:	82 e2       	ldi	r24, 0x22	; 34
 186:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(51);//3
 18a:	83 e3       	ldi	r24, 0x33	; 51
 18c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 190:	82 e2       	ldi	r24, 0x22	; 34
 192:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58);//:
 196:	8a e3       	ldi	r24, 0x3A	; 58
 198:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>

	//MFC 
	UART_Transmit(10); //Line feed
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(123); //{
 1a8:	8b e7       	ldi	r24, 0x7B	; 123
 1aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(10); //Line feed
 1ae:	8a e0       	ldi	r24, 0x0A	; 10
 1b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	
	//MFC letter setup
	UART_Transmit(34); //'
 1ba:	82 e2       	ldi	r24, 0x22	; 34
 1bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(109);//m
 1c0:	8d e6       	ldi	r24, 0x6D	; 109
 1c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(102);//f
 1c6:	86 e6       	ldi	r24, 0x66	; 102
 1c8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(99);//c
 1cc:	83 e6       	ldi	r24, 0x63	; 99
 1ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 1d2:	82 e2       	ldi	r24, 0x22	; 34
 1d4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58);//:
 1d8:	8a e3       	ldi	r24, 0x3A	; 58
 1da:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	 

	//MFC Values 
	UART_Transmit(123); //{
 1de:	8b e7       	ldi	r24, 0x7B	; 123
 1e0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34); //"
 1e4:	82 e2       	ldi	r24, 0x22	; 34
 1e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(114);//r
 1ea:	82 e7       	ldi	r24, 0x72	; 114
 1ec:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(101);//e
 1f0:	85 e6       	ldi	r24, 0x65	; 101
 1f2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(113);//q
 1f6:	81 e7       	ldi	r24, 0x71	; 113
 1f8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 1fc:	82 e2       	ldi	r24, 0x22	; 34
 1fe:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58);//:
 202:	8a e3       	ldi	r24, 0x3A	; 58
 204:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 208:	82 e2       	ldi	r24, 0x22	; 34
 20a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	//required value transmission
	firstDigit = requiredValue/100;
 20e:	c9 e2       	ldi	r28, 0x29	; 41
 210:	1c 9f       	mul	r17, r28
 212:	21 2d       	mov	r18, r1
 214:	11 24       	eor	r1, r1
 216:	22 95       	swap	r18
 218:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (requiredValue-(firstDigit*100))/10;
 21a:	0c e9       	ldi	r16, 0x9C	; 156
 21c:	02 03       	mulsu	r16, r18
 21e:	c0 01       	movw	r24, r0
 220:	11 24       	eor	r1, r1
 222:	81 0f       	add	r24, r17
 224:	91 1d       	adc	r25, r1
 226:	0f 2e       	mov	r0, r31
 228:	fa e0       	ldi	r31, 0x0A	; 10
 22a:	ef 2e       	mov	r14, r31
 22c:	f1 2c       	mov	r15, r1
 22e:	f0 2d       	mov	r31, r0
 230:	b7 01       	movw	r22, r14
 232:	0e 94 6a 05 	call	0xad4	; 0xad4 <__divmodhi4>
 236:	d6 2e       	mov	r13, r22
	thirdDigit = requiredValue - (firstDigit*100) - (secondDigit*10);
 238:	20 9f       	mul	r18, r16
 23a:	10 0d       	add	r17, r0
 23c:	11 24       	eor	r1, r1
 23e:	96 2f       	mov	r25, r22
 240:	99 0f       	add	r25, r25
 242:	89 2f       	mov	r24, r25
 244:	88 0f       	add	r24, r24
 246:	88 0f       	add	r24, r24
 248:	89 0f       	add	r24, r25
 24a:	18 1b       	sub	r17, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 24c:	82 2f       	mov	r24, r18
 24e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 252:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit)); 
 256:	8d 2d       	mov	r24, r13
 258:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 25c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 260:	81 2f       	mov	r24, r17
 262:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 266:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 26a:	82 e2       	ldi	r24, 0x22	; 34
 26c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(44);//,
 270:	8c e2       	ldi	r24, 0x2C	; 44
 272:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	

	UART_Transmit(34);//"
 276:	82 e2       	ldi	r24, 0x22	; 34
 278:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(99);//c
 27c:	83 e6       	ldi	r24, 0x63	; 99
 27e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(117);//u
 282:	85 e7       	ldi	r24, 0x75	; 117
 284:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(114);//r
 288:	82 e7       	ldi	r24, 0x72	; 114
 28a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 28e:	82 e2       	ldi	r24, 0x22	; 34
 290:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58);//:
 294:	8a e3       	ldi	r24, 0x3A	; 58
 296:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 29a:	82 e2       	ldi	r24, 0x22	; 34
 29c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	//current value transmission
	firstDigit = currentValue/100;
 2a0:	dc 9f       	mul	r29, r28
 2a2:	21 2d       	mov	r18, r1
 2a4:	11 24       	eor	r1, r1
 2a6:	22 95       	swap	r18
 2a8:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (currentValue-(firstDigit*100))/10;
 2aa:	02 03       	mulsu	r16, r18
 2ac:	c0 01       	movw	r24, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	8d 0f       	add	r24, r29
 2b2:	91 1d       	adc	r25, r1
 2b4:	b7 01       	movw	r22, r14
 2b6:	0e 94 6a 05 	call	0xad4	; 0xad4 <__divmodhi4>
 2ba:	c6 2f       	mov	r28, r22
	thirdDigit = currentValue - (firstDigit*100) - (secondDigit*10);
 2bc:	20 9f       	mul	r18, r16
 2be:	d0 0d       	add	r29, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	96 2f       	mov	r25, r22
 2c4:	99 0f       	add	r25, r25
 2c6:	89 2f       	mov	r24, r25
 2c8:	88 0f       	add	r24, r24
 2ca:	88 0f       	add	r24, r24
 2cc:	89 0f       	add	r24, r25
 2ce:	d8 1b       	sub	r29, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 2d0:	82 2f       	mov	r24, r18
 2d2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 2d6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 2da:	8c 2f       	mov	r24, r28
 2dc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 2e0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 2e4:	8d 2f       	mov	r24, r29
 2e6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 2ea:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	UART_Transmit(34);//"
 2ee:	82 e2       	ldi	r24, 0x22	; 34
 2f0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(125);//}
 2f4:	8d e7       	ldi	r24, 0x7D	; 125
 2f6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(44);//,
 2fa:	8c e2       	ldi	r24, 0x2C	; 44
 2fc:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(10); //Line feed
 300:	8a e0       	ldi	r24, 0x0A	; 10
 302:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 306:	8d e0       	ldi	r24, 0x0D	; 13
 308:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	 
	
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	ff 90       	pop	r15
 316:	ef 90       	pop	r14
 318:	df 90       	pop	r13
 31a:	08 95       	ret

0000031c <VERmodulator>:

void VERmodulator(){
	UART_Transmit(34); //"
 31c:	82 e2       	ldi	r24, 0x22	; 34
 31e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(118);//v
 322:	86 e7       	ldi	r24, 0x76	; 118
 324:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(101);//e
 328:	85 e6       	ldi	r24, 0x65	; 101
 32a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(114);//r
 32e:	82 e7       	ldi	r24, 0x72	; 114
 330:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 334:	82 e2       	ldi	r24, 0x22	; 34
 336:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58);//:
 33a:	8a e3       	ldi	r24, 0x3A	; 58
 33c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 340:	82 e2       	ldi	r24, 0x22	; 34
 342:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(49); //1
 346:	81 e3       	ldi	r24, 0x31	; 49
 348:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(46);//.
 34c:	8e e2       	ldi	r24, 0x2E	; 46
 34e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(50);//2
 352:	82 e3       	ldi	r24, 0x32	; 50
 354:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(46);//.
 358:	8e e2       	ldi	r24, 0x2E	; 46
 35a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(51);//3
 35e:	83 e3       	ldi	r24, 0x33	; 51
 360:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 364:	82 e2       	ldi	r24, 0x22	; 34
 366:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(44); //,
 36a:	8c e2       	ldi	r24, 0x2C	; 44
 36c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(10); //Line feed 
 370:	8a e0       	ldi	r24, 0x0A	; 10
 372:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 376:	8d e0       	ldi	r24, 0x0D	; 13
 378:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
 37c:	08 95       	ret

0000037e <PARAMmodulator>:
	 
}

void PARAMmodulator(uint8_t averagePower, uint8_t operatingFrequency, uint16_t appliedVoltage, uint8_t current){
 37e:	af 92       	push	r10
 380:	bf 92       	push	r11
 382:	cf 92       	push	r12
 384:	df 92       	push	r13
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	f8 2e       	mov	r15, r24
 394:	b6 2e       	mov	r11, r22
 396:	ea 01       	movw	r28, r20
 398:	02 2f       	mov	r16, r18
	uint8_t firstDigit; 
	uint8_t secondDigit;
	uint8_t thirdDigit;
	uint8_t fourthDigit;
	UART_Transmit(34);//"
 39a:	82 e2       	ldi	r24, 0x22	; 34
 39c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(112);//p
 3a0:	80 e7       	ldi	r24, 0x70	; 112
 3a2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(97);//a
 3a6:	81 e6       	ldi	r24, 0x61	; 97
 3a8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(114);//r
 3ac:	82 e7       	ldi	r24, 0x72	; 114
 3ae:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(97);//a
 3b2:	81 e6       	ldi	r24, 0x61	; 97
 3b4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(109);//m
 3b8:	8d e6       	ldi	r24, 0x6D	; 109
 3ba:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 3be:	82 e2       	ldi	r24, 0x22	; 34
 3c0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58);//:
 3c4:	8a e3       	ldi	r24, 0x3A	; 58
 3c6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(123);//{
 3ca:	8b e7       	ldi	r24, 0x7B	; 123
 3cc:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	//parameters
	
	UART_Transmit(34); //"
 3d0:	82 e2       	ldi	r24, 0x22	; 34
 3d2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(112); //p
 3d6:	80 e7       	ldi	r24, 0x70	; 112
 3d8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(119); //w
 3dc:	87 e7       	ldi	r24, 0x77	; 119
 3de:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(114);//r 
 3e2:	82 e7       	ldi	r24, 0x72	; 114
 3e4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34); //"
 3e8:	82 e2       	ldi	r24, 0x22	; 34
 3ea:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58); //:
 3ee:	8a e3       	ldi	r24, 0x3A	; 58
 3f0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 3f4:	82 e2       	ldi	r24, 0x22	; 34
 3f6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	//power parameters 
	firstDigit = averagePower/100;
 3fa:	19 e2       	ldi	r17, 0x29	; 41
 3fc:	f1 9e       	mul	r15, r17
 3fe:	21 2d       	mov	r18, r1
 400:	11 24       	eor	r1, r1
 402:	22 95       	swap	r18
 404:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (averagePower-(firstDigit*100))/10;
 406:	0f 2e       	mov	r0, r31
 408:	fc e9       	ldi	r31, 0x9C	; 156
 40a:	ef 2e       	mov	r14, r31
 40c:	f0 2d       	mov	r31, r0
 40e:	3e 2d       	mov	r19, r14
 410:	32 03       	mulsu	r19, r18
 412:	c0 01       	movw	r24, r0
 414:	11 24       	eor	r1, r1
 416:	8f 0d       	add	r24, r15
 418:	91 1d       	adc	r25, r1
 41a:	0f 2e       	mov	r0, r31
 41c:	fa e0       	ldi	r31, 0x0A	; 10
 41e:	cf 2e       	mov	r12, r31
 420:	d1 2c       	mov	r13, r1
 422:	f0 2d       	mov	r31, r0
 424:	b6 01       	movw	r22, r12
 426:	0e 94 6a 05 	call	0xad4	; 0xad4 <__divmodhi4>
 42a:	a6 2e       	mov	r10, r22
	thirdDigit = averagePower - (firstDigit*100) - (secondDigit*10);
 42c:	2e 9d       	mul	r18, r14
 42e:	f0 0c       	add	r15, r0
 430:	11 24       	eor	r1, r1
 432:	96 2f       	mov	r25, r22
 434:	99 0f       	add	r25, r25
 436:	89 2f       	mov	r24, r25
 438:	88 0f       	add	r24, r24
 43a:	88 0f       	add	r24, r24
 43c:	89 0f       	add	r24, r25
 43e:	f8 1a       	sub	r15, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 440:	82 2f       	mov	r24, r18
 442:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 446:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 44a:	8a 2d       	mov	r24, r10
 44c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 450:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(46); //decimal point
 454:	8e e2       	ldi	r24, 0x2E	; 46
 456:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 45a:	8f 2d       	mov	r24, r15
 45c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 460:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(87); //W
 464:	87 e5       	ldi	r24, 0x57	; 87
 466:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34); //"
 46a:	82 e2       	ldi	r24, 0x22	; 34
 46c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(44); //,
 470:	8c e2       	ldi	r24, 0x2C	; 44
 472:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	 
	 
	
	//frequency
	UART_Transmit(34); //"
 476:	82 e2       	ldi	r24, 0x22	; 34
 478:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(102);//f
 47c:	86 e6       	ldi	r24, 0x66	; 102
 47e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(114);//r
 482:	82 e7       	ldi	r24, 0x72	; 114
 484:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(101);//e
 488:	85 e6       	ldi	r24, 0x65	; 101
 48a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(113);//q
 48e:	81 e7       	ldi	r24, 0x71	; 113
 490:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 494:	82 e2       	ldi	r24, 0x22	; 34
 496:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58);//:
 49a:	8a e3       	ldi	r24, 0x3A	; 58
 49c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 4a0:	82 e2       	ldi	r24, 0x22	; 34
 4a2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	firstDigit = operatingFrequency/10;
 4a6:	8d ec       	ldi	r24, 0xCD	; 205
 4a8:	b8 9e       	mul	r11, r24
 4aa:	81 2d       	mov	r24, r1
 4ac:	11 24       	eor	r1, r1
 4ae:	86 95       	lsr	r24
 4b0:	86 95       	lsr	r24
 4b2:	86 95       	lsr	r24
	secondDigit = operatingFrequency-(firstDigit*10);
 4b4:	28 2f       	mov	r18, r24
 4b6:	22 0f       	add	r18, r18
 4b8:	92 2f       	mov	r25, r18
 4ba:	99 0f       	add	r25, r25
 4bc:	99 0f       	add	r25, r25
 4be:	92 0f       	add	r25, r18
 4c0:	b9 1a       	sub	r11, r25
	UART_Transmit(ASCIIConversion(firstDigit));
 4c2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 4c6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 4ca:	8b 2d       	mov	r24, r11
 4cc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 4d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(72); //H
 4d4:	88 e4       	ldi	r24, 0x48	; 72
 4d6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(122);//z
 4da:	8a e7       	ldi	r24, 0x7A	; 122
 4dc:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 4e0:	82 e2       	ldi	r24, 0x22	; 34
 4e2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(44);//,
 4e6:	8c e2       	ldi	r24, 0x2C	; 44
 4e8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	//current 

	UART_Transmit(34); //"
 4ec:	82 e2       	ldi	r24, 0x22	; 34
 4ee:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(99); //c
 4f2:	83 e6       	ldi	r24, 0x63	; 99
 4f4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(117); //u
 4f8:	85 e7       	ldi	r24, 0x75	; 117
 4fa:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(114);//r
 4fe:	82 e7       	ldi	r24, 0x72	; 114
 500:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(114);//r
 504:	82 e7       	ldi	r24, 0x72	; 114
 506:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34); //"
 50a:	82 e2       	ldi	r24, 0x22	; 34
 50c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58); //:
 510:	8a e3       	ldi	r24, 0x3A	; 58
 512:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 516:	82 e2       	ldi	r24, 0x22	; 34
 518:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	firstDigit = current/100;
 51c:	01 9f       	mul	r16, r17
 51e:	31 2d       	mov	r19, r1
 520:	11 24       	eor	r1, r1
 522:	32 95       	swap	r19
 524:	3f 70       	andi	r19, 0x0F	; 15
	secondDigit = (current-(firstDigit*100))/10;
 526:	6e 2d       	mov	r22, r14
 528:	63 03       	mulsu	r22, r19
 52a:	c0 01       	movw	r24, r0
 52c:	11 24       	eor	r1, r1
 52e:	80 0f       	add	r24, r16
 530:	91 1d       	adc	r25, r1
 532:	b6 01       	movw	r22, r12
 534:	0e 94 6a 05 	call	0xad4	; 0xad4 <__divmodhi4>
 538:	16 2f       	mov	r17, r22
	thirdDigit = current - (firstDigit*100) - (secondDigit*10);
 53a:	3e 9d       	mul	r19, r14
 53c:	00 0d       	add	r16, r0
 53e:	11 24       	eor	r1, r1
 540:	96 2f       	mov	r25, r22
 542:	99 0f       	add	r25, r25
 544:	89 2f       	mov	r24, r25
 546:	88 0f       	add	r24, r24
 548:	88 0f       	add	r24, r24
 54a:	89 0f       	add	r24, r25
 54c:	08 1b       	sub	r16, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 54e:	83 2f       	mov	r24, r19
 550:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 554:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 558:	81 2f       	mov	r24, r17
 55a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 55e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 562:	80 2f       	mov	r24, r16
 564:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 568:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(109); //m
 56c:	8d e6       	ldi	r24, 0x6D	; 109
 56e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(65); //A
 572:	81 e4       	ldi	r24, 0x41	; 65
 574:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34); //"
 578:	82 e2       	ldi	r24, 0x22	; 34
 57a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(44); //,
 57e:	8c e2       	ldi	r24, 0x2C	; 44
 580:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	//applied voltage
	 
	UART_Transmit(34); //"
 584:	82 e2       	ldi	r24, 0x22	; 34
 586:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(118); //v
 58a:	86 e7       	ldi	r24, 0x76	; 118
 58c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(111); //o
 590:	8f e6       	ldi	r24, 0x6F	; 111
 592:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(108); //l
 596:	8c e6       	ldi	r24, 0x6C	; 108
 598:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(116); //t
 59c:	84 e7       	ldi	r24, 0x74	; 116
 59e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34); //"
 5a2:	82 e2       	ldi	r24, 0x22	; 34
 5a4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58); //:
 5a8:	8a e3       	ldi	r24, 0x3A	; 58
 5aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34); //"
 5ae:	82 e2       	ldi	r24, 0x22	; 34
 5b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	firstDigit = appliedVoltage/1000;
 5b4:	9e 01       	movw	r18, r28
 5b6:	36 95       	lsr	r19
 5b8:	27 95       	ror	r18
 5ba:	36 95       	lsr	r19
 5bc:	27 95       	ror	r18
 5be:	36 95       	lsr	r19
 5c0:	27 95       	ror	r18
 5c2:	a5 ec       	ldi	r26, 0xC5	; 197
 5c4:	b0 e2       	ldi	r27, 0x20	; 32
 5c6:	0e 94 a0 05 	call	0xb40	; 0xb40 <__umulhisi3>
 5ca:	fc 01       	movw	r30, r24
 5cc:	f2 95       	swap	r31
 5ce:	e2 95       	swap	r30
 5d0:	ef 70       	andi	r30, 0x0F	; 15
 5d2:	ef 27       	eor	r30, r31
 5d4:	ff 70       	andi	r31, 0x0F	; 15
 5d6:	ef 27       	eor	r30, r31
	secondDigit = (appliedVoltage-(firstDigit*1000))/100;
 5d8:	88 e1       	ldi	r24, 0x18	; 24
 5da:	9c ef       	ldi	r25, 0xFC	; 252
 5dc:	e8 9f       	mul	r30, r24
 5de:	a0 01       	movw	r20, r0
 5e0:	e9 9f       	mul	r30, r25
 5e2:	50 0d       	add	r21, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	4c 0f       	add	r20, r28
 5e8:	5d 1f       	adc	r21, r29
 5ea:	9a 01       	movw	r18, r20
 5ec:	36 95       	lsr	r19
 5ee:	27 95       	ror	r18
 5f0:	36 95       	lsr	r19
 5f2:	27 95       	ror	r18
 5f4:	ab e7       	ldi	r26, 0x7B	; 123
 5f6:	b4 e1       	ldi	r27, 0x14	; 20
 5f8:	0e 94 a0 05 	call	0xb40	; 0xb40 <__umulhisi3>
 5fc:	8c 01       	movw	r16, r24
 5fe:	16 95       	lsr	r17
 600:	07 95       	ror	r16
	thirdDigit = (appliedVoltage - (firstDigit*1000) - (secondDigit*100))/10;
 602:	6e 2d       	mov	r22, r14
 604:	60 03       	mulsu	r22, r16
 606:	90 01       	movw	r18, r0
 608:	11 24       	eor	r1, r1
 60a:	24 0f       	add	r18, r20
 60c:	35 1f       	adc	r19, r21
 60e:	ad ec       	ldi	r26, 0xCD	; 205
 610:	bc ec       	ldi	r27, 0xCC	; 204
 612:	0e 94 a0 05 	call	0xb40	; 0xb40 <__umulhisi3>
 616:	6c 01       	movw	r12, r24
 618:	d6 94       	lsr	r13
 61a:	c7 94       	ror	r12
 61c:	d6 94       	lsr	r13
 61e:	c7 94       	ror	r12
 620:	d6 94       	lsr	r13
 622:	c7 94       	ror	r12
	fourthDigit = appliedVoltage -(firstDigit*1000) - (secondDigit*100) - (thirdDigit*10);
 624:	88 e1       	ldi	r24, 0x18	; 24
 626:	e8 9f       	mul	r30, r24
 628:	c0 0d       	add	r28, r0
 62a:	11 24       	eor	r1, r1
 62c:	e0 9e       	mul	r14, r16
 62e:	c0 0d       	add	r28, r0
 630:	11 24       	eor	r1, r1
 632:	9c 2d       	mov	r25, r12
 634:	99 0f       	add	r25, r25
 636:	89 2f       	mov	r24, r25
 638:	88 0f       	add	r24, r24
 63a:	88 0f       	add	r24, r24
 63c:	89 0f       	add	r24, r25
 63e:	c8 1b       	sub	r28, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 640:	8e 2f       	mov	r24, r30
 642:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 646:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 64a:	80 2f       	mov	r24, r16
 64c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 650:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(46); //decimal point
 654:	8e e2       	ldi	r24, 0x2E	; 46
 656:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 65a:	8c 2d       	mov	r24, r12
 65c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 660:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(ASCIIConversion(fourthDigit));
 664:	8c 2f       	mov	r24, r28
 666:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ASCIIConversion>
 66a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(86); //V
 66e:	86 e5       	ldi	r24, 0x56	; 86
 670:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34); //"
 674:	82 e2       	ldi	r24, 0x22	; 34
 676:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	 
	UART_Transmit(125); //}
 67a:	8d e7       	ldi	r24, 0x7D	; 125
 67c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(44);//,
 680:	8c e2       	ldi	r24, 0x2C	; 44
 682:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(10); //line feed
 686:	8a e0       	ldi	r24, 0x0A	; 10
 688:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 68c:	8d e0       	ldi	r24, 0x0D	; 13
 68e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	 
}
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	df 90       	pop	r13
 6a0:	cf 90       	pop	r12
 6a2:	bf 90       	pop	r11
 6a4:	af 90       	pop	r10
 6a6:	08 95       	ret

000006a8 <ERRORmodulator>:



void ERRORmodulator(bool errorClear,bool jamErrorFlag, bool collisionErrorFlag){  
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	c6 2f       	mov	r28, r22
 6ae:	d4 2f       	mov	r29, r20
	//error clear tells us whether we need to clear the error array
	if(!errorClear){
 6b0:	81 11       	cpse	r24, r1
 6b2:	28 c0       	rjmp	.+80     	; 0x704 <ERRORmodulator+0x5c>
		UART_Transmit(34); //"
 6b4:	82 e2       	ldi	r24, 0x22	; 34
 6b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(99); //c
 6ba:	83 e6       	ldi	r24, 0x63	; 99
 6bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(108); //l
 6c0:	8c e6       	ldi	r24, 0x6C	; 108
 6c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(114); //r
 6c6:	82 e7       	ldi	r24, 0x72	; 114
 6c8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(34); //"
 6cc:	82 e2       	ldi	r24, 0x22	; 34
 6ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(58); //:
 6d2:	8a e3       	ldi	r24, 0x3A	; 58
 6d4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(34); //"
 6d8:	82 e2       	ldi	r24, 0x22	; 34
 6da:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(101); //e
 6de:	85 e6       	ldi	r24, 0x65	; 101
 6e0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(119); //w
 6e4:	87 e7       	ldi	r24, 0x77	; 119
 6e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(34); //"
 6ea:	82 e2       	ldi	r24, 0x22	; 34
 6ec:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(44); //,
 6f0:	8c e2       	ldi	r24, 0x2C	; 44
 6f2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(10); //line feed
 6f6:	8a e0       	ldi	r24, 0x0A	; 10
 6f8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(13); //carriage return
 6fc:	8d e0       	ldi	r24, 0x0D	; 13
 6fe:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
 702:	06 c0       	rjmp	.+12     	; 0x710 <ERRORmodulator+0x68>
	}else{
		UART_Transmit(10); //line feed
 704:	8a e0       	ldi	r24, 0x0A	; 10
 706:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(13); //carriage return
 70a:	8d e0       	ldi	r24, 0x0D	; 13
 70c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	}
	
	if(collisionErrorFlag || jamErrorFlag) {
 710:	d1 11       	cpse	r29, r1
 712:	7c c0       	rjmp	.+248    	; 0x80c <ERRORmodulator+0x164>
 714:	c1 11       	cpse	r28, r1
 716:	45 c0       	rjmp	.+138    	; 0x7a2 <ERRORmodulator+0xfa>
 718:	25 c0       	rjmp	.+74     	; 0x764 <ERRORmodulator+0xbc>
				UART_Transmit(44); //,
			}
		}

		if(collisionErrorFlag){ //compressor colliding
			UART_Transmit(34); //"
 71a:	82 e2       	ldi	r24, 0x22	; 34
 71c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(99); //c
 720:	83 e6       	ldi	r24, 0x63	; 99
 722:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(111); //o
 726:	8f e6       	ldi	r24, 0x6F	; 111
 728:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(108); //l
 72c:	8c e6       	ldi	r24, 0x6C	; 108
 72e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(108); //l
 732:	8c e6       	ldi	r24, 0x6C	; 108
 734:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(105); //i
 738:	89 e6       	ldi	r24, 0x69	; 105
 73a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(115); //s
 73e:	83 e7       	ldi	r24, 0x73	; 115
 740:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(105); //i
 744:	89 e6       	ldi	r24, 0x69	; 105
 746:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(111); //o
 74a:	8f e6       	ldi	r24, 0x6F	; 111
 74c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(110); //n
 750:	8e e6       	ldi	r24, 0x6E	; 110
 752:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(34); //"
 756:	82 e2       	ldi	r24, 0x22	; 34
 758:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		}
			
			
		UART_Transmit(93); //[
 75c:	8d e5       	ldi	r24, 0x5D	; 93
 75e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
 762:	06 c0       	rjmp	.+12     	; 0x770 <ERRORmodulator+0xc8>
		
	}else{ //no errors present
		UART_Transmit(10); //line feed
 764:	8a e0       	ldi	r24, 0x0A	; 10
 766:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(13); //carriage return
 76a:	8d e0       	ldi	r24, 0x0D	; 13
 76c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	}
	
	
	//print final curly brackets
	
	UART_Transmit(10); //line feed
 770:	8a e0       	ldi	r24, 0x0A	; 10
 772:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 776:	8d e0       	ldi	r24, 0x0D	; 13
 778:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(125); // }
 77c:	8d e7       	ldi	r24, 0x7D	; 125
 77e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(10); //line feed
 782:	8a e0       	ldi	r24, 0x0A	; 10
 784:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 788:	8d e0       	ldi	r24, 0x0D	; 13
 78a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(125); // }
 78e:	8d e7       	ldi	r24, 0x7D	; 125
 790:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(10); //line feed
 794:	8a e0       	ldi	r24, 0x0A	; 10
 796:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 79a:	8d e0       	ldi	r24, 0x0D	; 13
 79c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>


 7a0:	4b c0       	rjmp	.+150    	; 0x838 <ERRORmodulator+0x190>
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
	}
	
	if(collisionErrorFlag || jamErrorFlag) {
		UART_Transmit(34); //'
 7a2:	82 e2       	ldi	r24, 0x22	; 34
 7a4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(101); //e
 7a8:	85 e6       	ldi	r24, 0x65	; 101
 7aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(119); //w
 7ae:	87 e7       	ldi	r24, 0x77	; 119
 7b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(34); // "
 7b4:	82 e2       	ldi	r24, 0x22	; 34
 7b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(58); //:
 7ba:	8a e3       	ldi	r24, 0x3A	; 58
 7bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(91); //[
 7c0:	8b e5       	ldi	r24, 0x5B	; 91
 7c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		//print errors
		
		if(jamErrorFlag){ //compressor jammed
			UART_Transmit(34); //"
 7c6:	82 e2       	ldi	r24, 0x22	; 34
 7c8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(106); //j
 7cc:	8a e6       	ldi	r24, 0x6A	; 106
 7ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(97); //a
 7d2:	81 e6       	ldi	r24, 0x61	; 97
 7d4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(109); //m
 7d8:	8d e6       	ldi	r24, 0x6D	; 109
 7da:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(34); //"
 7de:	82 e2       	ldi	r24, 0x22	; 34
 7e0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
 7e4:	bb cf       	rjmp	.-138    	; 0x75c <ERRORmodulator+0xb4>
		UART_Transmit(58); //:
		UART_Transmit(91); //[
		//print errors
		
		if(jamErrorFlag){ //compressor jammed
			UART_Transmit(34); //"
 7e6:	82 e2       	ldi	r24, 0x22	; 34
 7e8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(106); //j
 7ec:	8a e6       	ldi	r24, 0x6A	; 106
 7ee:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(97); //a
 7f2:	81 e6       	ldi	r24, 0x61	; 97
 7f4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(109); //m
 7f8:	8d e6       	ldi	r24, 0x6D	; 109
 7fa:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			UART_Transmit(34); //"
 7fe:	82 e2       	ldi	r24, 0x22	; 34
 800:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
			if(jamErrorFlag && collisionErrorFlag){
				UART_Transmit(44); //,
 804:	8c e2       	ldi	r24, 0x2C	; 44
 806:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
 80a:	87 cf       	rjmp	.-242    	; 0x71a <ERRORmodulator+0x72>
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
	}
	
	if(collisionErrorFlag || jamErrorFlag) {
		UART_Transmit(34); //'
 80c:	82 e2       	ldi	r24, 0x22	; 34
 80e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(101); //e
 812:	85 e6       	ldi	r24, 0x65	; 101
 814:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(119); //w
 818:	87 e7       	ldi	r24, 0x77	; 119
 81a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(34); // "
 81e:	82 e2       	ldi	r24, 0x22	; 34
 820:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(58); //:
 824:	8a e3       	ldi	r24, 0x3A	; 58
 826:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		UART_Transmit(91); //[
 82a:	8b e5       	ldi	r24, 0x5B	; 91
 82c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
		//print errors
		
		if(jamErrorFlag){ //compressor jammed
 830:	cc 23       	and	r28, r28
 832:	09 f4       	brne	.+2      	; 0x836 <ERRORmodulator+0x18e>
 834:	72 cf       	rjmp	.-284    	; 0x71a <ERRORmodulator+0x72>
 836:	d7 cf       	rjmp	.-82     	; 0x7e6 <ERRORmodulator+0x13e>
	UART_Transmit(125); // }
	UART_Transmit(10); //line feed
	UART_Transmit(13); //carriage return


 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <UART_SendJson>:
		lowPowerMode = false;
	}
	changePumpingEffort = false;
}

void UART_SendJson(uint8_t averagePower, uint8_t operatingFrequency, uint16_t appliedVoltage, uint8_t current, bool errorClear,bool jamErrorFlag, bool collisionErrorFlag, uint8_t requiredValue, uint8_t currentValue){
 83e:	6f 92       	push	r6
 840:	7f 92       	push	r7
 842:	8f 92       	push	r8
 844:	af 92       	push	r10
 846:	cf 92       	push	r12
 848:	df 92       	push	r13
 84a:	ef 92       	push	r14
 84c:	ff 92       	push	r15
 84e:	0f 93       	push	r16
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62
 85a:	18 2f       	mov	r17, r24
 85c:	f6 2e       	mov	r15, r22
 85e:	3a 01       	movw	r6, r20
 860:	d2 2e       	mov	r13, r18
 862:	8a 2d       	mov	r24, r10
 864:	68 2d       	mov	r22, r8
	MFCmodulator(requiredValue,currentValue);
 866:	0e 94 ad 00 	call	0x15a	; 0x15a <MFCmodulator>
	VERmodulator();
 86a:	0e 94 8e 01 	call	0x31c	; 0x31c <VERmodulator>
	PARAMmodulator(averagePower,operatingFrequency,appliedVoltage,current);
 86e:	2d 2d       	mov	r18, r13
 870:	a3 01       	movw	r20, r6
 872:	6f 2d       	mov	r22, r15
 874:	81 2f       	mov	r24, r17
 876:	0e 94 bf 01 	call	0x37e	; 0x37e <PARAMmodulator>
	ERRORmodulator(errorClear, jamErrorFlag, collisionErrorFlag);
 87a:	4c 2d       	mov	r20, r12
 87c:	6e 2d       	mov	r22, r14
 87e:	80 2f       	mov	r24, r16
 880:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ERRORmodulator>

}
 884:	df 91       	pop	r29
 886:	cf 91       	pop	r28
 888:	1f 91       	pop	r17
 88a:	0f 91       	pop	r16
 88c:	ff 90       	pop	r15
 88e:	ef 90       	pop	r14
 890:	df 90       	pop	r13
 892:	cf 90       	pop	r12
 894:	af 90       	pop	r10
 896:	8f 90       	pop	r8
 898:	7f 90       	pop	r7
 89a:	6f 90       	pop	r6
 89c:	08 95       	ret

0000089e <__vector_12>:
		 }
		 
	 }
 }

	 ISR(TIMER1_COMPB_vect){//TRIGGERS ON MATCH WITH OCRB REGISTER (OFF TIME)
 89e:	1f 92       	push	r1
 8a0:	0f 92       	push	r0
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	0f 92       	push	r0
 8a6:	11 24       	eor	r1, r1
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
		 if(isLHS || lowPowerMode){//LHS MOTION
 8ac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 8b0:	81 11       	cpse	r24, r1
 8b2:	04 c0       	rjmp	.+8      	; 0x8bc <__vector_12+0x1e>
 8b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lowPowerMode>
 8b8:	88 23       	and	r24, r24
 8ba:	51 f0       	breq	.+20     	; 0x8d0 <__vector_12+0x32>
			 if((~isDead) && (count <=noOfWaves)){
 8bc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 8c0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 8c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 8c8:	89 17       	cp	r24, r25
 8ca:	58 f0       	brcs	.+22     	; 0x8e2 <__vector_12+0x44>
				 PORTB &= ~(1 << PB1);
 8cc:	29 98       	cbi	0x05, 1	; 5
 8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <__vector_12+0x44>
			 }
		 }
		 else{//RHS MOTION
			 if((~isDead) && (count <=noOfWaves)){
 8d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 8d4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 8d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 8dc:	89 17       	cp	r24, r25
 8de:	08 f0       	brcs	.+2      	; 0x8e2 <__vector_12+0x44>
				 PORTD &= ~(1 << PD6);
 8e0:	5e 98       	cbi	0x0b, 6	; 11
			 }
		 }
	 }
 8e2:	9f 91       	pop	r25
 8e4:	8f 91       	pop	r24
 8e6:	0f 90       	pop	r0
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	0f 90       	pop	r0
 8ec:	1f 90       	pop	r1
 8ee:	18 95       	reti

000008f0 <__vector_18>:



ISR(USART_RX_vect){
 8f0:	1f 92       	push	r1
 8f2:	0f 92       	push	r0
 8f4:	0f b6       	in	r0, 0x3f	; 63
 8f6:	0f 92       	push	r0
 8f8:	11 24       	eor	r1, r1
	
}
 8fa:	0f 90       	pop	r0
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	0f 90       	pop	r0
 900:	1f 90       	pop	r1
 902:	18 95       	reti

00000904 <ConvertTimerValueToDutyCycle>:


uint8_t ConvertTimerValueToDutyCycle(){
	return ((dutyCycle*125)/100);
 904:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 908:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 90c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 910:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 914:	ad e7       	ldi	r26, 0x7D	; 125
 916:	b0 e0       	ldi	r27, 0x00	; 0
 918:	0e 94 af 05 	call	0xb5e	; 0xb5e <__muluhisi3>
 91c:	24 e6       	ldi	r18, 0x64	; 100
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	40 e0       	ldi	r20, 0x00	; 0
 922:	50 e0       	ldi	r21, 0x00	; 0
 924:	0e 94 7e 05 	call	0xafc	; 0xafc <__udivmodsi4>
 928:	82 2f       	mov	r24, r18
}
 92a:	08 95       	ret

0000092c <CalculateDeadTime>:

uint16_t CalculateDeadTime(){
	return (((500/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; //in ms
 92c:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frequency>
 930:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <noOfWaves>
 934:	70 e0       	ldi	r23, 0x00	; 0
 936:	84 ef       	ldi	r24, 0xF4	; 244
 938:	91 e0       	ldi	r25, 0x01	; 1
 93a:	0e 94 6a 05 	call	0xad4	; 0xad4 <__divmodhi4>
 93e:	62 1b       	sub	r22, r18
 940:	71 09       	sbc	r23, r1
}
 942:	8d e7       	ldi	r24, 0x7D	; 125
 944:	28 2f       	mov	r18, r24
 946:	26 9f       	mul	r18, r22
 948:	c0 01       	movw	r24, r0
 94a:	27 9f       	mul	r18, r23
 94c:	90 0d       	add	r25, r0
 94e:	11 24       	eor	r1, r1
 950:	08 95       	ret

00000952 <__vector_11>:
volatile uint8_t appliedVoltage = 0;
volatile uint8_t averagePower = 0;

//adc arrays
 
 ISR(TIMER1_COMPA_vect){
 952:	1f 92       	push	r1
 954:	0f 92       	push	r0
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	0f 92       	push	r0
 95a:	11 24       	eor	r1, r1
 95c:	2f 93       	push	r18
 95e:	3f 93       	push	r19
 960:	4f 93       	push	r20
 962:	5f 93       	push	r21
 964:	6f 93       	push	r22
 966:	7f 93       	push	r23
 968:	8f 93       	push	r24
 96a:	9f 93       	push	r25
 96c:	af 93       	push	r26
 96e:	bf 93       	push	r27
 970:	ef 93       	push	r30
 972:	ff 93       	push	r31
	 if(isLHS || lowPowerMode){	//LHS MOTION
 974:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 978:	81 11       	cpse	r24, r1
 97a:	04 c0       	rjmp	.+8      	; 0x984 <__vector_11+0x32>
 97c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lowPowerMode>
 980:	88 23       	and	r24, r24
 982:	c1 f1       	breq	.+112    	; 0x9f4 <__vector_11+0xa2>
		 if((count <= noOfWaves) && (!isDead)){//PRODUCING X NUMBER OF PWM OSCILLATIONS
 984:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 988:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 98c:	89 17       	cp	r24, r25
 98e:	68 f0       	brcs	.+26     	; 0x9aa <__vector_11+0x58>
 990:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 994:	81 11       	cpse	r24, r1
 996:	09 c0       	rjmp	.+18     	; 0x9aa <__vector_11+0x58>
			 PORTB |= (1<<PB1) | (1<< PB2); //turn RHS ON
 998:	85 b1       	in	r24, 0x05	; 5
 99a:	86 60       	ori	r24, 0x06	; 6
 99c:	85 b9       	out	0x05, r24	; 5
			 count++;
 99e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 9a2:	8f 5f       	subi	r24, 0xFF	; 255
 9a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <count>
 9a8:	58 c0       	rjmp	.+176    	; 0xa5a <__vector_11+0x108>
		 }
		 else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 9aa:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 9ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 9b2:	89 17       	cp	r24, r25
 9b4:	a0 f4       	brcc	.+40     	; 0x9de <__vector_11+0x8c>
			 PORTB &= ~(1<<PB1); //turn pmos off
 9b6:	29 98       	cbi	0x05, 1	; 5
			 PORTB &= ~(1<<PB2);//turn nmos off
 9b8:	2a 98       	cbi	0x05, 2	; 5
			 PWM_Change(CalculateDeadTime(),65535);
 9ba:	0e 94 96 04 	call	0x92c	; 0x92c <CalculateDeadTime>
 9be:	6f ef       	ldi	r22, 0xFF	; 255
 9c0:	7f ef       	ldi	r23, 0xFF	; 255
 9c2:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
			 if(!lowPowerMode){
 9c6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lowPowerMode>
 9ca:	81 11       	cpse	r24, r1
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__vector_11+0x80>
				 isLHS = false;
 9ce:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isLHS>
			 }
			 count = 0;
 9d2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count>
			 isDead = true; //deadzone begins
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isDead>
 9dc:	3e c0       	rjmp	.+124    	; 0xa5a <__vector_11+0x108>
		 }
		 else{	//end of deadzone, set the pwm frequency back to normal
			 //TCCR1B &= ~(1<<CS11);
			 isDead = false;
 9de:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <isDead>
			 PWM_Change(125,ConvertTimerValueToDutyCycle());
 9e2:	0e 94 82 04 	call	0x904	; 0x904 <ConvertTimerValueToDutyCycle>
 9e6:	68 2f       	mov	r22, r24
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	8d e7       	ldi	r24, 0x7D	; 125
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 9f2:	33 c0       	rjmp	.+102    	; 0xa5a <__vector_11+0x108>
		 }
	 }
	 else{//RHS MOTION
		 if((count <= noOfWaves) && (!isDead)){
 9f4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 9f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 9fc:	89 17       	cp	r24, r25
 9fe:	68 f0       	brcs	.+26     	; 0xa1a <__vector_11+0xc8>
 a00:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 a04:	81 11       	cpse	r24, r1
 a06:	09 c0       	rjmp	.+18     	; 0xa1a <__vector_11+0xc8>
			 PORTD |= (1<< PD6)|(1<<PD5); //NMOS and PMOS on
 a08:	8b b1       	in	r24, 0x0b	; 11
 a0a:	80 66       	ori	r24, 0x60	; 96
 a0c:	8b b9       	out	0x0b, r24	; 11
			 count++;
 a0e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 a12:	8f 5f       	subi	r24, 0xFF	; 255
 a14:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <count>
 a18:	20 c0       	rjmp	.+64     	; 0xa5a <__vector_11+0x108>
		 }
		 else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 a1a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 a1e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 a22:	89 17       	cp	r24, r25
 a24:	80 f4       	brcc	.+32     	; 0xa46 <__vector_11+0xf4>
			 PORTD &= ~(1<< PD6);
 a26:	5e 98       	cbi	0x0b, 6	; 11
			 PORTD &= ~(1<<PD5);
 a28:	5d 98       	cbi	0x0b, 5	; 11
			 PWM_Change(CalculateDeadTime(),65535); //apply deadzone
 a2a:	0e 94 96 04 	call	0x92c	; 0x92c <CalculateDeadTime>
 a2e:	6f ef       	ldi	r22, 0xFF	; 255
 a30:	7f ef       	ldi	r23, 0xFF	; 255
 a32:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
			 isLHS = true;
 a36:	81 e0       	ldi	r24, 0x01	; 1
 a38:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isLHS>
			 count = 0;
 a3c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count>
			 isDead = true; //deadzone begins
 a40:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isDead>
 a44:	0a c0       	rjmp	.+20     	; 0xa5a <__vector_11+0x108>
		 }
		 else{	//end of deadzone, set the pwm frequency back to normal
			 //TCCR1B &= ~(1<<CS11);
			 isDead = false;
 a46:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <isDead>
			 PWM_Change(125,ConvertTimerValueToDutyCycle());
 a4a:	0e 94 82 04 	call	0x904	; 0x904 <ConvertTimerValueToDutyCycle>
 a4e:	68 2f       	mov	r22, r24
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	8d e7       	ldi	r24, 0x7D	; 125
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
		 }
		 
	 }
 }
 a5a:	ff 91       	pop	r31
 a5c:	ef 91       	pop	r30
 a5e:	bf 91       	pop	r27
 a60:	af 91       	pop	r26
 a62:	9f 91       	pop	r25
 a64:	8f 91       	pop	r24
 a66:	7f 91       	pop	r23
 a68:	6f 91       	pop	r22
 a6a:	5f 91       	pop	r21
 a6c:	4f 91       	pop	r20
 a6e:	3f 91       	pop	r19
 a70:	2f 91       	pop	r18
 a72:	0f 90       	pop	r0
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	0f 90       	pop	r0
 a78:	1f 90       	pop	r1
 a7a:	18 95       	reti

00000a7c <ASCIIConversion>:
}

uint8_t ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
 a7c:	80 5d       	subi	r24, 0xD0	; 208
 a7e:	08 95       	ret

00000a80 <main>:


int main(void)
{	
	//clock_prescale_set(clock_div_2);
    sei();
 a80:	78 94       	sei
	UART_Init(UBRR_VALUE);
 a82:	87 e6       	ldi	r24, 0x67	; 103
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 67 00 	call	0xce	; 0xce <UART_Init>
	//ADC_Init();
	PWM_Init();
 a8a:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 a8e:	84 b1       	in	r24, 0x04	; 4
 a90:	86 60       	ori	r24, 0x06	; 6
 a92:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 a94:	8a b1       	in	r24, 0x0a	; 10
 a96:	80 66       	ori	r24, 0x60	; 96
 a98:	8a b9       	out	0x0a, r24	; 10
	

	UART_SendJson(12, 15, 1232, 20, false, true, true, 120,123);
 a9a:	0f 2e       	mov	r0, r31
 a9c:	fb e7       	ldi	r31, 0x7B	; 123
 a9e:	8f 2e       	mov	r8, r31
 aa0:	f0 2d       	mov	r31, r0
 aa2:	0f 2e       	mov	r0, r31
 aa4:	f8 e7       	ldi	r31, 0x78	; 120
 aa6:	af 2e       	mov	r10, r31
 aa8:	f0 2d       	mov	r31, r0
 aaa:	cc 24       	eor	r12, r12
 aac:	c3 94       	inc	r12
 aae:	ee 24       	eor	r14, r14
 ab0:	e3 94       	inc	r14
 ab2:	00 e0       	ldi	r16, 0x00	; 0
 ab4:	24 e1       	ldi	r18, 0x14	; 20
 ab6:	40 ed       	ldi	r20, 0xD0	; 208
 ab8:	54 e0       	ldi	r21, 0x04	; 4
 aba:	6f e0       	ldi	r22, 0x0F	; 15
 abc:	8c e0       	ldi	r24, 0x0C	; 12
 abe:	0e 94 1f 04 	call	0x83e	; 0x83e <UART_SendJson>

    while (1) 
    {
		
		if(changePumpingEffort){
 ac2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 ac6:	88 23       	and	r24, r24
 ac8:	e1 f3       	breq	.-8      	; 0xac2 <main+0x42>
			 UART_InterpretPumpingEffort();
 aca:	0e 94 84 00 	call	0x108	; 0x108 <UART_InterpretPumpingEffort>
			 ConvertTimerValueToDutyCycle();
 ace:	0e 94 82 04 	call	0x904	; 0x904 <ConvertTimerValueToDutyCycle>
 ad2:	f7 cf       	rjmp	.-18     	; 0xac2 <main+0x42>

00000ad4 <__divmodhi4>:
 ad4:	97 fb       	bst	r25, 7
 ad6:	07 2e       	mov	r0, r23
 ad8:	16 f4       	brtc	.+4      	; 0xade <__divmodhi4+0xa>
 ada:	00 94       	com	r0
 adc:	07 d0       	rcall	.+14     	; 0xaec <__divmodhi4_neg1>
 ade:	77 fd       	sbrc	r23, 7
 ae0:	09 d0       	rcall	.+18     	; 0xaf4 <__divmodhi4_neg2>
 ae2:	0e 94 ba 05 	call	0xb74	; 0xb74 <__udivmodhi4>
 ae6:	07 fc       	sbrc	r0, 7
 ae8:	05 d0       	rcall	.+10     	; 0xaf4 <__divmodhi4_neg2>
 aea:	3e f4       	brtc	.+14     	; 0xafa <__divmodhi4_exit>

00000aec <__divmodhi4_neg1>:
 aec:	90 95       	com	r25
 aee:	81 95       	neg	r24
 af0:	9f 4f       	sbci	r25, 0xFF	; 255
 af2:	08 95       	ret

00000af4 <__divmodhi4_neg2>:
 af4:	70 95       	com	r23
 af6:	61 95       	neg	r22
 af8:	7f 4f       	sbci	r23, 0xFF	; 255

00000afa <__divmodhi4_exit>:
 afa:	08 95       	ret

00000afc <__udivmodsi4>:
 afc:	a1 e2       	ldi	r26, 0x21	; 33
 afe:	1a 2e       	mov	r1, r26
 b00:	aa 1b       	sub	r26, r26
 b02:	bb 1b       	sub	r27, r27
 b04:	fd 01       	movw	r30, r26
 b06:	0d c0       	rjmp	.+26     	; 0xb22 <__udivmodsi4_ep>

00000b08 <__udivmodsi4_loop>:
 b08:	aa 1f       	adc	r26, r26
 b0a:	bb 1f       	adc	r27, r27
 b0c:	ee 1f       	adc	r30, r30
 b0e:	ff 1f       	adc	r31, r31
 b10:	a2 17       	cp	r26, r18
 b12:	b3 07       	cpc	r27, r19
 b14:	e4 07       	cpc	r30, r20
 b16:	f5 07       	cpc	r31, r21
 b18:	20 f0       	brcs	.+8      	; 0xb22 <__udivmodsi4_ep>
 b1a:	a2 1b       	sub	r26, r18
 b1c:	b3 0b       	sbc	r27, r19
 b1e:	e4 0b       	sbc	r30, r20
 b20:	f5 0b       	sbc	r31, r21

00000b22 <__udivmodsi4_ep>:
 b22:	66 1f       	adc	r22, r22
 b24:	77 1f       	adc	r23, r23
 b26:	88 1f       	adc	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	1a 94       	dec	r1
 b2c:	69 f7       	brne	.-38     	; 0xb08 <__udivmodsi4_loop>
 b2e:	60 95       	com	r22
 b30:	70 95       	com	r23
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	9b 01       	movw	r18, r22
 b38:	ac 01       	movw	r20, r24
 b3a:	bd 01       	movw	r22, r26
 b3c:	cf 01       	movw	r24, r30
 b3e:	08 95       	ret

00000b40 <__umulhisi3>:
 b40:	a2 9f       	mul	r26, r18
 b42:	b0 01       	movw	r22, r0
 b44:	b3 9f       	mul	r27, r19
 b46:	c0 01       	movw	r24, r0
 b48:	a3 9f       	mul	r26, r19
 b4a:	70 0d       	add	r23, r0
 b4c:	81 1d       	adc	r24, r1
 b4e:	11 24       	eor	r1, r1
 b50:	91 1d       	adc	r25, r1
 b52:	b2 9f       	mul	r27, r18
 b54:	70 0d       	add	r23, r0
 b56:	81 1d       	adc	r24, r1
 b58:	11 24       	eor	r1, r1
 b5a:	91 1d       	adc	r25, r1
 b5c:	08 95       	ret

00000b5e <__muluhisi3>:
 b5e:	0e 94 a0 05 	call	0xb40	; 0xb40 <__umulhisi3>
 b62:	a5 9f       	mul	r26, r21
 b64:	90 0d       	add	r25, r0
 b66:	b4 9f       	mul	r27, r20
 b68:	90 0d       	add	r25, r0
 b6a:	a4 9f       	mul	r26, r20
 b6c:	80 0d       	add	r24, r0
 b6e:	91 1d       	adc	r25, r1
 b70:	11 24       	eor	r1, r1
 b72:	08 95       	ret

00000b74 <__udivmodhi4>:
 b74:	aa 1b       	sub	r26, r26
 b76:	bb 1b       	sub	r27, r27
 b78:	51 e1       	ldi	r21, 0x11	; 17
 b7a:	07 c0       	rjmp	.+14     	; 0xb8a <__udivmodhi4_ep>

00000b7c <__udivmodhi4_loop>:
 b7c:	aa 1f       	adc	r26, r26
 b7e:	bb 1f       	adc	r27, r27
 b80:	a6 17       	cp	r26, r22
 b82:	b7 07       	cpc	r27, r23
 b84:	10 f0       	brcs	.+4      	; 0xb8a <__udivmodhi4_ep>
 b86:	a6 1b       	sub	r26, r22
 b88:	b7 0b       	sbc	r27, r23

00000b8a <__udivmodhi4_ep>:
 b8a:	88 1f       	adc	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	5a 95       	dec	r21
 b90:	a9 f7       	brne	.-22     	; 0xb7c <__udivmodhi4_loop>
 b92:	80 95       	com	r24
 b94:	90 95       	com	r25
 b96:	bc 01       	movw	r22, r24
 b98:	cd 01       	movw	r24, r26
 b9a:	08 95       	ret

00000b9c <_exit>:
 b9c:	f8 94       	cli

00000b9e <__stop_program>:
 b9e:	ff cf       	rjmp	.-2      	; 0xb9e <__stop_program>
