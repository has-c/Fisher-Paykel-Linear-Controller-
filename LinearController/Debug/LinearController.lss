
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000155e  000015f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000155e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000192  00800116  00800116  00001608  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002576  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b03  00000000  00000000  00003d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00004839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  0000583c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000926  00000000  00000000  00005bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e29  00000000  00000000  00006502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000732b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__vector_11>
      30:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e5       	ldi	r30, 0x5E	; 94
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 31       	cpi	r26, 0x16	; 22
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 e1       	ldi	r26, 0x16	; 22
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3a       	cpi	r26, 0xA8	; 168
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <main>
      9e:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	8f 77       	andi	r24, 0x7F	; 127
      ae:	80 83       	st	Z, r24
      b0:	80 81       	ld	r24, Z
      b2:	8f 7b       	andi	r24, 0xBF	; 191
      b4:	80 83       	st	Z, r24
      b6:	ea e7       	ldi	r30, 0x7A	; 122
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	85 68       	ori	r24, 0x85	; 133
      be:	80 83       	st	Z, r24
      c0:	08 95       	ret

000000c2 <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
      c2:	e1 e8       	ldi	r30, 0x81	; 129
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	80 81       	ld	r24, Z
      c8:	8b 60       	ori	r24, 0x0B	; 11
      ca:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
      cc:	ef e6       	ldi	r30, 0x6F	; 111
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	86 60       	ori	r24, 0x06	; 6
      d4:	80 83       	st	Z, r24
      d6:	08 95       	ret

000000d8 <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
      d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
      dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
      e0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
      e4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
      e8:	08 95       	ret

000000ea <UART_Init>:
#define MAX_VOLTAGE 13

//uart intializer
void UART_Init(unsigned int BAUD_RATE){
	
	UBRR0H = BAUD_RATE >>8;
      ea:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_RATE;
      ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0);
      f2:	e1 ec       	ldi	r30, 0xC1	; 193
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 e9       	ldi	r24, 0x90	; 144
      f8:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0)|(1<<TXCIE0);
      fa:	80 81       	ld	r24, Z
      fc:	88 64       	ori	r24, 0x48	; 72
      fe:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     100:	86 e0       	ldi	r24, 0x06	; 6
     102:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     106:	08 95       	ret

00000108 <UART_Transmit>:
}

//
void UART_Transmit(uint8_t myValue){
	//disable receive
	UCSR0B &= ~(1 << RXEN0);
     108:	e1 ec       	ldi	r30, 0xC1	; 193
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	90 81       	ld	r25, Z
     10e:	9f 7e       	andi	r25, 0xEF	; 239
     110:	90 83       	st	Z, r25
	UCSR0B &= ~(1 << RXCIE0);
     112:	90 81       	ld	r25, Z
     114:	9f 77       	andi	r25, 0x7F	; 127
     116:	90 83       	st	Z, r25
	while (!((1<<UDRE0)&&(UCSR0A))); //wait until the transmit register is ready
     118:	e0 ec       	ldi	r30, 0xC0	; 192
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	90 81       	ld	r25, Z
     11e:	99 23       	and	r25, r25
     120:	e9 f3       	breq	.-6      	; 0x11c <UART_Transmit+0x14>
	UDR0 = myValue;//once ready, store next value for transmission
     122:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     126:	08 95       	ret

00000128 <UART_InterpretPumpingEffort>:

//only changes dutycycle
void UART_InterpretPumpingEffort(){
	uint32_t voltageEquivalentValue;
	//pumpingEffort = 179; //mock pumping effort
	if(pumpingEffort==0){ //turn off mode
     128:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     12c:	81 11       	cpse	r24, r1
     12e:	05 c0       	rjmp	.+10     	; 0x13a <UART_InterpretPumpingEffort+0x12>
		//power_all_disable(); //disables all modules on the microcontroller
		//power_usart0_enable();
		dutyCycle = 0;
     130:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <dutyCycle+0x1>
     134:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <dutyCycle>
     138:	b6 c0       	rjmp	.+364    	; 0x2a6 <UART_InterpretPumpingEffort+0x17e>
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){
     13a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     13e:	88 23       	and	r24, r24
     140:	09 f4       	brne	.+2      	; 0x144 <UART_InterpretPumpingEffort+0x1c>
     142:	75 c0       	rjmp	.+234    	; 0x22e <UART_InterpretPumpingEffort+0x106>
     144:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     148:	83 3b       	cpi	r24, 0xB3	; 179
     14a:	08 f0       	brcs	.+2      	; 0x14e <UART_InterpretPumpingEffort+0x26>
     14c:	70 c0       	rjmp	.+224    	; 0x22e <UART_InterpretPumpingEffort+0x106>
		//power_all_enable();
		//70% of values - care about efficiency and meeting pumpingEffort
		//efficiency actions turn two switches off
		//disable all unused modules
		if(!lowPowerMode){
     14e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     152:	81 11       	cpse	r24, r1
     154:	0a c0       	rjmp	.+20     	; 0x16a <UART_InterpretPumpingEffort+0x42>
			frequency /= 2;
     156:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <frequency>
     15a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <frequency+0x1>
     15e:	96 95       	lsr	r25
     160:	87 95       	ror	r24
     162:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <frequency+0x1>
     166:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <frequency>
		}
		lowPowerMode = true; //turn off two switches push from one direction
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <lowPowerMode>
		if(pumpingEffort < 10){
     170:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     174:	8a 30       	cpi	r24, 0x0A	; 10
     176:	88 f4       	brcc	.+34     	; 0x19a <UART_InterpretPumpingEffort+0x72>
			voltageEquivalentValue = (75*pumpingEffort+2000)/1000;
     178:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     17c:	2b e4       	ldi	r18, 0x4B	; 75
     17e:	82 9f       	mul	r24, r18
     180:	c0 01       	movw	r24, r0
     182:	11 24       	eor	r1, r1
     184:	80 53       	subi	r24, 0x30	; 48
     186:	98 4f       	sbci	r25, 0xF8	; 248
     188:	68 ee       	ldi	r22, 0xE8	; 232
     18a:	73 e0       	ldi	r23, 0x03	; 3
     18c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__divmodhi4>
     190:	07 2e       	mov	r0, r23
     192:	00 0c       	add	r0, r0
     194:	88 0b       	sbc	r24, r24
     196:	99 0b       	sbc	r25, r25
     198:	35 c0       	rjmp	.+106    	; 0x204 <UART_InterpretPumpingEffort+0xdc>
		}else if(pumpingEffort>=10 && pumpingEffort<100){
     19a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     19e:	8a 30       	cpi	r24, 0x0A	; 10
     1a0:	f8 f0       	brcs	.+62     	; 0x1e0 <UART_InterpretPumpingEffort+0xb8>
     1a2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     1a6:	84 36       	cpi	r24, 0x64	; 100
     1a8:	d8 f4       	brcc	.+54     	; 0x1e0 <UART_InterpretPumpingEffort+0xb8>
			voltageEquivalentValue = (5*dutyCycle+250)/100;
     1aa:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <dutyCycle>
     1ae:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <dutyCycle+0x1>
     1b2:	9c 01       	movw	r18, r24
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	28 0f       	add	r18, r24
     1be:	39 1f       	adc	r19, r25
     1c0:	26 50       	subi	r18, 0x06	; 6
     1c2:	3f 4f       	sbci	r19, 0xFF	; 255
     1c4:	36 95       	lsr	r19
     1c6:	27 95       	ror	r18
     1c8:	36 95       	lsr	r19
     1ca:	27 95       	ror	r18
     1cc:	ab e7       	ldi	r26, 0x7B	; 123
     1ce:	b4 e1       	ldi	r27, 0x14	; 20
     1d0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__umulhisi3>
     1d4:	96 95       	lsr	r25
     1d6:	87 95       	ror	r24
     1d8:	bc 01       	movw	r22, r24
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	12 c0       	rjmp	.+36     	; 0x204 <UART_InterpretPumpingEffort+0xdc>
		}else{
			voltageEquivalentValue = (3*pumpingEffort+700)/100;
     1e0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	9c 01       	movw	r18, r24
     1e8:	22 0f       	add	r18, r18
     1ea:	33 1f       	adc	r19, r19
     1ec:	82 0f       	add	r24, r18
     1ee:	93 1f       	adc	r25, r19
     1f0:	84 54       	subi	r24, 0x44	; 68
     1f2:	9d 4f       	sbci	r25, 0xFD	; 253
     1f4:	64 e6       	ldi	r22, 0x64	; 100
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__divmodhi4>
     1fc:	07 2e       	mov	r0, r23
     1fe:	00 0c       	add	r0, r0
     200:	88 0b       	sbc	r24, r24
     202:	99 0b       	sbc	r25, r25
		}
		dutyCycle = (8.55*voltageEquivalentValue + 3.78);
     204:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__floatunsisf>
     208:	2d ec       	ldi	r18, 0xCD	; 205
     20a:	3c ec       	ldi	r19, 0xCC	; 204
     20c:	48 e0       	ldi	r20, 0x08	; 8
     20e:	51 e4       	ldi	r21, 0x41	; 65
     210:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     214:	25 e8       	ldi	r18, 0x85	; 133
     216:	3b ee       	ldi	r19, 0xEB	; 235
     218:	41 e7       	ldi	r20, 0x71	; 113
     21a:	50 e4       	ldi	r21, 0x40	; 64
     21c:	0e 94 48 08 	call	0x1090	; 0x1090 <__addsf3>
     220:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fixunssfsi>
     224:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <dutyCycle+0x1>
     228:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <dutyCycle>
     22c:	3c c0       	rjmp	.+120    	; 0x2a6 <UART_InterpretPumpingEffort+0x17e>
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){
     22e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     232:	83 3b       	cpi	r24, 0xB3	; 179
     234:	80 f1       	brcs	.+96     	; 0x296 <UART_InterpretPumpingEffort+0x16e>
     236:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
     23a:	8f 3f       	cpi	r24, 0xFF	; 255
     23c:	61 f1       	breq	.+88     	; 0x296 <UART_InterpretPumpingEffort+0x16e>
		//power_all_enable();
		//30% of values - go ham fam
		if(lowPowerMode){
     23e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     242:	88 23       	and	r24, r24
     244:	51 f0       	breq	.+20     	; 0x25a <UART_InterpretPumpingEffort+0x132>
			frequency *= 2;
     246:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <frequency>
     24a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <frequency+0x1>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <frequency+0x1>
     256:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <frequency>
		}
		lowPowerMode = false;
     25a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lowPowerMode>
		voltageEquivalentValue = pumpingEffort/30; //30 is a constant used to make this relationship work
     25e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pumpingEffort>
		dutyCycle = (917*voltageEquivalentValue + 456)/100;
     262:	29 e8       	ldi	r18, 0x89	; 137
     264:	82 9f       	mul	r24, r18
     266:	21 2d       	mov	r18, r1
     268:	11 24       	eor	r1, r1
     26a:	22 95       	swap	r18
     26c:	2f 70       	andi	r18, 0x0F	; 15
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	a5 e9       	ldi	r26, 0x95	; 149
     272:	b3 e0       	ldi	r27, 0x03	; 3
     274:	0e 94 93 0a 	call	0x1526	; 0x1526 <__umulhisi3>
     278:	68 53       	subi	r22, 0x38	; 56
     27a:	7e 4f       	sbci	r23, 0xFE	; 254
     27c:	8f 4f       	sbci	r24, 0xFF	; 255
     27e:	9f 4f       	sbci	r25, 0xFF	; 255
     280:	24 e6       	ldi	r18, 0x64	; 100
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodsi4>
     28c:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <dutyCycle+0x1>
     290:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <dutyCycle>
     294:	08 c0       	rjmp	.+16     	; 0x2a6 <UART_InterpretPumpingEffort+0x17e>
	}else{ //255 lose your mind
		//power_all_enable();
		//change duty cycle and pwm to max out the motors
		lowPowerMode = false;
     296:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lowPowerMode>
		dutyCycle = 99;
     29a:	83 e6       	ldi	r24, 0x63	; 99
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <dutyCycle+0x1>
     2a2:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <dutyCycle>
	}
	changePumpingEffort	 = false;
     2a6:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <changePumpingEffort>
     2aa:	08 95       	ret

000002ac <MFCmodulator>:
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);

}


void MFCmodulator(uint8_t requiredValue, uint8_t currentValue){
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	18 2f       	mov	r17, r24
     2bc:	d6 2f       	mov	r29, r22
	//temp conversion variables. Used to split 3 digit numbers as only one digit can be sent at a time
	uint8_t firstDigit = 0;
	uint8_t secondDigit = 0;
	uint8_t thirdDigit = 0;
	
	UART_Transmit(13); //carriage return
     2be:	8d e0       	ldi	r24, 0x0D	; 13
     2c0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(123); //{
     2c4:	8b e7       	ldi	r24, 0x7B	; 123
     2c6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //line feed 
     2ca:	8a e0       	ldi	r24, 0x0A	; 10
     2cc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
     2d0:	8d e0       	ldi	r24, 0x0D	; 13
     2d2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//LCC Identifier 
	UART_Transmit(34); //"
     2d6:	82 e2       	ldi	r24, 0x22	; 34
     2d8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(51);//3
     2dc:	83 e3       	ldi	r24, 0x33	; 51
     2de:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     2e2:	82 e2       	ldi	r24, 0x22	; 34
     2e4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
     2e8:	8a e3       	ldi	r24, 0x3A	; 58
     2ea:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>

	//MFC 
	UART_Transmit(10); //Line feed
     2ee:	8a e0       	ldi	r24, 0x0A	; 10
     2f0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
     2f4:	8d e0       	ldi	r24, 0x0D	; 13
     2f6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(123); //{
     2fa:	8b e7       	ldi	r24, 0x7B	; 123
     2fc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //Line feed
     300:	8a e0       	ldi	r24, 0x0A	; 10
     302:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
     306:	8d e0       	ldi	r24, 0x0D	; 13
     308:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	
	//MFC letter setup
	UART_Transmit(34); //'
     30c:	82 e2       	ldi	r24, 0x22	; 34
     30e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(109);//m
     312:	8d e6       	ldi	r24, 0x6D	; 109
     314:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(102);//f
     318:	86 e6       	ldi	r24, 0x66	; 102
     31a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(99);//c
     31e:	83 e6       	ldi	r24, 0x63	; 99
     320:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     324:	82 e2       	ldi	r24, 0x22	; 34
     326:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
     32a:	8a e3       	ldi	r24, 0x3A	; 58
     32c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	 

	//MFC Values 
	UART_Transmit(123); //{
     330:	8b e7       	ldi	r24, 0x7B	; 123
     332:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
     336:	82 e2       	ldi	r24, 0x22	; 34
     338:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
     33c:	82 e7       	ldi	r24, 0x72	; 114
     33e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(101);//e
     342:	85 e6       	ldi	r24, 0x65	; 101
     344:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(113);//q
     348:	81 e7       	ldi	r24, 0x71	; 113
     34a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     34e:	82 e2       	ldi	r24, 0x22	; 34
     350:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
     354:	8a e3       	ldi	r24, 0x3A	; 58
     356:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     35a:	82 e2       	ldi	r24, 0x22	; 34
     35c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//required value transmission
	firstDigit = requiredValue/100;
     360:	c9 e2       	ldi	r28, 0x29	; 41
     362:	1c 9f       	mul	r17, r28
     364:	21 2d       	mov	r18, r1
     366:	11 24       	eor	r1, r1
     368:	22 95       	swap	r18
     36a:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (requiredValue-(firstDigit*100))/10;
     36c:	0c e9       	ldi	r16, 0x9C	; 156
     36e:	02 03       	mulsu	r16, r18
     370:	c0 01       	movw	r24, r0
     372:	11 24       	eor	r1, r1
     374:	81 0f       	add	r24, r17
     376:	91 1d       	adc	r25, r1
     378:	0f 2e       	mov	r0, r31
     37a:	fa e0       	ldi	r31, 0x0A	; 10
     37c:	ef 2e       	mov	r14, r31
     37e:	f1 2c       	mov	r15, r1
     380:	f0 2d       	mov	r31, r0
     382:	b7 01       	movw	r22, r14
     384:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__divmodhi4>
     388:	d6 2e       	mov	r13, r22
	thirdDigit = requiredValue - (firstDigit*100) - (secondDigit*10);
     38a:	20 9f       	mul	r18, r16
     38c:	10 0d       	add	r17, r0
     38e:	11 24       	eor	r1, r1
     390:	96 2f       	mov	r25, r22
     392:	99 0f       	add	r25, r25
     394:	89 2f       	mov	r24, r25
     396:	88 0f       	add	r24, r24
     398:	88 0f       	add	r24, r24
     39a:	89 0f       	add	r24, r25
     39c:	18 1b       	sub	r17, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     39e:	82 2f       	mov	r24, r18
     3a0:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     3a4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit)); 
     3a8:	8d 2d       	mov	r24, r13
     3aa:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     3ae:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     3b2:	81 2f       	mov	r24, r17
     3b4:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     3b8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     3bc:	82 e2       	ldi	r24, 0x22	; 34
     3be:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44);//,
     3c2:	8c e2       	ldi	r24, 0x2C	; 44
     3c4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	

	UART_Transmit(34);//"
     3c8:	82 e2       	ldi	r24, 0x22	; 34
     3ca:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(99);//c
     3ce:	83 e6       	ldi	r24, 0x63	; 99
     3d0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(117);//u
     3d4:	85 e7       	ldi	r24, 0x75	; 117
     3d6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
     3da:	82 e7       	ldi	r24, 0x72	; 114
     3dc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     3e0:	82 e2       	ldi	r24, 0x22	; 34
     3e2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
     3e6:	8a e3       	ldi	r24, 0x3A	; 58
     3e8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     3ec:	82 e2       	ldi	r24, 0x22	; 34
     3ee:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	//current value transmission
	firstDigit = currentValue/100;
     3f2:	dc 9f       	mul	r29, r28
     3f4:	21 2d       	mov	r18, r1
     3f6:	11 24       	eor	r1, r1
     3f8:	22 95       	swap	r18
     3fa:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (currentValue-(firstDigit*100))/10;
     3fc:	02 03       	mulsu	r16, r18
     3fe:	c0 01       	movw	r24, r0
     400:	11 24       	eor	r1, r1
     402:	8d 0f       	add	r24, r29
     404:	91 1d       	adc	r25, r1
     406:	b7 01       	movw	r22, r14
     408:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__divmodhi4>
     40c:	c6 2f       	mov	r28, r22
	thirdDigit = currentValue - (firstDigit*100) - (secondDigit*10);
     40e:	20 9f       	mul	r18, r16
     410:	d0 0d       	add	r29, r0
     412:	11 24       	eor	r1, r1
     414:	96 2f       	mov	r25, r22
     416:	99 0f       	add	r25, r25
     418:	89 2f       	mov	r24, r25
     41a:	88 0f       	add	r24, r24
     41c:	88 0f       	add	r24, r24
     41e:	89 0f       	add	r24, r25
     420:	d8 1b       	sub	r29, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     422:	82 2f       	mov	r24, r18
     424:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     428:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     42c:	8c 2f       	mov	r24, r28
     42e:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     432:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     436:	8d 2f       	mov	r24, r29
     438:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     43c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	UART_Transmit(34);//"
     440:	82 e2       	ldi	r24, 0x22	; 34
     442:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(125);//}
     446:	8d e7       	ldi	r24, 0x7D	; 125
     448:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44);//,
     44c:	8c e2       	ldi	r24, 0x2C	; 44
     44e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //Line feed
     452:	8a e0       	ldi	r24, 0x0A	; 10
     454:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
     458:	8d e0       	ldi	r24, 0x0D	; 13
     45a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	 
	
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	08 95       	ret

0000046e <VERmodulator>:

void VERmodulator(){
	UART_Transmit(34); //"
     46e:	82 e2       	ldi	r24, 0x22	; 34
     470:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(118);//v
     474:	86 e7       	ldi	r24, 0x76	; 118
     476:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(101);//e
     47a:	85 e6       	ldi	r24, 0x65	; 101
     47c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
     480:	82 e7       	ldi	r24, 0x72	; 114
     482:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     486:	82 e2       	ldi	r24, 0x22	; 34
     488:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
     48c:	8a e3       	ldi	r24, 0x3A	; 58
     48e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     492:	82 e2       	ldi	r24, 0x22	; 34
     494:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(49); //1
     498:	81 e3       	ldi	r24, 0x31	; 49
     49a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(46);//.
     49e:	8e e2       	ldi	r24, 0x2E	; 46
     4a0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(50);//2
     4a4:	82 e3       	ldi	r24, 0x32	; 50
     4a6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(46);//.
     4aa:	8e e2       	ldi	r24, 0x2E	; 46
     4ac:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(51);//3
     4b0:	83 e3       	ldi	r24, 0x33	; 51
     4b2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     4b6:	82 e2       	ldi	r24, 0x22	; 34
     4b8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44); //,
     4bc:	8c e2       	ldi	r24, 0x2C	; 44
     4be:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //Line feed 
     4c2:	8a e0       	ldi	r24, 0x0A	; 10
     4c4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
     4c8:	8d e0       	ldi	r24, 0x0D	; 13
     4ca:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
     4ce:	08 95       	ret

000004d0 <PARAMmodulator>:
	 
}

void PARAMmodulator(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current){
     4d0:	8f 92       	push	r8
     4d2:	9f 92       	push	r9
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	d8 2f       	mov	r29, r24
     4ea:	96 2e       	mov	r9, r22
     4ec:	69 01       	movw	r12, r18
     4ee:	7a 01       	movw	r14, r20
	uint8_t firstDigit; 
	uint8_t secondDigit;
	uint8_t thirdDigit;
	uint8_t fourthDigit;
	UART_Transmit(34);//"
     4f0:	82 e2       	ldi	r24, 0x22	; 34
     4f2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(112);//p
     4f6:	80 e7       	ldi	r24, 0x70	; 112
     4f8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(97);//a
     4fc:	81 e6       	ldi	r24, 0x61	; 97
     4fe:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
     502:	82 e7       	ldi	r24, 0x72	; 114
     504:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(97);//a
     508:	81 e6       	ldi	r24, 0x61	; 97
     50a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(109);//m
     50e:	8d e6       	ldi	r24, 0x6D	; 109
     510:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     514:	82 e2       	ldi	r24, 0x22	; 34
     516:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
     51a:	8a e3       	ldi	r24, 0x3A	; 58
     51c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(123);//{
     520:	8b e7       	ldi	r24, 0x7B	; 123
     522:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//parameters
	
	UART_Transmit(34); //"
     526:	82 e2       	ldi	r24, 0x22	; 34
     528:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(112); //p
     52c:	80 e7       	ldi	r24, 0x70	; 112
     52e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(119); //w
     532:	87 e7       	ldi	r24, 0x77	; 119
     534:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r 
     538:	82 e7       	ldi	r24, 0x72	; 114
     53a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
     53e:	82 e2       	ldi	r24, 0x22	; 34
     540:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58); //:
     544:	8a e3       	ldi	r24, 0x3A	; 58
     546:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     54a:	82 e2       	ldi	r24, 0x22	; 34
     54c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//power parameters 
	firstDigit = averagePower/100;
     550:	c9 e2       	ldi	r28, 0x29	; 41
     552:	dc 9f       	mul	r29, r28
     554:	21 2d       	mov	r18, r1
     556:	11 24       	eor	r1, r1
     558:	22 95       	swap	r18
     55a:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (averagePower-(firstDigit*100))/10;
     55c:	1c e9       	ldi	r17, 0x9C	; 156
     55e:	12 03       	mulsu	r17, r18
     560:	c0 01       	movw	r24, r0
     562:	11 24       	eor	r1, r1
     564:	8d 0f       	add	r24, r29
     566:	91 1d       	adc	r25, r1
     568:	0f 2e       	mov	r0, r31
     56a:	fa e0       	ldi	r31, 0x0A	; 10
     56c:	af 2e       	mov	r10, r31
     56e:	b1 2c       	mov	r11, r1
     570:	f0 2d       	mov	r31, r0
     572:	b5 01       	movw	r22, r10
     574:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__divmodhi4>
     578:	86 2e       	mov	r8, r22
	thirdDigit = averagePower - (firstDigit*100) - (secondDigit*10);
     57a:	21 9f       	mul	r18, r17
     57c:	d0 0d       	add	r29, r0
     57e:	11 24       	eor	r1, r1
     580:	96 2f       	mov	r25, r22
     582:	99 0f       	add	r25, r25
     584:	89 2f       	mov	r24, r25
     586:	88 0f       	add	r24, r24
     588:	88 0f       	add	r24, r24
     58a:	89 0f       	add	r24, r25
     58c:	d8 1b       	sub	r29, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     58e:	82 2f       	mov	r24, r18
     590:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     594:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     598:	88 2d       	mov	r24, r8
     59a:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     59e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(46); //decimal point
     5a2:	8e e2       	ldi	r24, 0x2E	; 46
     5a4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     5a8:	8d 2f       	mov	r24, r29
     5aa:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     5ae:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(87); //W
     5b2:	87 e5       	ldi	r24, 0x57	; 87
     5b4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
     5b8:	82 e2       	ldi	r24, 0x22	; 34
     5ba:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44); //,
     5be:	8c e2       	ldi	r24, 0x2C	; 44
     5c0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	 
	 
	
	//frequency
	UART_Transmit(34); //"
     5c4:	82 e2       	ldi	r24, 0x22	; 34
     5c6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(102);//f
     5ca:	86 e6       	ldi	r24, 0x66	; 102
     5cc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
     5d0:	82 e7       	ldi	r24, 0x72	; 114
     5d2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(101);//e
     5d6:	85 e6       	ldi	r24, 0x65	; 101
     5d8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(113);//q
     5dc:	81 e7       	ldi	r24, 0x71	; 113
     5de:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     5e2:	82 e2       	ldi	r24, 0x22	; 34
     5e4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
     5e8:	8a e3       	ldi	r24, 0x3A	; 58
     5ea:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     5ee:	82 e2       	ldi	r24, 0x22	; 34
     5f0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	firstDigit = operatingFrequency/10;
     5f4:	8d ec       	ldi	r24, 0xCD	; 205
     5f6:	98 9e       	mul	r9, r24
     5f8:	81 2d       	mov	r24, r1
     5fa:	11 24       	eor	r1, r1
     5fc:	86 95       	lsr	r24
     5fe:	86 95       	lsr	r24
     600:	86 95       	lsr	r24
	secondDigit = operatingFrequency-(firstDigit*10);
     602:	28 2f       	mov	r18, r24
     604:	22 0f       	add	r18, r18
     606:	92 2f       	mov	r25, r18
     608:	99 0f       	add	r25, r25
     60a:	99 0f       	add	r25, r25
     60c:	92 0f       	add	r25, r18
     60e:	99 1a       	sub	r9, r25
	UART_Transmit(ASCIIConversion(firstDigit));
     610:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     614:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     618:	89 2d       	mov	r24, r9
     61a:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     61e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(72); //H
     622:	88 e4       	ldi	r24, 0x48	; 72
     624:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(122);//z
     628:	8a e7       	ldi	r24, 0x7A	; 122
     62a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     62e:	82 e2       	ldi	r24, 0x22	; 34
     630:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44);//,
     634:	8c e2       	ldi	r24, 0x2C	; 44
     636:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//current 

	UART_Transmit(34); //"
     63a:	82 e2       	ldi	r24, 0x22	; 34
     63c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(99); //c
     640:	83 e6       	ldi	r24, 0x63	; 99
     642:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(117); //u
     646:	85 e7       	ldi	r24, 0x75	; 117
     648:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
     64c:	82 e7       	ldi	r24, 0x72	; 114
     64e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
     652:	82 e7       	ldi	r24, 0x72	; 114
     654:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
     658:	82 e2       	ldi	r24, 0x22	; 34
     65a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58); //:
     65e:	8a e3       	ldi	r24, 0x3A	; 58
     660:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
     664:	82 e2       	ldi	r24, 0x22	; 34
     666:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	firstDigit = current/100;
     66a:	0c 9f       	mul	r16, r28
     66c:	21 2d       	mov	r18, r1
     66e:	11 24       	eor	r1, r1
     670:	22 95       	swap	r18
     672:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (current-(firstDigit*100))/10;
     674:	12 03       	mulsu	r17, r18
     676:	c0 01       	movw	r24, r0
     678:	11 24       	eor	r1, r1
     67a:	80 0f       	add	r24, r16
     67c:	91 1d       	adc	r25, r1
     67e:	b5 01       	movw	r22, r10
     680:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__divmodhi4>
     684:	c6 2f       	mov	r28, r22
	thirdDigit = current - (firstDigit*100) - (secondDigit*10);
     686:	21 9f       	mul	r18, r17
     688:	00 0d       	add	r16, r0
     68a:	11 24       	eor	r1, r1
     68c:	96 2f       	mov	r25, r22
     68e:	99 0f       	add	r25, r25
     690:	89 2f       	mov	r24, r25
     692:	88 0f       	add	r24, r24
     694:	88 0f       	add	r24, r24
     696:	89 0f       	add	r24, r25
     698:	08 1b       	sub	r16, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     69a:	82 2f       	mov	r24, r18
     69c:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     6a0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     6a4:	8c 2f       	mov	r24, r28
     6a6:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     6aa:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     6ae:	80 2f       	mov	r24, r16
     6b0:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     6b4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(109); //m
     6b8:	8d e6       	ldi	r24, 0x6D	; 109
     6ba:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(65); //A
     6be:	81 e4       	ldi	r24, 0x41	; 65
     6c0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
     6c4:	82 e2       	ldi	r24, 0x22	; 34
     6c6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44); //,
     6ca:	8c e2       	ldi	r24, 0x2C	; 44
     6cc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//applied voltage
	 
	UART_Transmit(34); //"
     6d0:	82 e2       	ldi	r24, 0x22	; 34
     6d2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(118); //v
     6d6:	86 e7       	ldi	r24, 0x76	; 118
     6d8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(111); //o
     6dc:	8f e6       	ldi	r24, 0x6F	; 111
     6de:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(108); //l
     6e2:	8c e6       	ldi	r24, 0x6C	; 108
     6e4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(116); //t
     6e8:	84 e7       	ldi	r24, 0x74	; 116
     6ea:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
     6ee:	82 e2       	ldi	r24, 0x22	; 34
     6f0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58); //:
     6f4:	8a e3       	ldi	r24, 0x3A	; 58
     6f6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
     6fa:	82 e2       	ldi	r24, 0x22	; 34
     6fc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	firstDigit = appliedVoltage/1000;
     700:	c7 01       	movw	r24, r14
     702:	b6 01       	movw	r22, r12
     704:	28 ee       	ldi	r18, 0xE8	; 232
     706:	33 e0       	ldi	r19, 0x03	; 3
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodsi4>
     710:	d2 2f       	mov	r29, r18
	secondDigit = (appliedVoltage-(firstDigit*1000))/100;
     712:	28 ee       	ldi	r18, 0xE8	; 232
     714:	33 e0       	ldi	r19, 0x03	; 3
     716:	d2 9f       	mul	r29, r18
     718:	c0 01       	movw	r24, r0
     71a:	d3 9f       	mul	r29, r19
     71c:	90 0d       	add	r25, r0
     71e:	11 24       	eor	r1, r1
     720:	09 2e       	mov	r0, r25
     722:	00 0c       	add	r0, r0
     724:	aa 0b       	sbc	r26, r26
     726:	bb 0b       	sbc	r27, r27
     728:	46 01       	movw	r8, r12
     72a:	57 01       	movw	r10, r14
     72c:	88 1a       	sub	r8, r24
     72e:	99 0a       	sbc	r9, r25
     730:	aa 0a       	sbc	r10, r26
     732:	bb 0a       	sbc	r11, r27
     734:	c5 01       	movw	r24, r10
     736:	b4 01       	movw	r22, r8
     738:	24 e6       	ldi	r18, 0x64	; 100
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodsi4>
     744:	c2 2f       	mov	r28, r18
	thirdDigit = (appliedVoltage - (firstDigit*1000) - (secondDigit*100))/10;
     746:	14 e6       	ldi	r17, 0x64	; 100
     748:	12 9f       	mul	r17, r18
     74a:	c0 01       	movw	r24, r0
     74c:	11 24       	eor	r1, r1
     74e:	09 2e       	mov	r0, r25
     750:	00 0c       	add	r0, r0
     752:	aa 0b       	sbc	r26, r26
     754:	bb 0b       	sbc	r27, r27
     756:	a5 01       	movw	r20, r10
     758:	94 01       	movw	r18, r8
     75a:	28 1b       	sub	r18, r24
     75c:	39 0b       	sbc	r19, r25
     75e:	4a 0b       	sbc	r20, r26
     760:	5b 0b       	sbc	r21, r27
     762:	ca 01       	movw	r24, r20
     764:	b9 01       	movw	r22, r18
     766:	2a e0       	ldi	r18, 0x0A	; 10
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodsi4>
     772:	02 2f       	mov	r16, r18
	fourthDigit = appliedVoltage -(firstDigit*1000) - (secondDigit*100) - (thirdDigit*10);
     774:	38 e1       	ldi	r19, 0x18	; 24
     776:	d3 9f       	mul	r29, r19
     778:	c0 0c       	add	r12, r0
     77a:	11 24       	eor	r1, r1
     77c:	1c 9f       	mul	r17, r28
     77e:	c0 18       	sub	r12, r0
     780:	11 24       	eor	r1, r1
     782:	90 2f       	mov	r25, r16
     784:	99 0f       	add	r25, r25
     786:	89 2f       	mov	r24, r25
     788:	88 0f       	add	r24, r24
     78a:	88 0f       	add	r24, r24
     78c:	89 0f       	add	r24, r25
     78e:	c8 1a       	sub	r12, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     790:	8d 2f       	mov	r24, r29
     792:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     796:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     79a:	8c 2f       	mov	r24, r28
     79c:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     7a0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(46); //decimal point
     7a4:	8e e2       	ldi	r24, 0x2E	; 46
     7a6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     7aa:	80 2f       	mov	r24, r16
     7ac:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     7b0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(fourthDigit));
     7b4:	8c 2d       	mov	r24, r12
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <ASCIIConversion>
     7ba:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(86); //V
     7be:	86 e5       	ldi	r24, 0x56	; 86
     7c0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
     7c4:	82 e2       	ldi	r24, 0x22	; 34
     7c6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	 
	UART_Transmit(125); //}
     7ca:	8d e7       	ldi	r24, 0x7D	; 125
     7cc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44);//,
     7d0:	8c e2       	ldi	r24, 0x2C	; 44
     7d2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //line feed
     7d6:	8a e0       	ldi	r24, 0x0A	; 10
     7d8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
     7dc:	8d e0       	ldi	r24, 0x0D	; 13
     7de:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	 
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	bf 90       	pop	r11
     7f4:	af 90       	pop	r10
     7f6:	9f 90       	pop	r9
     7f8:	8f 90       	pop	r8
     7fa:	08 95       	ret

000007fc <ERRORmodulator>:

void ERRORmodulator(bool jamErrorFlag, bool collisionErrorFlag){  
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	d8 2f       	mov	r29, r24
     802:	c6 2f       	mov	r28, r22
	//error clear tells us whether we need to clear the error array
	if(clearErrorFlag){
     804:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <clearErrorFlag>
     808:	88 23       	and	r24, r24
     80a:	51 f1       	breq	.+84     	; 0x860 <ERRORmodulator+0x64>
		UART_Transmit(34); //"
     80c:	82 e2       	ldi	r24, 0x22	; 34
     80e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(99); //c
     812:	83 e6       	ldi	r24, 0x63	; 99
     814:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(108); //l
     818:	8c e6       	ldi	r24, 0x6C	; 108
     81a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(114); //r
     81e:	82 e7       	ldi	r24, 0x72	; 114
     820:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(34); //"
     824:	82 e2       	ldi	r24, 0x22	; 34
     826:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(58); //:
     82a:	8a e3       	ldi	r24, 0x3A	; 58
     82c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(34); //"
     830:	82 e2       	ldi	r24, 0x22	; 34
     832:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(101); //e
     836:	85 e6       	ldi	r24, 0x65	; 101
     838:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(119); //w
     83c:	87 e7       	ldi	r24, 0x77	; 119
     83e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(34); //"
     842:	82 e2       	ldi	r24, 0x22	; 34
     844:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(44); //,
     848:	8c e2       	ldi	r24, 0x2C	; 44
     84a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(10); //line feed
     84e:	8a e0       	ldi	r24, 0x0A	; 10
     850:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(13); //carriage return
     854:	8d e0       	ldi	r24, 0x0D	; 13
     856:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		clearErrorFlag = false;
     85a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <clearErrorFlag>
     85e:	36 c0       	rjmp	.+108    	; 0x8cc <ERRORmodulator+0xd0>
	}else{
		UART_Transmit(10); //line feed
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(13); //carriage return
     866:	8d e0       	ldi	r24, 0x0D	; 13
     868:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		
		if(collisionErrorFlag || jamErrorFlag) {
     86c:	c1 11       	cpse	r28, r1
     86e:	7c c0       	rjmp	.+248    	; 0x968 <__stack+0x69>
     870:	d1 11       	cpse	r29, r1
     872:	45 c0       	rjmp	.+138    	; 0x8fe <ERRORmodulator+0x102>
     874:	25 c0       	rjmp	.+74     	; 0x8c0 <ERRORmodulator+0xc4>
					UART_Transmit(44); //,
				}
			}

			if(collisionErrorFlag){ //compressor colliding
				UART_Transmit(34); //"
     876:	82 e2       	ldi	r24, 0x22	; 34
     878:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(99); //c
     87c:	83 e6       	ldi	r24, 0x63	; 99
     87e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(111); //o
     882:	8f e6       	ldi	r24, 0x6F	; 111
     884:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(108); //l
     888:	8c e6       	ldi	r24, 0x6C	; 108
     88a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(108); //l
     88e:	8c e6       	ldi	r24, 0x6C	; 108
     890:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(105); //i
     894:	89 e6       	ldi	r24, 0x69	; 105
     896:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(115); //s
     89a:	83 e7       	ldi	r24, 0x73	; 115
     89c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(105); //i
     8a0:	89 e6       	ldi	r24, 0x69	; 105
     8a2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(111); //o
     8a6:	8f e6       	ldi	r24, 0x6F	; 111
     8a8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(110); //n
     8ac:	8e e6       	ldi	r24, 0x6E	; 110
     8ae:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(34); //"
     8b2:	82 e2       	ldi	r24, 0x22	; 34
     8b4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			}
			
			
			UART_Transmit(93); //[
     8b8:	8d e5       	ldi	r24, 0x5D	; 93
     8ba:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <ERRORmodulator+0xd0>
			
			}else{ //no errors present
			UART_Transmit(10); //line feed
     8c0:	8a e0       	ldi	r24, 0x0A	; 10
     8c2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(13); //carriage return
     8c6:	8d e0       	ldi	r24, 0x0D	; 13
     8c8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	}
	
	
	//print final curly brackets
	
	UART_Transmit(10); //line feed
     8cc:	8a e0       	ldi	r24, 0x0A	; 10
     8ce:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(125); // }
     8d8:	8d e7       	ldi	r24, 0x7D	; 125
     8da:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //line feed
     8de:	8a e0       	ldi	r24, 0x0A	; 10
     8e0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
     8e4:	8d e0       	ldi	r24, 0x0D	; 13
     8e6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(125); // }
     8ea:	8d e7       	ldi	r24, 0x7D	; 125
     8ec:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //line feed
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
     8f6:	8d e0       	ldi	r24, 0x0D	; 13
     8f8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>


     8fc:	4b c0       	rjmp	.+150    	; 0x994 <__stack+0x95>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
     8fe:	82 e2       	ldi	r24, 0x22	; 34
     900:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(101); //e
     904:	85 e6       	ldi	r24, 0x65	; 101
     906:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(119); //w
     90a:	87 e7       	ldi	r24, 0x77	; 119
     90c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(34); // "
     910:	82 e2       	ldi	r24, 0x22	; 34
     912:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(58); //:
     916:	8a e3       	ldi	r24, 0x3A	; 58
     918:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(91); //[
     91c:	8b e5       	ldi	r24, 0x5B	; 91
     91e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
     922:	82 e2       	ldi	r24, 0x22	; 34
     924:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(106); //j
     928:	8a e6       	ldi	r24, 0x6A	; 106
     92a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(97); //a
     92e:	81 e6       	ldi	r24, 0x61	; 97
     930:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(109); //m
     934:	8d e6       	ldi	r24, 0x6D	; 109
     936:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(34); //"
     93a:	82 e2       	ldi	r24, 0x22	; 34
     93c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
     940:	bb cf       	rjmp	.-138    	; 0x8b8 <ERRORmodulator+0xbc>
			UART_Transmit(58); //:
			UART_Transmit(91); //[
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
     942:	82 e2       	ldi	r24, 0x22	; 34
     944:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(106); //j
     948:	8a e6       	ldi	r24, 0x6A	; 106
     94a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(97); //a
     94e:	81 e6       	ldi	r24, 0x61	; 97
     950:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(109); //m
     954:	8d e6       	ldi	r24, 0x6D	; 109
     956:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(34); //"
     95a:	82 e2       	ldi	r24, 0x22	; 34
     95c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				if(jamErrorFlag && collisionErrorFlag){
					UART_Transmit(44); //,
     960:	8c e2       	ldi	r24, 0x2C	; 44
     962:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
     966:	87 cf       	rjmp	.-242    	; 0x876 <ERRORmodulator+0x7a>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
     968:	82 e2       	ldi	r24, 0x22	; 34
     96a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(101); //e
     96e:	85 e6       	ldi	r24, 0x65	; 101
     970:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(119); //w
     974:	87 e7       	ldi	r24, 0x77	; 119
     976:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(34); // "
     97a:	82 e2       	ldi	r24, 0x22	; 34
     97c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(58); //:
     980:	8a e3       	ldi	r24, 0x3A	; 58
     982:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(91); //[
     986:	8b e5       	ldi	r24, 0x5B	; 91
     988:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
     98c:	dd 23       	and	r29, r29
     98e:	09 f4       	brne	.+2      	; 0x992 <__stack+0x93>
     990:	72 cf       	rjmp	.-284    	; 0x876 <ERRORmodulator+0x7a>
     992:	d7 cf       	rjmp	.-82     	; 0x942 <__stack+0x43>
	UART_Transmit(125); // }
	UART_Transmit(10); //line feed
	UART_Transmit(13); //carriage return


     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <UART_SendJson>:
	}
	changePumpingEffort	 = false;
}


void UART_SendJson(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current,bool jamErrorFlag, bool collisionErrorFlag, uint8_t requiredValue, uint8_t currentValue){
     99a:	4f 92       	push	r4
     99c:	5f 92       	push	r5
     99e:	6f 92       	push	r6
     9a0:	7f 92       	push	r7
     9a2:	8f 92       	push	r8
     9a4:	af 92       	push	r10
     9a6:	cf 92       	push	r12
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	18 2f       	mov	r17, r24
     9ba:	f6 2e       	mov	r15, r22
     9bc:	29 01       	movw	r4, r18
     9be:	3a 01       	movw	r6, r20
     9c0:	8a 2d       	mov	r24, r10
     9c2:	68 2d       	mov	r22, r8
	MFCmodulator(requiredValue,currentValue);
     9c4:	0e 94 56 01 	call	0x2ac	; 0x2ac <MFCmodulator>
	VERmodulator();
     9c8:	0e 94 37 02 	call	0x46e	; 0x46e <VERmodulator>
	PARAMmodulator(averagePower,operatingFrequency,appliedVoltage,current);
     9cc:	a3 01       	movw	r20, r6
     9ce:	92 01       	movw	r18, r4
     9d0:	6f 2d       	mov	r22, r15
     9d2:	81 2f       	mov	r24, r17
     9d4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <PARAMmodulator>
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);
     9d8:	6c 2d       	mov	r22, r12
     9da:	8e 2d       	mov	r24, r14
     9dc:	0e 94 fe 03 	call	0x7fc	; 0x7fc <ERRORmodulator>

}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	cf 90       	pop	r12
     9ee:	af 90       	pop	r10
     9f0:	8f 90       	pop	r8
     9f2:	7f 90       	pop	r7
     9f4:	6f 90       	pop	r6
     9f6:	5f 90       	pop	r5
     9f8:	4f 90       	pop	r4
     9fa:	08 95       	ret

000009fc <usart_putchar_printf>:
	}
}

void safetyShutdown(){
	if(cmprJammed){
		pumpingEffort = 0; //stop the coil if an error has occurred
     9fc:	cf 93       	push	r28
     9fe:	c8 2f       	mov	r28, r24
     a00:	8a 30       	cpi	r24, 0x0A	; 10
     a02:	19 f4       	brne	.+6      	; 0xa0a <usart_putchar_printf+0xe>
     a04:	8d e0       	ldi	r24, 0x0D	; 13
     a06:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
     a0a:	8c 2f       	mov	r24, r28
     a0c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <concatenate>:
     a18:	c0 97       	sbiw	r24, 0x30	; 48
     a1a:	e4 e6       	ldi	r30, 0x64	; 100
     a1c:	e8 9f       	mul	r30, r24
     a1e:	90 01       	movw	r18, r0
     a20:	e9 9f       	mul	r30, r25
     a22:	30 0d       	add	r19, r0
     a24:	11 24       	eor	r1, r1
     a26:	60 53       	subi	r22, 0x30	; 48
     a28:	71 09       	sbc	r23, r1
     a2a:	cb 01       	movw	r24, r22
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	66 0f       	add	r22, r22
     a32:	77 1f       	adc	r23, r23
     a34:	66 0f       	add	r22, r22
     a36:	77 1f       	adc	r23, r23
     a38:	66 0f       	add	r22, r22
     a3a:	77 1f       	adc	r23, r23
     a3c:	68 0f       	add	r22, r24
     a3e:	79 1f       	adc	r23, r25
     a40:	62 0f       	add	r22, r18
     a42:	73 1f       	adc	r23, r19
     a44:	ca 01       	movw	r24, r20
     a46:	c0 97       	sbiw	r24, 0x30	; 48
     a48:	86 0f       	add	r24, r22
     a4a:	97 1f       	adc	r25, r23
     a4c:	08 95       	ret

00000a4e <__vector_18>:
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	ef 93       	push	r30
     a5e:	ff 93       	push	r31
     a60:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a64:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <received>
     a68:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_count>
     a6c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <rx_count+0x1>
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <rx_count+0x1>
     a76:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_count>
     a7a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_count>
     a7e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <rx_count+0x1>
     a82:	45 97       	sbiw	r24, 0x15	; 21
     a84:	4c f0       	brlt	.+18     	; 0xa98 <__vector_18+0x4a>
     a86:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <rx_count>
     a8a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <rx_count+0x1>
     a8e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <received>
     a92:	e7 5e       	subi	r30, 0xE7	; 231
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 83       	st	Z, r24
     a98:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_count>
     a9c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <rx_count+0x1>
     aa0:	82 97       	sbiw	r24, 0x22	; 34
     aa2:	4c f0       	brlt	.+18     	; 0xab6 <__vector_18+0x68>
     aa4:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <rx_count>
     aa8:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <rx_count+0x1>
     aac:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <received>
     ab0:	ec 50       	subi	r30, 0x0C	; 12
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	80 83       	st	Z, r24
     ab6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_count>
     aba:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <rx_count+0x1>
     abe:	86 97       	sbiw	r24, 0x26	; 38
     ac0:	7c f0       	brlt	.+30     	; 0xae0 <__vector_18+0x92>
     ac2:	e1 ec       	ldi	r30, 0xC1	; 193
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	8f 77       	andi	r24, 0x7F	; 127
     aca:	80 83       	st	Z, r24
     acc:	80 81       	ld	r24, Z
     ace:	8f 7e       	andi	r24, 0xEF	; 239
     ad0:	80 83       	st	Z, r24
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <finished>
     ad8:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_count+0x1>
     adc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_count>
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	9f 91       	pop	r25
     ae6:	8f 91       	pop	r24
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_20>:
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	8f 93       	push	r24
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
     b02:	e1 ec       	ldi	r30, 0xC1	; 193
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	80 61       	ori	r24, 0x10	; 16
     b0a:	80 83       	st	Z, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	80 68       	ori	r24, 0x80	; 128
     b10:	80 83       	st	Z, r24
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	8f 91       	pop	r24
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <__vector_12>:
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	0f 92       	push	r0
     b2a:	11 24       	eor	r1, r1
     b2c:	8f 93       	push	r24
     b2e:	9f 93       	push	r25
     b30:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <isLHS>
     b34:	81 11       	cpse	r24, r1
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__vector_12+0x1e>
     b38:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     b3c:	88 23       	and	r24, r24
     b3e:	51 f0       	breq	.+20     	; 0xb54 <__vector_12+0x32>
     b40:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <isDead>
     b44:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
     b48:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     b4c:	89 17       	cp	r24, r25
     b4e:	58 f0       	brcs	.+22     	; 0xb66 <__vector_12+0x44>
     b50:	2a 98       	cbi	0x05, 2	; 5
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <__vector_12+0x44>
     b54:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <isDead>
     b58:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
     b5c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     b60:	89 17       	cp	r24, r25
     b62:	08 f0       	brcs	.+2      	; 0xb66 <__vector_12+0x44>
     b64:	29 98       	cbi	0x05, 1	; 5
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <ConvertTimerValueToDutyCycle>:
	}
}

uint8_t ConvertTimerValueToDutyCycle(){
	return ((dutyCycle*125)/100);
     b74:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <dutyCycle>
     b78:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <dutyCycle+0x1>
     b7c:	4d e7       	ldi	r20, 0x7D	; 125
     b7e:	48 9f       	mul	r20, r24
     b80:	90 01       	movw	r18, r0
     b82:	49 9f       	mul	r20, r25
     b84:	30 0d       	add	r19, r0
     b86:	11 24       	eor	r1, r1
     b88:	36 95       	lsr	r19
     b8a:	27 95       	ror	r18
     b8c:	36 95       	lsr	r19
     b8e:	27 95       	ror	r18
     b90:	ab e7       	ldi	r26, 0x7B	; 123
     b92:	b4 e1       	ldi	r27, 0x14	; 20
     b94:	0e 94 93 0a 	call	0x1526	; 0x1526 <__umulhisi3>
     b98:	96 95       	lsr	r25
     b9a:	87 95       	ror	r24
}
     b9c:	08 95       	ret

00000b9e <CalculateDeadTime>:

uint16_t CalculateDeadTime(){
	return (((5000/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; //in ms
     b9e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <frequency>
     ba2:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <frequency+0x1>
     ba6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <noOfWaves>
     baa:	88 e8       	ldi	r24, 0x88	; 136
     bac:	93 e1       	ldi	r25, 0x13	; 19
     bae:	0e 94 49 0a 	call	0x1492	; 0x1492 <__udivmodhi4>
     bb2:	62 1b       	sub	r22, r18
     bb4:	71 09       	sbc	r23, r1
}
     bb6:	8d e7       	ldi	r24, 0x7D	; 125
     bb8:	28 2f       	mov	r18, r24
     bba:	26 9f       	mul	r18, r22
     bbc:	c0 01       	movw	r24, r0
     bbe:	27 9f       	mul	r18, r23
     bc0:	90 0d       	add	r25, r0
     bc2:	11 24       	eor	r1, r1
     bc4:	08 95       	ret

00000bc6 <__vector_11>:
	UCSR0B |= (1<<RXEN0);
	UCSR0B |= (1<<RXCIE0);
}


ISR(TIMER1_COMPA_vect){
     bc6:	1f 92       	push	r1
     bc8:	0f 92       	push	r0
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	0f 92       	push	r0
     bce:	11 24       	eor	r1, r1
     bd0:	2f 93       	push	r18
     bd2:	3f 93       	push	r19
     bd4:	4f 93       	push	r20
     bd6:	5f 93       	push	r21
     bd8:	6f 93       	push	r22
     bda:	7f 93       	push	r23
     bdc:	8f 93       	push	r24
     bde:	9f 93       	push	r25
     be0:	af 93       	push	r26
     be2:	bf 93       	push	r27
     be4:	ef 93       	push	r30
     be6:	ff 93       	push	r31
	if(isLHS || lowPowerMode){	//LHS MOTION
     be8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <isLHS>
     bec:	81 11       	cpse	r24, r1
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__vector_11+0x32>
     bf0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     bf4:	88 23       	and	r24, r24
     bf6:	b9 f1       	breq	.+110    	; 0xc66 <__vector_11+0xa0>
		if((count <= noOfWaves) && (!isDead)){//PRODUCING X NUMBER OF PWM OSCILLATIONS
     bf8:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
     bfc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     c00:	89 17       	cp	r24, r25
     c02:	60 f0       	brcs	.+24     	; 0xc1c <__vector_11+0x56>
     c04:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <isDead>
     c08:	81 11       	cpse	r24, r1
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <__vector_11+0x56>
			PORTB |= (1<< PB2); //turn RHS ON
     c0c:	2a 9a       	sbi	0x05, 2	; 5
			PORTD |= (1<<PD5);
     c0e:	5d 9a       	sbi	0x0b, 5	; 11
			count++;
     c10:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <count>
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <count>
     c1a:	57 c0       	rjmp	.+174    	; 0xcca <__vector_11+0x104>
		}
		else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
     c1c:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
     c20:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     c24:	89 17       	cp	r24, r25
     c26:	a0 f4       	brcc	.+40     	; 0xc50 <__vector_11+0x8a>
			PORTD &= ~(1<<PD5); //turn pmos off
     c28:	5d 98       	cbi	0x0b, 5	; 11
			PORTB &= ~(1<<PB2);//turn nmos off
     c2a:	2a 98       	cbi	0x05, 2	; 5
			PWM_Change(CalculateDeadTime(),65535);
     c2c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <CalculateDeadTime>
     c30:	6f ef       	ldi	r22, 0xFF	; 255
     c32:	7f ef       	ldi	r23, 0xFF	; 255
     c34:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
			if(!lowPowerMode){
     c38:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     c3c:	81 11       	cpse	r24, r1
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <__vector_11+0x7e>
				isLHS = false;
     c40:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <isLHS>
			}
			count = 0;
     c44:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <count>
			isDead = true; //deadzone begins
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <isDead>
     c4e:	3d c0       	rjmp	.+122    	; 0xcca <__vector_11+0x104>
		}
		else{	//end of deadzone, set the pwm frequency back to normal
			isDead = false;
     c50:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <isDead>
			PWM_Change(125,ConvertTimerValueToDutyCycle());
     c54:	0e 94 ba 05 	call	0xb74	; 0xb74 <ConvertTimerValueToDutyCycle>
     c58:	68 2f       	mov	r22, r24
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	8d e7       	ldi	r24, 0x7D	; 125
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
     c64:	32 c0       	rjmp	.+100    	; 0xcca <__vector_11+0x104>
		}
	}
	else{//RHS MOTION
		if((count <= noOfWaves) && (!isDead)){
     c66:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
     c6a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     c6e:	89 17       	cp	r24, r25
     c70:	60 f0       	brcs	.+24     	; 0xc8a <__vector_11+0xc4>
     c72:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <isDead>
     c76:	81 11       	cpse	r24, r1
     c78:	08 c0       	rjmp	.+16     	; 0xc8a <__vector_11+0xc4>
			PORTD |= (1<< PD6); //NMOS and PMOS on
     c7a:	5e 9a       	sbi	0x0b, 6	; 11
			PORTB |= (1<<PB1);
     c7c:	29 9a       	sbi	0x05, 1	; 5
			count++;
     c7e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <count>
     c82:	8f 5f       	subi	r24, 0xFF	; 255
     c84:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <count>
     c88:	20 c0       	rjmp	.+64     	; 0xcca <__vector_11+0x104>
		}
		else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
     c8a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
     c8e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     c92:	89 17       	cp	r24, r25
     c94:	80 f4       	brcc	.+32     	; 0xcb6 <__vector_11+0xf0>
			PORTD &= ~(1<< PD6);
     c96:	5e 98       	cbi	0x0b, 6	; 11
			PORTB &= ~(1<<PB1);
     c98:	29 98       	cbi	0x05, 1	; 5
			PWM_Change(CalculateDeadTime(),65535); //apply deadzone
     c9a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <CalculateDeadTime>
     c9e:	6f ef       	ldi	r22, 0xFF	; 255
     ca0:	7f ef       	ldi	r23, 0xFF	; 255
     ca2:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
			isLHS = true;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <isLHS>
			count = 0;
     cac:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <count>
			isDead = true; //deadzone begins
     cb0:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <isDead>
     cb4:	0a c0       	rjmp	.+20     	; 0xcca <__vector_11+0x104>
		}
		else{	//end of deadzone, set the pwm frequency back to normal
			isDead = false;
     cb6:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <isDead>
			PWM_Change(125,ConvertTimerValueToDutyCycle());
     cba:	0e 94 ba 05 	call	0xb74	; 0xb74 <ConvertTimerValueToDutyCycle>
     cbe:	68 2f       	mov	r22, r24
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	8d e7       	ldi	r24, 0x7D	; 125
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
		}
		
	}
}
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	7f 91       	pop	r23
     cd8:	6f 91       	pop	r22
     cda:	5f 91       	pop	r21
     cdc:	4f 91       	pop	r20
     cde:	3f 91       	pop	r19
     ce0:	2f 91       	pop	r18
     ce2:	0f 90       	pop	r0
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	0f 90       	pop	r0
     ce8:	1f 90       	pop	r1
     cea:	18 95       	reti

00000cec <ASCIIConversion>:
}

uint8_t ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
     cec:	80 5d       	subi	r24, 0xD0	; 208
     cee:	08 95       	ret

00000cf0 <main>:

int main(void)
{	
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	c8 55       	subi	r28, 0x58	; 88
     cfa:	d1 09       	sbc	r29, r1
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
	stdout= &mystdout;//printf
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__iob+0x3>
     d0e:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__iob+0x2>

    sei();
     d12:	78 94       	sei
	UART_Init(UBRR_VALUE);
     d14:	83 e3       	ldi	r24, 0x33	; 51
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 75 00 	call	0xea	; 0xea <UART_Init>
	ADC_Init();
     d1c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
     d20:	0e 94 61 00 	call	0xc2	; 0xc2 <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
     d24:	84 b1       	in	r24, 0x04	; 4
     d26:	86 60       	ori	r24, 0x06	; 6
     d28:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
     d2a:	8a b1       	in	r24, 0x0a	; 10
     d2c:	80 66       	ori	r24, 0x60	; 96
     d2e:	8a b9       	out	0x0a, r24	; 10
		currentIndex = 0;
		uint32_t rmsVoltage = 0;
		uint32_t currentSum = 0;
		uint32_t rmsCurrent = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};
     d30:	0f 2e       	mov	r0, r31
     d32:	f0 e5       	ldi	r31, 0x50	; 80
     d34:	bf 2e       	mov	r11, r31
     d36:	f0 2d       	mov	r31, r0
     d38:	ae 01       	movw	r20, r28
     d3a:	4f 5f       	subi	r20, 0xFF	; 255
     d3c:	5f 4f       	sbci	r21, 0xFF	; 255
     d3e:	63 96       	adiw	r28, 0x13	; 19
     d40:	5f af       	std	Y+63, r21	; 0x3f
     d42:	4e af       	std	Y+62, r20	; 0x3e
     d44:	63 97       	sbiw	r28, 0x13	; 19
     d46:	1e 01       	movw	r2, r28
     d48:	5d e4       	ldi	r21, 0x4D	; 77
     d4a:	25 0e       	add	r2, r21
     d4c:	31 1c       	adc	r3, r1


    while (1) 
    {	
		//reset index positions
		voltageLHSIndex = 0;
     d4e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <voltageLHSIndex>
		voltageRHSIndex = 0;
     d52:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <voltageRHSIndex>
		currentIndex = 0;
     d56:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <currentIndex>
		uint32_t rmsVoltage = 0;
		uint32_t currentSum = 0;
		uint32_t rmsCurrent = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};
     d5a:	63 96       	adiw	r28, 0x13	; 19
     d5c:	ae ad       	ldd	r26, Y+62	; 0x3e
     d5e:	bf ad       	ldd	r27, Y+63	; 0x3f
     d60:	63 97       	sbiw	r28, 0x13	; 19
     d62:	eb 2d       	mov	r30, r11
     d64:	1d 92       	st	X+, r1
     d66:	ea 95       	dec	r30
     d68:	e9 f7       	brne	.-6      	; 0xd64 <main+0x74>
		
		
		//change the pumping effort
		UART_InterpretPumpingEffort();
     d6a:	0e 94 94 00 	call	0x128	; 0x128 <UART_InterpretPumpingEffort>
			//printf("%d\n",voltageLHS[voltageLHSIndex]);
			//voltageLHSIndex++;
		//}
		
		//mock arrays
		for(int i = 0; i < NUMBER_OF_SAMPLES;i++){
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
			voltageRHS[i] = 1132;
     d72:	c9 01       	movw	r24, r18
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	fc 01       	movw	r30, r24
     d7e:	e1 5a       	subi	r30, 0xA1	; 161
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	4c e6       	ldi	r20, 0x6C	; 108
     d84:	54 e0       	ldi	r21, 0x04	; 4
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	40 83       	st	Z, r20
     d8c:	51 83       	std	Z+1, r21	; 0x01
     d8e:	62 83       	std	Z+2, r22	; 0x02
     d90:	73 83       	std	Z+3, r23	; 0x03
			voltageLHS[i] = 40;
     d92:	fc 01       	movw	r30, r24
     d94:	e1 55       	subi	r30, 0x51	; 81
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	48 e2       	ldi	r20, 0x28	; 40
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	40 83       	st	Z, r20
     da2:	51 83       	std	Z+1, r21	; 0x01
     da4:	62 83       	std	Z+2, r22	; 0x02
     da6:	73 83       	std	Z+3, r23	; 0x03
			current[i] = 930;
     da8:	fc 01       	movw	r30, r24
     daa:	e1 50       	subi	r30, 0x01	; 1
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	62 ea       	ldi	r22, 0xA2	; 162
     db0:	73 e0       	ldi	r23, 0x03	; 3
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	60 83       	st	Z, r22
     db8:	71 83       	std	Z+1, r23	; 0x01
     dba:	82 83       	std	Z+2, r24	; 0x02
     dbc:	93 83       	std	Z+3, r25	; 0x03
			//printf("%d\n",voltageLHS[voltageLHSIndex]);
			//voltageLHSIndex++;
		//}
		
		//mock arrays
		for(int i = 0; i < NUMBER_OF_SAMPLES;i++){
     dbe:	2f 5f       	subi	r18, 0xFF	; 255
     dc0:	3f 4f       	sbci	r19, 0xFF	; 255
     dc2:	24 31       	cpi	r18, 0x14	; 20
     dc4:	31 05       	cpc	r19, r1
     dc6:	a9 f6       	brne	.-86     	; 0xd72 <main+0x82>
     dc8:	e0 e0       	ldi	r30, 0x00	; 0
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	41 2c       	mov	r4, r1
     dce:	51 2c       	mov	r5, r1
     dd0:	32 01       	movw	r6, r4
     dd2:	c1 2c       	mov	r12, r1
     dd4:	d1 2c       	mov	r13, r1
     dd6:	76 01       	movw	r14, r12
		}
		
		
		//get voltage across the coil
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){
			if(voltageLHS[i]>voltageRHS[i]){
     dd8:	cf 01       	movw	r24, r30
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	dc 01       	movw	r26, r24
     de4:	a1 55       	subi	r26, 0x51	; 81
     de6:	be 4f       	sbci	r27, 0xFE	; 254
     de8:	4d 91       	ld	r20, X+
     dea:	5d 91       	ld	r21, X+
     dec:	6d 91       	ld	r22, X+
     dee:	7c 91       	ld	r23, X
     df0:	dc 01       	movw	r26, r24
     df2:	a1 5a       	subi	r26, 0xA1	; 161
     df4:	be 4f       	sbci	r27, 0xFE	; 254
     df6:	8d 91       	ld	r24, X+
     df8:	9d 91       	ld	r25, X+
     dfa:	0d 90       	ld	r0, X+
     dfc:	bc 91       	ld	r27, X
     dfe:	a0 2d       	mov	r26, r0
     e00:	84 17       	cp	r24, r20
     e02:	95 07       	cpc	r25, r21
     e04:	a6 07       	cpc	r26, r22
     e06:	b7 07       	cpc	r27, r23
     e08:	00 f5       	brcc	.+64     	; 0xe4a <main+0x15a>
				voltageAcrossTheCoil[i] = voltageLHS[i]-voltageRHS[i];
     e0a:	cf 01       	movw	r24, r30
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	dc 01       	movw	r26, r24
     e16:	a1 55       	subi	r26, 0x51	; 81
     e18:	be 4f       	sbci	r27, 0xFE	; 254
     e1a:	4d 91       	ld	r20, X+
     e1c:	5d 91       	ld	r21, X+
     e1e:	6d 91       	ld	r22, X+
     e20:	7c 91       	ld	r23, X
     e22:	dc 01       	movw	r26, r24
     e24:	a1 5a       	subi	r26, 0xA1	; 161
     e26:	be 4f       	sbci	r27, 0xFE	; 254
     e28:	0d 91       	ld	r16, X+
     e2a:	1d 91       	ld	r17, X+
     e2c:	2d 91       	ld	r18, X+
     e2e:	3c 91       	ld	r19, X
     e30:	40 1b       	sub	r20, r16
     e32:	51 0b       	sbc	r21, r17
     e34:	62 0b       	sbc	r22, r18
     e36:	73 0b       	sbc	r23, r19
     e38:	dc 01       	movw	r26, r24
     e3a:	af 5a       	subi	r26, 0xAF	; 175
     e3c:	bd 4f       	sbci	r27, 0xFD	; 253
     e3e:	4d 93       	st	X+, r20
     e40:	5d 93       	st	X+, r21
     e42:	6d 93       	st	X+, r22
     e44:	7c 93       	st	X, r23
     e46:	13 97       	sbiw	r26, 0x03	; 3
     e48:	1f c0       	rjmp	.+62     	; 0xe88 <main+0x198>
			}else{
				voltageAcrossTheCoil[i] = voltageRHS[i]-voltageLHS[i];
     e4a:	cf 01       	movw	r24, r30
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	dc 01       	movw	r26, r24
     e56:	a1 5a       	subi	r26, 0xA1	; 161
     e58:	be 4f       	sbci	r27, 0xFE	; 254
     e5a:	4d 91       	ld	r20, X+
     e5c:	5d 91       	ld	r21, X+
     e5e:	6d 91       	ld	r22, X+
     e60:	7c 91       	ld	r23, X
     e62:	dc 01       	movw	r26, r24
     e64:	a1 55       	subi	r26, 0x51	; 81
     e66:	be 4f       	sbci	r27, 0xFE	; 254
     e68:	0d 91       	ld	r16, X+
     e6a:	1d 91       	ld	r17, X+
     e6c:	2d 91       	ld	r18, X+
     e6e:	3c 91       	ld	r19, X
     e70:	40 1b       	sub	r20, r16
     e72:	51 0b       	sbc	r21, r17
     e74:	62 0b       	sbc	r22, r18
     e76:	73 0b       	sbc	r23, r19
     e78:	dc 01       	movw	r26, r24
     e7a:	af 5a       	subi	r26, 0xAF	; 175
     e7c:	bd 4f       	sbci	r27, 0xFD	; 253
     e7e:	4d 93       	st	X+, r20
     e80:	5d 93       	st	X+, r21
     e82:	6d 93       	st	X+, r22
     e84:	7c 93       	st	X, r23
     e86:	13 97       	sbiw	r26, 0x03	; 3
			}
			voltageSum += voltageAcrossTheCoil[i]*voltageAcrossTheCoil[i];
     e88:	8f 01       	movw	r16, r30
     e8a:	00 0f       	add	r16, r16
     e8c:	11 1f       	adc	r17, r17
     e8e:	00 0f       	add	r16, r16
     e90:	11 1f       	adc	r17, r17
     e92:	d8 01       	movw	r26, r16
     e94:	af 5a       	subi	r26, 0xAF	; 175
     e96:	bd 4f       	sbci	r27, 0xFD	; 253
     e98:	2d 91       	ld	r18, X+
     e9a:	3d 91       	ld	r19, X+
     e9c:	4d 91       	ld	r20, X+
     e9e:	5c 91       	ld	r21, X
     ea0:	13 97       	sbiw	r26, 0x03	; 3
     ea2:	6d 91       	ld	r22, X+
     ea4:	7d 91       	ld	r23, X+
     ea6:	8d 91       	ld	r24, X+
     ea8:	9c 91       	ld	r25, X
     eaa:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsi3>
     eae:	46 0e       	add	r4, r22
     eb0:	57 1e       	adc	r5, r23
     eb2:	68 1e       	adc	r6, r24
     eb4:	79 1e       	adc	r7, r25
			currentSum += current[i]*current[i];
     eb6:	d8 01       	movw	r26, r16
     eb8:	a1 50       	subi	r26, 0x01	; 1
     eba:	be 4f       	sbci	r27, 0xFE	; 254
     ebc:	2d 91       	ld	r18, X+
     ebe:	3d 91       	ld	r19, X+
     ec0:	4d 91       	ld	r20, X+
     ec2:	5c 91       	ld	r21, X
     ec4:	13 97       	sbiw	r26, 0x03	; 3
     ec6:	6d 91       	ld	r22, X+
     ec8:	7d 91       	ld	r23, X+
     eca:	8d 91       	ld	r24, X+
     ecc:	9c 91       	ld	r25, X
     ece:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsi3>
     ed2:	c6 0e       	add	r12, r22
     ed4:	d7 1e       	adc	r13, r23
     ed6:	e8 1e       	adc	r14, r24
     ed8:	f9 1e       	adc	r15, r25
			
		}
		
		
		//get voltage across the coil
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){
     eda:	31 96       	adiw	r30, 0x01	; 1
     edc:	e4 31       	cpi	r30, 0x14	; 20
     ede:	f1 05       	cpc	r31, r1
     ee0:	09 f0       	breq	.+2      	; 0xee4 <main+0x1f4>
     ee2:	7a cf       	rjmp	.-268    	; 0xdd8 <main+0xe8>
		//calculate rms voltage and current
		rmsVoltage = voltageSum / NUMBER_OF_SAMPLES;
		rmsCurrent = currentSum/NUMBER_OF_SAMPLES;
		
	
		rmsVoltage = sqrt(rmsVoltage);
     ee4:	c3 01       	movw	r24, r6
     ee6:	b2 01       	movw	r22, r4
     ee8:	24 e1       	ldi	r18, 0x14	; 20
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodsi4>
     ef4:	29 01       	movw	r4, r18
     ef6:	3a 01       	movw	r6, r20
     ef8:	c3 01       	movw	r24, r6
     efa:	b2 01       	movw	r22, r4
     efc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__floatunsisf>
     f00:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <sqrt>
     f04:	67 96       	adiw	r28, 0x17	; 23
     f06:	6c af       	std	Y+60, r22	; 0x3c
     f08:	7d af       	std	Y+61, r23	; 0x3d
     f0a:	8e af       	std	Y+62, r24	; 0x3e
     f0c:	9f af       	std	Y+63, r25	; 0x3f
     f0e:	67 97       	sbiw	r28, 0x17	; 23
		rmsCurrent = sqrt(rmsCurrent);
     f10:	c7 01       	movw	r24, r14
     f12:	b6 01       	movw	r22, r12
     f14:	24 e1       	ldi	r18, 0x14	; 20
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodsi4>
     f20:	69 01       	movw	r12, r18
     f22:	7a 01       	movw	r14, r20
     f24:	c7 01       	movw	r24, r14
     f26:	b6 01       	movw	r22, r12
     f28:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__floatunsisf>
     f2c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <sqrt>
     f30:	2b 01       	movw	r4, r22
     f32:	3c 01       	movw	r6, r24
     f34:	8e 01       	movw	r16, r28
     f36:	0f 5f       	subi	r16, 0xFF	; 255
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	78 01       	movw	r14, r16
		//printf("%d\n",rmsVoltage);
		//printf("%d\n",rmsCurrent);
		
		//calculate average power	
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
     f3c:	e0 e0       	ldi	r30, 0x00	; 0
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
			powerArray[j] = (voltageAcrossTheCoil[j] * current[j]);
     f40:	cf 01       	movw	r24, r30
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	dc 01       	movw	r26, r24
     f4c:	af 5a       	subi	r26, 0xAF	; 175
     f4e:	bd 4f       	sbci	r27, 0xFD	; 253
     f50:	2d 91       	ld	r18, X+
     f52:	3d 91       	ld	r19, X+
     f54:	4d 91       	ld	r20, X+
     f56:	5c 91       	ld	r21, X
     f58:	dc 01       	movw	r26, r24
     f5a:	a1 50       	subi	r26, 0x01	; 1
     f5c:	be 4f       	sbci	r27, 0xFE	; 254
     f5e:	6d 91       	ld	r22, X+
     f60:	7d 91       	ld	r23, X+
     f62:	8d 91       	ld	r24, X+
     f64:	9c 91       	ld	r25, X
     f66:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsi3>
     f6a:	d7 01       	movw	r26, r14
     f6c:	6d 93       	st	X+, r22
     f6e:	7d 93       	st	X+, r23
     f70:	8d 93       	st	X+, r24
     f72:	9d 93       	st	X+, r25
     f74:	7d 01       	movw	r14, r26
		rmsCurrent = sqrt(rmsCurrent);
		//printf("%d\n",rmsVoltage);
		//printf("%d\n",rmsCurrent);
		
		//calculate average power	
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
     f76:	31 96       	adiw	r30, 0x01	; 1
     f78:	e4 31       	cpi	r30, 0x14	; 20
     f7a:	f1 05       	cpc	r31, r1
     f7c:	09 f7       	brne	.-62     	; 0xf40 <main+0x250>
     f7e:	c1 2c       	mov	r12, r1
     f80:	d1 2c       	mov	r13, r1
     f82:	76 01       	movw	r14, r12
			powerArray[j] = (voltageAcrossTheCoil[j] * current[j]);
		}
		uint32_t powerTotal = 0;
		uint32_t rmsPower = 0;
		for (int i = 0; i < NUMBER_OF_SAMPLES-1; i++) {
			powerTotal += (powerArray[i] + powerArray[i+1])/2;	//trapezoidal approx
     f84:	f8 01       	movw	r30, r16
     f86:	41 91       	ld	r20, Z+
     f88:	51 91       	ld	r21, Z+
     f8a:	61 91       	ld	r22, Z+
     f8c:	71 91       	ld	r23, Z+
     f8e:	8f 01       	movw	r16, r30
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01
     f94:	a2 81       	ldd	r26, Z+2	; 0x02
     f96:	b3 81       	ldd	r27, Z+3	; 0x03
     f98:	84 0f       	add	r24, r20
     f9a:	95 1f       	adc	r25, r21
     f9c:	a6 1f       	adc	r26, r22
     f9e:	b7 1f       	adc	r27, r23
     fa0:	b6 95       	lsr	r27
     fa2:	a7 95       	ror	r26
     fa4:	97 95       	ror	r25
     fa6:	87 95       	ror	r24
     fa8:	c8 0e       	add	r12, r24
     faa:	d9 1e       	adc	r13, r25
     fac:	ea 1e       	adc	r14, r26
     fae:	fb 1e       	adc	r15, r27
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
			powerArray[j] = (voltageAcrossTheCoil[j] * current[j]);
		}
		uint32_t powerTotal = 0;
		uint32_t rmsPower = 0;
		for (int i = 0; i < NUMBER_OF_SAMPLES-1; i++) {
     fb0:	2e 16       	cp	r2, r30
     fb2:	3f 06       	cpc	r3, r31
     fb4:	39 f7       	brne	.-50     	; 0xf84 <main+0x294>
		//printf("%d\t",rmsPower/1000);
		//printf("%d\n",rmsPower%1000);
		
		
		//receive message code
		if(finished){
     fb6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <finished>
     fba:	88 23       	and	r24, r24
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <main+0x2d0>
     fbe:	c7 ce       	rjmp	.-626    	; 0xd4e <main+0x5e>
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
     fc0:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <pumpingEffortArray+0x2>
     fc4:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <pumpingEffortArray+0x1>
     fc8:	ae e2       	ldi	r26, 0x2E	; 46
     fca:	b1 e0       	ldi	r27, 0x01	; 1
     fcc:	8c 91       	ld	r24, X
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 0c 05 	call	0xa18	; 0xa18 <concatenate>
     fd8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <pumpingEffort>
				
			for(int i = 0; i < 38; i++){
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
				pumpingEffortArray[i] = 0;
     fe0:	fc 01       	movw	r30, r24
     fe2:	e2 5d       	subi	r30, 0xD2	; 210
     fe4:	fe 4f       	sbci	r31, 0xFE	; 254
     fe6:	10 82       	st	Z, r1
		
		//receive message code
		if(finished){
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	86 32       	cpi	r24, 0x26	; 38
     fec:	91 05       	cpc	r25, r1
     fee:	c1 f7       	brne	.-16     	; 0xfe0 <main+0x2f0>
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
     ff0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
     ff4:	e6 e1       	ldi	r30, 0x16	; 22
     ff6:	f1 e0       	ldi	r31, 0x01	; 1
     ff8:	80 81       	ld	r24, Z
int concatenate(int a, int b, int c){
	return ((a-48)*100 + (b-48)*10 + (c-48));
}

bool checkForError(unsigned char a, unsigned char b){
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
     ffa:	85 36       	cpi	r24, 0x65	; 101
     ffc:	29 f4       	brne	.+10     	; 0x1008 <main+0x318>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	97 37       	cpi	r25, 0x77	; 119
    1002:	19 f0       	breq	.+6      	; 0x100a <main+0x31a>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	01 c0       	rjmp	.+2      	; 0x100a <main+0x31a>
		return true;
	}else{
		return false;
    1008:	80 e0       	ldi	r24, 0x00	; 0
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
    100a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <clearErrorFlag>
			if(clearErrorFlag){
    100e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <clearErrorFlag>
    1012:	88 23       	and	r24, r24
    1014:	21 f0       	breq	.+8      	; 0x101e <main+0x32e>
				cmprCollide = false;
    1016:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cmprCollide>
				cmprJammed = false;;
    101a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cmprJammed>
			}
			UART_SendJson(rmsPower,frequency,rmsVoltage,rmsCurrent,cmprJammed,cmprCollide, pumpingEffort,pumpingEffort);
    101e:	80 90 5c 01 	lds	r8, 0x015C	; 0x80015c <pumpingEffort>
    1022:	a0 90 5c 01 	lds	r10, 0x015C	; 0x80015c <pumpingEffort>
    1026:	10 91 0e 01 	lds	r17, 0x010E	; 0x80010e <cmprCollide>
    102a:	90 90 0f 01 	lds	r9, 0x010F	; 0x80010f <cmprJammed>
    102e:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <frequency>
    1032:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <frequency+0x1>
    1036:	69 96       	adiw	r28, 0x19	; 25
    1038:	5f af       	std	Y+63, r21	; 0x3f
    103a:	4e af       	std	Y+62, r20	; 0x3e
    103c:	69 97       	sbiw	r28, 0x19	; 25
    103e:	c3 01       	movw	r24, r6
    1040:	b2 01       	movw	r22, r4
    1042:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fixunssfsi>
    1046:	06 2f       	mov	r16, r22
    1048:	67 96       	adiw	r28, 0x17	; 23
    104a:	6c ad       	ldd	r22, Y+60	; 0x3c
    104c:	7d ad       	ldd	r23, Y+61	; 0x3d
    104e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1050:	9f ad       	ldd	r25, Y+63	; 0x3f
    1052:	67 97       	sbiw	r28, 0x17	; 23
    1054:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fixunssfsi>
    1058:	2b 01       	movw	r4, r22
    105a:	3c 01       	movw	r6, r24
    105c:	c7 01       	movw	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	23 e1       	ldi	r18, 0x13	; 19
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodsi4>
    106c:	82 2f       	mov	r24, r18
    106e:	c1 2e       	mov	r12, r17
    1070:	e9 2c       	mov	r14, r9
    1072:	a3 01       	movw	r20, r6
    1074:	92 01       	movw	r18, r4
    1076:	68 96       	adiw	r28, 0x18	; 24
    1078:	6f ad       	ldd	r22, Y+63	; 0x3f
    107a:	68 97       	sbiw	r28, 0x18	; 24
    107c:	0e 94 cd 04 	call	0x99a	; 0x99a <UART_SendJson>
			finished = false;
    1080:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <finished>
			rx_count = 0;
    1084:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_count+0x1>
    1088:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_count>
		}
			
    }
    108c:	60 ce       	rjmp	.-832    	; 0xd4e <main+0x5e>

0000108e <__subsf3>:
    108e:	50 58       	subi	r21, 0x80	; 128

00001090 <__addsf3>:
    1090:	bb 27       	eor	r27, r27
    1092:	aa 27       	eor	r26, r26
    1094:	0e 94 5f 08 	call	0x10be	; 0x10be <__addsf3x>
    1098:	0c 94 37 09 	jmp	0x126e	; 0x126e <__fp_round>
    109c:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_pscA>
    10a0:	38 f0       	brcs	.+14     	; 0x10b0 <__addsf3+0x20>
    10a2:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_pscB>
    10a6:	20 f0       	brcs	.+8      	; 0x10b0 <__addsf3+0x20>
    10a8:	39 f4       	brne	.+14     	; 0x10b8 <__addsf3+0x28>
    10aa:	9f 3f       	cpi	r25, 0xFF	; 255
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <__addsf3+0x24>
    10ae:	26 f4       	brtc	.+8      	; 0x10b8 <__addsf3+0x28>
    10b0:	0c 94 26 09 	jmp	0x124c	; 0x124c <__fp_nan>
    10b4:	0e f4       	brtc	.+2      	; 0x10b8 <__addsf3+0x28>
    10b6:	e0 95       	com	r30
    10b8:	e7 fb       	bst	r30, 7
    10ba:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_inf>

000010be <__addsf3x>:
    10be:	e9 2f       	mov	r30, r25
    10c0:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_split3>
    10c4:	58 f3       	brcs	.-42     	; 0x109c <__addsf3+0xc>
    10c6:	ba 17       	cp	r27, r26
    10c8:	62 07       	cpc	r22, r18
    10ca:	73 07       	cpc	r23, r19
    10cc:	84 07       	cpc	r24, r20
    10ce:	95 07       	cpc	r25, r21
    10d0:	20 f0       	brcs	.+8      	; 0x10da <__addsf3x+0x1c>
    10d2:	79 f4       	brne	.+30     	; 0x10f2 <__addsf3x+0x34>
    10d4:	a6 f5       	brtc	.+104    	; 0x113e <__addsf3x+0x80>
    10d6:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__fp_zero>
    10da:	0e f4       	brtc	.+2      	; 0x10de <__addsf3x+0x20>
    10dc:	e0 95       	com	r30
    10de:	0b 2e       	mov	r0, r27
    10e0:	ba 2f       	mov	r27, r26
    10e2:	a0 2d       	mov	r26, r0
    10e4:	0b 01       	movw	r0, r22
    10e6:	b9 01       	movw	r22, r18
    10e8:	90 01       	movw	r18, r0
    10ea:	0c 01       	movw	r0, r24
    10ec:	ca 01       	movw	r24, r20
    10ee:	a0 01       	movw	r20, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	ff 27       	eor	r31, r31
    10f4:	59 1b       	sub	r21, r25
    10f6:	99 f0       	breq	.+38     	; 0x111e <__addsf3x+0x60>
    10f8:	59 3f       	cpi	r21, 0xF9	; 249
    10fa:	50 f4       	brcc	.+20     	; 0x1110 <__addsf3x+0x52>
    10fc:	50 3e       	cpi	r21, 0xE0	; 224
    10fe:	68 f1       	brcs	.+90     	; 0x115a <__addsf3x+0x9c>
    1100:	1a 16       	cp	r1, r26
    1102:	f0 40       	sbci	r31, 0x00	; 0
    1104:	a2 2f       	mov	r26, r18
    1106:	23 2f       	mov	r18, r19
    1108:	34 2f       	mov	r19, r20
    110a:	44 27       	eor	r20, r20
    110c:	58 5f       	subi	r21, 0xF8	; 248
    110e:	f3 cf       	rjmp	.-26     	; 0x10f6 <__addsf3x+0x38>
    1110:	46 95       	lsr	r20
    1112:	37 95       	ror	r19
    1114:	27 95       	ror	r18
    1116:	a7 95       	ror	r26
    1118:	f0 40       	sbci	r31, 0x00	; 0
    111a:	53 95       	inc	r21
    111c:	c9 f7       	brne	.-14     	; 0x1110 <__addsf3x+0x52>
    111e:	7e f4       	brtc	.+30     	; 0x113e <__addsf3x+0x80>
    1120:	1f 16       	cp	r1, r31
    1122:	ba 0b       	sbc	r27, r26
    1124:	62 0b       	sbc	r22, r18
    1126:	73 0b       	sbc	r23, r19
    1128:	84 0b       	sbc	r24, r20
    112a:	ba f0       	brmi	.+46     	; 0x115a <__addsf3x+0x9c>
    112c:	91 50       	subi	r25, 0x01	; 1
    112e:	a1 f0       	breq	.+40     	; 0x1158 <__addsf3x+0x9a>
    1130:	ff 0f       	add	r31, r31
    1132:	bb 1f       	adc	r27, r27
    1134:	66 1f       	adc	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	88 1f       	adc	r24, r24
    113a:	c2 f7       	brpl	.-16     	; 0x112c <__addsf3x+0x6e>
    113c:	0e c0       	rjmp	.+28     	; 0x115a <__addsf3x+0x9c>
    113e:	ba 0f       	add	r27, r26
    1140:	62 1f       	adc	r22, r18
    1142:	73 1f       	adc	r23, r19
    1144:	84 1f       	adc	r24, r20
    1146:	48 f4       	brcc	.+18     	; 0x115a <__addsf3x+0x9c>
    1148:	87 95       	ror	r24
    114a:	77 95       	ror	r23
    114c:	67 95       	ror	r22
    114e:	b7 95       	ror	r27
    1150:	f7 95       	ror	r31
    1152:	9e 3f       	cpi	r25, 0xFE	; 254
    1154:	08 f0       	brcs	.+2      	; 0x1158 <__addsf3x+0x9a>
    1156:	b0 cf       	rjmp	.-160    	; 0x10b8 <__addsf3+0x28>
    1158:	93 95       	inc	r25
    115a:	88 0f       	add	r24, r24
    115c:	08 f0       	brcs	.+2      	; 0x1160 <__addsf3x+0xa2>
    115e:	99 27       	eor	r25, r25
    1160:	ee 0f       	add	r30, r30
    1162:	97 95       	ror	r25
    1164:	87 95       	ror	r24
    1166:	08 95       	ret

00001168 <__fixunssfsi>:
    1168:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__fp_splitA>
    116c:	88 f0       	brcs	.+34     	; 0x1190 <__fixunssfsi+0x28>
    116e:	9f 57       	subi	r25, 0x7F	; 127
    1170:	98 f0       	brcs	.+38     	; 0x1198 <__fixunssfsi+0x30>
    1172:	b9 2f       	mov	r27, r25
    1174:	99 27       	eor	r25, r25
    1176:	b7 51       	subi	r27, 0x17	; 23
    1178:	b0 f0       	brcs	.+44     	; 0x11a6 <__fixunssfsi+0x3e>
    117a:	e1 f0       	breq	.+56     	; 0x11b4 <__fixunssfsi+0x4c>
    117c:	66 0f       	add	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	88 1f       	adc	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	1a f0       	brmi	.+6      	; 0x118c <__fixunssfsi+0x24>
    1186:	ba 95       	dec	r27
    1188:	c9 f7       	brne	.-14     	; 0x117c <__fixunssfsi+0x14>
    118a:	14 c0       	rjmp	.+40     	; 0x11b4 <__fixunssfsi+0x4c>
    118c:	b1 30       	cpi	r27, 0x01	; 1
    118e:	91 f0       	breq	.+36     	; 0x11b4 <__fixunssfsi+0x4c>
    1190:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fp_zero>
    1194:	b1 e0       	ldi	r27, 0x01	; 1
    1196:	08 95       	ret
    1198:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__fp_zero>
    119c:	67 2f       	mov	r22, r23
    119e:	78 2f       	mov	r23, r24
    11a0:	88 27       	eor	r24, r24
    11a2:	b8 5f       	subi	r27, 0xF8	; 248
    11a4:	39 f0       	breq	.+14     	; 0x11b4 <__fixunssfsi+0x4c>
    11a6:	b9 3f       	cpi	r27, 0xF9	; 249
    11a8:	cc f3       	brlt	.-14     	; 0x119c <__fixunssfsi+0x34>
    11aa:	86 95       	lsr	r24
    11ac:	77 95       	ror	r23
    11ae:	67 95       	ror	r22
    11b0:	b3 95       	inc	r27
    11b2:	d9 f7       	brne	.-10     	; 0x11aa <__fixunssfsi+0x42>
    11b4:	3e f4       	brtc	.+14     	; 0x11c4 <__fixunssfsi+0x5c>
    11b6:	90 95       	com	r25
    11b8:	80 95       	com	r24
    11ba:	70 95       	com	r23
    11bc:	61 95       	neg	r22
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	8f 4f       	sbci	r24, 0xFF	; 255
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	08 95       	ret

000011c6 <__floatunsisf>:
    11c6:	e8 94       	clt
    11c8:	09 c0       	rjmp	.+18     	; 0x11dc <__floatsisf+0x12>

000011ca <__floatsisf>:
    11ca:	97 fb       	bst	r25, 7
    11cc:	3e f4       	brtc	.+14     	; 0x11dc <__floatsisf+0x12>
    11ce:	90 95       	com	r25
    11d0:	80 95       	com	r24
    11d2:	70 95       	com	r23
    11d4:	61 95       	neg	r22
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	8f 4f       	sbci	r24, 0xFF	; 255
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	99 23       	and	r25, r25
    11de:	a9 f0       	breq	.+42     	; 0x120a <__floatsisf+0x40>
    11e0:	f9 2f       	mov	r31, r25
    11e2:	96 e9       	ldi	r25, 0x96	; 150
    11e4:	bb 27       	eor	r27, r27
    11e6:	93 95       	inc	r25
    11e8:	f6 95       	lsr	r31
    11ea:	87 95       	ror	r24
    11ec:	77 95       	ror	r23
    11ee:	67 95       	ror	r22
    11f0:	b7 95       	ror	r27
    11f2:	f1 11       	cpse	r31, r1
    11f4:	f8 cf       	rjmp	.-16     	; 0x11e6 <__floatsisf+0x1c>
    11f6:	fa f4       	brpl	.+62     	; 0x1236 <__floatsisf+0x6c>
    11f8:	bb 0f       	add	r27, r27
    11fa:	11 f4       	brne	.+4      	; 0x1200 <__floatsisf+0x36>
    11fc:	60 ff       	sbrs	r22, 0
    11fe:	1b c0       	rjmp	.+54     	; 0x1236 <__floatsisf+0x6c>
    1200:	6f 5f       	subi	r22, 0xFF	; 255
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	16 c0       	rjmp	.+44     	; 0x1236 <__floatsisf+0x6c>
    120a:	88 23       	and	r24, r24
    120c:	11 f0       	breq	.+4      	; 0x1212 <__floatsisf+0x48>
    120e:	96 e9       	ldi	r25, 0x96	; 150
    1210:	11 c0       	rjmp	.+34     	; 0x1234 <__floatsisf+0x6a>
    1212:	77 23       	and	r23, r23
    1214:	21 f0       	breq	.+8      	; 0x121e <__floatsisf+0x54>
    1216:	9e e8       	ldi	r25, 0x8E	; 142
    1218:	87 2f       	mov	r24, r23
    121a:	76 2f       	mov	r23, r22
    121c:	05 c0       	rjmp	.+10     	; 0x1228 <__floatsisf+0x5e>
    121e:	66 23       	and	r22, r22
    1220:	71 f0       	breq	.+28     	; 0x123e <__floatsisf+0x74>
    1222:	96 e8       	ldi	r25, 0x86	; 134
    1224:	86 2f       	mov	r24, r22
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	2a f0       	brmi	.+10     	; 0x1236 <__floatsisf+0x6c>
    122c:	9a 95       	dec	r25
    122e:	66 0f       	add	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	88 1f       	adc	r24, r24
    1234:	da f7       	brpl	.-10     	; 0x122c <__floatsisf+0x62>
    1236:	88 0f       	add	r24, r24
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	97 f9       	bld	r25, 7
    123e:	08 95       	ret

00001240 <__fp_inf>:
    1240:	97 f9       	bld	r25, 7
    1242:	9f 67       	ori	r25, 0x7F	; 127
    1244:	80 e8       	ldi	r24, 0x80	; 128
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	08 95       	ret

0000124c <__fp_nan>:
    124c:	9f ef       	ldi	r25, 0xFF	; 255
    124e:	80 ec       	ldi	r24, 0xC0	; 192
    1250:	08 95       	ret

00001252 <__fp_pscA>:
    1252:	00 24       	eor	r0, r0
    1254:	0a 94       	dec	r0
    1256:	16 16       	cp	r1, r22
    1258:	17 06       	cpc	r1, r23
    125a:	18 06       	cpc	r1, r24
    125c:	09 06       	cpc	r0, r25
    125e:	08 95       	ret

00001260 <__fp_pscB>:
    1260:	00 24       	eor	r0, r0
    1262:	0a 94       	dec	r0
    1264:	12 16       	cp	r1, r18
    1266:	13 06       	cpc	r1, r19
    1268:	14 06       	cpc	r1, r20
    126a:	05 06       	cpc	r0, r21
    126c:	08 95       	ret

0000126e <__fp_round>:
    126e:	09 2e       	mov	r0, r25
    1270:	03 94       	inc	r0
    1272:	00 0c       	add	r0, r0
    1274:	11 f4       	brne	.+4      	; 0x127a <__fp_round+0xc>
    1276:	88 23       	and	r24, r24
    1278:	52 f0       	brmi	.+20     	; 0x128e <__fp_round+0x20>
    127a:	bb 0f       	add	r27, r27
    127c:	40 f4       	brcc	.+16     	; 0x128e <__fp_round+0x20>
    127e:	bf 2b       	or	r27, r31
    1280:	11 f4       	brne	.+4      	; 0x1286 <__fp_round+0x18>
    1282:	60 ff       	sbrs	r22, 0
    1284:	04 c0       	rjmp	.+8      	; 0x128e <__fp_round+0x20>
    1286:	6f 5f       	subi	r22, 0xFF	; 255
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	8f 4f       	sbci	r24, 0xFF	; 255
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	08 95       	ret

00001290 <__fp_split3>:
    1290:	57 fd       	sbrc	r21, 7
    1292:	90 58       	subi	r25, 0x80	; 128
    1294:	44 0f       	add	r20, r20
    1296:	55 1f       	adc	r21, r21
    1298:	59 f0       	breq	.+22     	; 0x12b0 <__fp_splitA+0x10>
    129a:	5f 3f       	cpi	r21, 0xFF	; 255
    129c:	71 f0       	breq	.+28     	; 0x12ba <__fp_splitA+0x1a>
    129e:	47 95       	ror	r20

000012a0 <__fp_splitA>:
    12a0:	88 0f       	add	r24, r24
    12a2:	97 fb       	bst	r25, 7
    12a4:	99 1f       	adc	r25, r25
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <__fp_splitA+0x20>
    12a8:	9f 3f       	cpi	r25, 0xFF	; 255
    12aa:	79 f0       	breq	.+30     	; 0x12ca <__fp_splitA+0x2a>
    12ac:	87 95       	ror	r24
    12ae:	08 95       	ret
    12b0:	12 16       	cp	r1, r18
    12b2:	13 06       	cpc	r1, r19
    12b4:	14 06       	cpc	r1, r20
    12b6:	55 1f       	adc	r21, r21
    12b8:	f2 cf       	rjmp	.-28     	; 0x129e <__fp_split3+0xe>
    12ba:	46 95       	lsr	r20
    12bc:	f1 df       	rcall	.-30     	; 0x12a0 <__fp_splitA>
    12be:	08 c0       	rjmp	.+16     	; 0x12d0 <__fp_splitA+0x30>
    12c0:	16 16       	cp	r1, r22
    12c2:	17 06       	cpc	r1, r23
    12c4:	18 06       	cpc	r1, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	f1 cf       	rjmp	.-30     	; 0x12ac <__fp_splitA+0xc>
    12ca:	86 95       	lsr	r24
    12cc:	71 05       	cpc	r23, r1
    12ce:	61 05       	cpc	r22, r1
    12d0:	08 94       	sec
    12d2:	08 95       	ret

000012d4 <__fp_zero>:
    12d4:	e8 94       	clt

000012d6 <__fp_szero>:
    12d6:	bb 27       	eor	r27, r27
    12d8:	66 27       	eor	r22, r22
    12da:	77 27       	eor	r23, r23
    12dc:	cb 01       	movw	r24, r22
    12de:	97 f9       	bld	r25, 7
    12e0:	08 95       	ret

000012e2 <__mulsf3>:
    12e2:	0e 94 84 09 	call	0x1308	; 0x1308 <__mulsf3x>
    12e6:	0c 94 37 09 	jmp	0x126e	; 0x126e <__fp_round>
    12ea:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_pscA>
    12ee:	38 f0       	brcs	.+14     	; 0x12fe <__mulsf3+0x1c>
    12f0:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_pscB>
    12f4:	20 f0       	brcs	.+8      	; 0x12fe <__mulsf3+0x1c>
    12f6:	95 23       	and	r25, r21
    12f8:	11 f0       	breq	.+4      	; 0x12fe <__mulsf3+0x1c>
    12fa:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_inf>
    12fe:	0c 94 26 09 	jmp	0x124c	; 0x124c <__fp_nan>
    1302:	11 24       	eor	r1, r1
    1304:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_szero>

00001308 <__mulsf3x>:
    1308:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_split3>
    130c:	70 f3       	brcs	.-36     	; 0x12ea <__mulsf3+0x8>

0000130e <__mulsf3_pse>:
    130e:	95 9f       	mul	r25, r21
    1310:	c1 f3       	breq	.-16     	; 0x1302 <__mulsf3+0x20>
    1312:	95 0f       	add	r25, r21
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	55 1f       	adc	r21, r21
    1318:	62 9f       	mul	r22, r18
    131a:	f0 01       	movw	r30, r0
    131c:	72 9f       	mul	r23, r18
    131e:	bb 27       	eor	r27, r27
    1320:	f0 0d       	add	r31, r0
    1322:	b1 1d       	adc	r27, r1
    1324:	63 9f       	mul	r22, r19
    1326:	aa 27       	eor	r26, r26
    1328:	f0 0d       	add	r31, r0
    132a:	b1 1d       	adc	r27, r1
    132c:	aa 1f       	adc	r26, r26
    132e:	64 9f       	mul	r22, r20
    1330:	66 27       	eor	r22, r22
    1332:	b0 0d       	add	r27, r0
    1334:	a1 1d       	adc	r26, r1
    1336:	66 1f       	adc	r22, r22
    1338:	82 9f       	mul	r24, r18
    133a:	22 27       	eor	r18, r18
    133c:	b0 0d       	add	r27, r0
    133e:	a1 1d       	adc	r26, r1
    1340:	62 1f       	adc	r22, r18
    1342:	73 9f       	mul	r23, r19
    1344:	b0 0d       	add	r27, r0
    1346:	a1 1d       	adc	r26, r1
    1348:	62 1f       	adc	r22, r18
    134a:	83 9f       	mul	r24, r19
    134c:	a0 0d       	add	r26, r0
    134e:	61 1d       	adc	r22, r1
    1350:	22 1f       	adc	r18, r18
    1352:	74 9f       	mul	r23, r20
    1354:	33 27       	eor	r19, r19
    1356:	a0 0d       	add	r26, r0
    1358:	61 1d       	adc	r22, r1
    135a:	23 1f       	adc	r18, r19
    135c:	84 9f       	mul	r24, r20
    135e:	60 0d       	add	r22, r0
    1360:	21 1d       	adc	r18, r1
    1362:	82 2f       	mov	r24, r18
    1364:	76 2f       	mov	r23, r22
    1366:	6a 2f       	mov	r22, r26
    1368:	11 24       	eor	r1, r1
    136a:	9f 57       	subi	r25, 0x7F	; 127
    136c:	50 40       	sbci	r21, 0x00	; 0
    136e:	9a f0       	brmi	.+38     	; 0x1396 <__mulsf3_pse+0x88>
    1370:	f1 f0       	breq	.+60     	; 0x13ae <__mulsf3_pse+0xa0>
    1372:	88 23       	and	r24, r24
    1374:	4a f0       	brmi	.+18     	; 0x1388 <__mulsf3_pse+0x7a>
    1376:	ee 0f       	add	r30, r30
    1378:	ff 1f       	adc	r31, r31
    137a:	bb 1f       	adc	r27, r27
    137c:	66 1f       	adc	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	91 50       	subi	r25, 0x01	; 1
    1384:	50 40       	sbci	r21, 0x00	; 0
    1386:	a9 f7       	brne	.-22     	; 0x1372 <__mulsf3_pse+0x64>
    1388:	9e 3f       	cpi	r25, 0xFE	; 254
    138a:	51 05       	cpc	r21, r1
    138c:	80 f0       	brcs	.+32     	; 0x13ae <__mulsf3_pse+0xa0>
    138e:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_inf>
    1392:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_szero>
    1396:	5f 3f       	cpi	r21, 0xFF	; 255
    1398:	e4 f3       	brlt	.-8      	; 0x1392 <__mulsf3_pse+0x84>
    139a:	98 3e       	cpi	r25, 0xE8	; 232
    139c:	d4 f3       	brlt	.-12     	; 0x1392 <__mulsf3_pse+0x84>
    139e:	86 95       	lsr	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	b7 95       	ror	r27
    13a6:	f7 95       	ror	r31
    13a8:	e7 95       	ror	r30
    13aa:	9f 5f       	subi	r25, 0xFF	; 255
    13ac:	c1 f7       	brne	.-16     	; 0x139e <__mulsf3_pse+0x90>
    13ae:	fe 2b       	or	r31, r30
    13b0:	88 0f       	add	r24, r24
    13b2:	91 1d       	adc	r25, r1
    13b4:	96 95       	lsr	r25
    13b6:	87 95       	ror	r24
    13b8:	97 f9       	bld	r25, 7
    13ba:	08 95       	ret
    13bc:	19 f4       	brne	.+6      	; 0x13c4 <__mulsf3_pse+0xb6>
    13be:	16 f4       	brtc	.+4      	; 0x13c4 <__mulsf3_pse+0xb6>
    13c0:	0c 94 26 09 	jmp	0x124c	; 0x124c <__fp_nan>
    13c4:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_mpack>

000013c8 <sqrt>:
    13c8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__fp_splitA>
    13cc:	b8 f3       	brcs	.-18     	; 0x13bc <__mulsf3_pse+0xae>
    13ce:	99 23       	and	r25, r25
    13d0:	c9 f3       	breq	.-14     	; 0x13c4 <__mulsf3_pse+0xb6>
    13d2:	b6 f3       	brts	.-20     	; 0x13c0 <__mulsf3_pse+0xb2>
    13d4:	9f 57       	subi	r25, 0x7F	; 127
    13d6:	55 0b       	sbc	r21, r21
    13d8:	87 ff       	sbrs	r24, 7
    13da:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_norm2>
    13de:	00 24       	eor	r0, r0
    13e0:	a0 e6       	ldi	r26, 0x60	; 96
    13e2:	40 ea       	ldi	r20, 0xA0	; 160
    13e4:	90 01       	movw	r18, r0
    13e6:	80 58       	subi	r24, 0x80	; 128
    13e8:	56 95       	lsr	r21
    13ea:	97 95       	ror	r25
    13ec:	28 f4       	brcc	.+10     	; 0x13f8 <sqrt+0x30>
    13ee:	80 5c       	subi	r24, 0xC0	; 192
    13f0:	66 0f       	add	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	20 f0       	brcs	.+8      	; 0x1400 <sqrt+0x38>
    13f8:	26 17       	cp	r18, r22
    13fa:	37 07       	cpc	r19, r23
    13fc:	48 07       	cpc	r20, r24
    13fe:	30 f4       	brcc	.+12     	; 0x140c <sqrt+0x44>
    1400:	62 1b       	sub	r22, r18
    1402:	73 0b       	sbc	r23, r19
    1404:	84 0b       	sbc	r24, r20
    1406:	20 29       	or	r18, r0
    1408:	31 29       	or	r19, r1
    140a:	4a 2b       	or	r20, r26
    140c:	a6 95       	lsr	r26
    140e:	17 94       	ror	r1
    1410:	07 94       	ror	r0
    1412:	20 25       	eor	r18, r0
    1414:	31 25       	eor	r19, r1
    1416:	4a 27       	eor	r20, r26
    1418:	58 f7       	brcc	.-42     	; 0x13f0 <sqrt+0x28>
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	20 f0       	brcs	.+8      	; 0x142a <sqrt+0x62>
    1422:	26 17       	cp	r18, r22
    1424:	37 07       	cpc	r19, r23
    1426:	48 07       	cpc	r20, r24
    1428:	30 f4       	brcc	.+12     	; 0x1436 <sqrt+0x6e>
    142a:	62 0b       	sbc	r22, r18
    142c:	73 0b       	sbc	r23, r19
    142e:	84 0b       	sbc	r24, r20
    1430:	20 0d       	add	r18, r0
    1432:	31 1d       	adc	r19, r1
    1434:	41 1d       	adc	r20, r1
    1436:	a0 95       	com	r26
    1438:	81 f7       	brne	.-32     	; 0x141a <sqrt+0x52>
    143a:	b9 01       	movw	r22, r18
    143c:	84 2f       	mov	r24, r20
    143e:	91 58       	subi	r25, 0x81	; 129
    1440:	88 0f       	add	r24, r24
    1442:	96 95       	lsr	r25
    1444:	87 95       	ror	r24
    1446:	08 95       	ret

00001448 <__fp_mpack>:
    1448:	9f 3f       	cpi	r25, 0xFF	; 255
    144a:	31 f0       	breq	.+12     	; 0x1458 <__fp_mpack_finite+0xc>

0000144c <__fp_mpack_finite>:
    144c:	91 50       	subi	r25, 0x01	; 1
    144e:	20 f4       	brcc	.+8      	; 0x1458 <__fp_mpack_finite+0xc>
    1450:	87 95       	ror	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	b7 95       	ror	r27
    1458:	88 0f       	add	r24, r24
    145a:	91 1d       	adc	r25, r1
    145c:	96 95       	lsr	r25
    145e:	87 95       	ror	r24
    1460:	97 f9       	bld	r25, 7
    1462:	08 95       	ret

00001464 <__fp_norm2>:
    1464:	91 50       	subi	r25, 0x01	; 1
    1466:	50 40       	sbci	r21, 0x00	; 0
    1468:	66 0f       	add	r22, r22
    146a:	77 1f       	adc	r23, r23
    146c:	88 1f       	adc	r24, r24
    146e:	d2 f7       	brpl	.-12     	; 0x1464 <__fp_norm2>
    1470:	08 95       	ret

00001472 <__mulsi3>:
    1472:	db 01       	movw	r26, r22
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__muluhisi3>
    147c:	bf 91       	pop	r27
    147e:	af 91       	pop	r26
    1480:	a2 9f       	mul	r26, r18
    1482:	80 0d       	add	r24, r0
    1484:	91 1d       	adc	r25, r1
    1486:	a3 9f       	mul	r26, r19
    1488:	90 0d       	add	r25, r0
    148a:	b2 9f       	mul	r27, r18
    148c:	90 0d       	add	r25, r0
    148e:	11 24       	eor	r1, r1
    1490:	08 95       	ret

00001492 <__udivmodhi4>:
    1492:	aa 1b       	sub	r26, r26
    1494:	bb 1b       	sub	r27, r27
    1496:	51 e1       	ldi	r21, 0x11	; 17
    1498:	07 c0       	rjmp	.+14     	; 0x14a8 <__udivmodhi4_ep>

0000149a <__udivmodhi4_loop>:
    149a:	aa 1f       	adc	r26, r26
    149c:	bb 1f       	adc	r27, r27
    149e:	a6 17       	cp	r26, r22
    14a0:	b7 07       	cpc	r27, r23
    14a2:	10 f0       	brcs	.+4      	; 0x14a8 <__udivmodhi4_ep>
    14a4:	a6 1b       	sub	r26, r22
    14a6:	b7 0b       	sbc	r27, r23

000014a8 <__udivmodhi4_ep>:
    14a8:	88 1f       	adc	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	5a 95       	dec	r21
    14ae:	a9 f7       	brne	.-22     	; 0x149a <__udivmodhi4_loop>
    14b0:	80 95       	com	r24
    14b2:	90 95       	com	r25
    14b4:	bc 01       	movw	r22, r24
    14b6:	cd 01       	movw	r24, r26
    14b8:	08 95       	ret

000014ba <__divmodhi4>:
    14ba:	97 fb       	bst	r25, 7
    14bc:	07 2e       	mov	r0, r23
    14be:	16 f4       	brtc	.+4      	; 0x14c4 <__divmodhi4+0xa>
    14c0:	00 94       	com	r0
    14c2:	07 d0       	rcall	.+14     	; 0x14d2 <__divmodhi4_neg1>
    14c4:	77 fd       	sbrc	r23, 7
    14c6:	09 d0       	rcall	.+18     	; 0x14da <__divmodhi4_neg2>
    14c8:	0e 94 49 0a 	call	0x1492	; 0x1492 <__udivmodhi4>
    14cc:	07 fc       	sbrc	r0, 7
    14ce:	05 d0       	rcall	.+10     	; 0x14da <__divmodhi4_neg2>
    14d0:	3e f4       	brtc	.+14     	; 0x14e0 <__divmodhi4_exit>

000014d2 <__divmodhi4_neg1>:
    14d2:	90 95       	com	r25
    14d4:	81 95       	neg	r24
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	08 95       	ret

000014da <__divmodhi4_neg2>:
    14da:	70 95       	com	r23
    14dc:	61 95       	neg	r22
    14de:	7f 4f       	sbci	r23, 0xFF	; 255

000014e0 <__divmodhi4_exit>:
    14e0:	08 95       	ret

000014e2 <__udivmodsi4>:
    14e2:	a1 e2       	ldi	r26, 0x21	; 33
    14e4:	1a 2e       	mov	r1, r26
    14e6:	aa 1b       	sub	r26, r26
    14e8:	bb 1b       	sub	r27, r27
    14ea:	fd 01       	movw	r30, r26
    14ec:	0d c0       	rjmp	.+26     	; 0x1508 <__udivmodsi4_ep>

000014ee <__udivmodsi4_loop>:
    14ee:	aa 1f       	adc	r26, r26
    14f0:	bb 1f       	adc	r27, r27
    14f2:	ee 1f       	adc	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	a2 17       	cp	r26, r18
    14f8:	b3 07       	cpc	r27, r19
    14fa:	e4 07       	cpc	r30, r20
    14fc:	f5 07       	cpc	r31, r21
    14fe:	20 f0       	brcs	.+8      	; 0x1508 <__udivmodsi4_ep>
    1500:	a2 1b       	sub	r26, r18
    1502:	b3 0b       	sbc	r27, r19
    1504:	e4 0b       	sbc	r30, r20
    1506:	f5 0b       	sbc	r31, r21

00001508 <__udivmodsi4_ep>:
    1508:	66 1f       	adc	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	88 1f       	adc	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	1a 94       	dec	r1
    1512:	69 f7       	brne	.-38     	; 0x14ee <__udivmodsi4_loop>
    1514:	60 95       	com	r22
    1516:	70 95       	com	r23
    1518:	80 95       	com	r24
    151a:	90 95       	com	r25
    151c:	9b 01       	movw	r18, r22
    151e:	ac 01       	movw	r20, r24
    1520:	bd 01       	movw	r22, r26
    1522:	cf 01       	movw	r24, r30
    1524:	08 95       	ret

00001526 <__umulhisi3>:
    1526:	a2 9f       	mul	r26, r18
    1528:	b0 01       	movw	r22, r0
    152a:	b3 9f       	mul	r27, r19
    152c:	c0 01       	movw	r24, r0
    152e:	a3 9f       	mul	r26, r19
    1530:	70 0d       	add	r23, r0
    1532:	81 1d       	adc	r24, r1
    1534:	11 24       	eor	r1, r1
    1536:	91 1d       	adc	r25, r1
    1538:	b2 9f       	mul	r27, r18
    153a:	70 0d       	add	r23, r0
    153c:	81 1d       	adc	r24, r1
    153e:	11 24       	eor	r1, r1
    1540:	91 1d       	adc	r25, r1
    1542:	08 95       	ret

00001544 <__muluhisi3>:
    1544:	0e 94 93 0a 	call	0x1526	; 0x1526 <__umulhisi3>
    1548:	a5 9f       	mul	r26, r21
    154a:	90 0d       	add	r25, r0
    154c:	b4 9f       	mul	r27, r20
    154e:	90 0d       	add	r25, r0
    1550:	a4 9f       	mul	r26, r20
    1552:	80 0d       	add	r24, r0
    1554:	91 1d       	adc	r25, r1
    1556:	11 24       	eor	r1, r1
    1558:	08 95       	ret

0000155a <_exit>:
    155a:	f8 94       	cli

0000155c <__stop_program>:
    155c:	ff cf       	rjmp	.-2      	; 0x155c <__stop_program>
