
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000050c  000005a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800108  00800108  000005a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f96  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000909  00000000  00000000  0000268e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c53  00000000  00000000  00002f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00003bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a2  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  00004506  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004ed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_11>
  30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 37       	cpi	r26, 0x76	; 118
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 02 	call	0x400	; 0x400 <main>
  9e:	0c 94 84 02 	jmp	0x508	; 0x508 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8b 60       	ori	r24, 0x0B	; 11
  ae:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
  b0:	ef e6       	ldi	r30, 0x6F	; 111
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
  c4:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  c8:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  cc:	08 95       	ret

000000ce <UART_Init>:
#define MAX_VOLTAGE 13

//uart intializer
void UART_Init(unsigned int BAUD_RATE){
	
	UBRR0H |= (BAUD_RATE>>8); //sets the baud rate to 9600bps
  ce:	e5 ec       	ldi	r30, 0xC5	; 197
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	20 81       	ld	r18, Z
  d4:	92 2b       	or	r25, r18
  d6:	90 83       	st	Z, r25
	UBRR0L |= (BAUD_RATE);
  d8:	e4 ec       	ldi	r30, 0xC4	; 196
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	89 2b       	or	r24, r25
  e0:	80 83       	st	Z, r24
	UCSR0B |= (1<RXEN0); //enables UART transmitter and reciever
  e2:	e1 ec       	ldi	r30, 0xC1	; 193
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //sets character size to 8 data bits
  ec:	a2 ec       	ldi	r26, 0xC2	; 194
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	8c 91       	ld	r24, X
  f2:	86 60       	ori	r24, 0x06	; 6
  f4:	8c 93       	st	X, r24
	UCSR0B |= (1<<RXCIE0); //enable reciever interrupt
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <parseUARTMessage>:
}

//parse UART Receive message
void parseUARTMessage(){
	uint8_t collonCount = 0;
	for(int i = 0; i < indexCount;i++){
  fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <indexCount>
 102:	88 23       	and	r24, r24
 104:	71 f1       	breq	.+92     	; 0x162 <parseUARTMessage+0x64>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	40 e0       	ldi	r20, 0x00	; 0
		if(receiveBuffer[i]==':'){
 10c:	fc 01       	movw	r30, r24
 10e:	ee 5e       	subi	r30, 0xEE	; 238
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	20 81       	ld	r18, Z
 114:	2a 33       	cpi	r18, 0x3A	; 58
 116:	09 f4       	brne	.+2      	; 0x11a <parseUARTMessage+0x1c>
			collonCount++;
 118:	4f 5f       	subi	r20, 0xFF	; 255
		}
		//hit the third colon the required flow number is the next few characters
		if(collonCount == 3){
 11a:	43 30       	cpi	r20, 0x03	; 3
 11c:	d9 f4       	brne	.+54     	; 0x154 <parseUARTMessage+0x56>
			//mfc values are three digit so grab the next 3 indexes
			pumpingEffort = (receiveBuffer[i]*100) + (receiveBuffer[i+1]*10) + (receiveBuffer[i+2]); //pumping effort number
 11e:	fc 01       	movw	r30, r24
 120:	ee 5e       	subi	r30, 0xEE	; 238
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	30 81       	ld	r19, Z
 126:	fc 01       	movw	r30, r24
 128:	ed 5e       	subi	r30, 0xED	; 237
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	20 81       	ld	r18, Z
 12e:	fc 01       	movw	r30, r24
 130:	ec 5e       	subi	r30, 0xEC	; 236
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	80 81       	ld	r24, Z
 136:	94 e6       	ldi	r25, 0x64	; 100
 138:	39 9f       	mul	r19, r25
 13a:	80 0d       	add	r24, r0
 13c:	11 24       	eor	r1, r1
 13e:	38 2f       	mov	r19, r24
 140:	82 2f       	mov	r24, r18
 142:	88 0f       	add	r24, r24
 144:	98 2f       	mov	r25, r24
 146:	99 0f       	add	r25, r25
 148:	99 0f       	add	r25, r25
 14a:	89 0f       	add	r24, r25
 14c:	83 0f       	add	r24, r19
 14e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pumpingEffort>
			break;
 152:	07 c0       	rjmp	.+14     	; 0x162 <parseUARTMessage+0x64>
}

//parse UART Receive message
void parseUARTMessage(){
	uint8_t collonCount = 0;
	for(int i = 0; i < indexCount;i++){
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <indexCount>
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	82 17       	cp	r24, r18
 15e:	93 07       	cpc	r25, r19
 160:	ac f2       	brlt	.-86     	; 0x10c <parseUARTMessage+0xe>
			pumpingEffort = (receiveBuffer[i]*100) + (receiveBuffer[i+1]*10) + (receiveBuffer[i+2]); //pumping effort number
			break;
		}
	}
	//after message is parsed empty the array, reset the numbers 
	memset(receiveBuffer, 0, sizeof(receiveBuffer)); //clear the array to 0 
 162:	84 e6       	ldi	r24, 0x64	; 100
 164:	e2 e1       	ldi	r30, 0x12	; 18
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	df 01       	movw	r26, r30
 16a:	1d 92       	st	X+, r1
 16c:	8a 95       	dec	r24
 16e:	e9 f7       	brne	.-6      	; 0x16a <parseUARTMessage+0x6c>
	reverseCurlyBracketCount = 0;
 170:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <reverseCurlyBracketCount>
	messageReceived = false;
 174:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 178:	08 95       	ret

0000017a <UART_InterpretPumpingEffort>:


//only changes dutycycle 
void UART_InterpretPumpingEffort(){
	uint32_t voltageEquivalentValue;
	pumpingEffort = 1; //mock pumping effort
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pumpingEffort>
	if(pumpingEffort==0){ //turn off mode 
 180:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pumpingEffort>
 184:	81 11       	cpse	r24, r1
 186:	06 c0       	rjmp	.+12     	; 0x194 <UART_InterpretPumpingEffort+0x1a>
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
 188:	e4 e6       	ldi	r30, 0x64	; 100
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	8f 6e       	ori	r24, 0xEF	; 239
 190:	80 83       	st	Z, r24
 192:	45 c0       	rjmp	.+138    	; 0x21e <UART_InterpretPumpingEffort+0xa4>
		power_all_disable(); //disables all modules on the microcontroller 
		//power_usart_enable();
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){
 194:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pumpingEffort>
 198:	88 23       	and	r24, r24
 19a:	41 f0       	breq	.+16     	; 0x1ac <UART_InterpretPumpingEffort+0x32>
 19c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pumpingEffort>
 1a0:	83 3b       	cpi	r24, 0xB3	; 179
 1a2:	20 f4       	brcc	.+8      	; 0x1ac <UART_InterpretPumpingEffort+0x32>
		//70% of values - care about efficiency and meeting pumpingEffort
		//efficiency actions turn two switches off
		//disable all unused modules
		//dutyCycle = (PROPORTIONALITY_CONSTANT* MAX_LOW_POWER * (pumpingEffort/178))/(10000*1000);	//10000 and 1000 are because we didnt use floats [integer overflow error here]
		lowPowerMode = true; //turn off two switches push from one direction
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lowPowerMode>
 1aa:	39 c0       	rjmp	.+114    	; 0x21e <UART_InterpretPumpingEffort+0xa4>
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){
 1ac:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pumpingEffort>
 1b0:	83 3b       	cpi	r24, 0xB3	; 179
 1b2:	38 f1       	brcs	.+78     	; 0x202 <UART_InterpretPumpingEffort+0x88>
 1b4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pumpingEffort>
 1b8:	8f 3f       	cpi	r24, 0xFF	; 255
 1ba:	19 f1       	breq	.+70     	; 0x202 <UART_InterpretPumpingEffort+0x88>
		//30% of values - go ham fam
		lowPowerMode = false;
 1bc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lowPowerMode>
		voltageEquivalentValue = pumpingEffort/178*MAX_VOLTAGE;
 1c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pumpingEffort>
		dutyCycle = (917*voltageEquivalentValue + 456)/100;
 1c4:	a1 e0       	ldi	r26, 0x01	; 1
 1c6:	82 3b       	cpi	r24, 0xB2	; 178
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <UART_InterpretPumpingEffort+0x52>
 1ca:	a0 e0       	ldi	r26, 0x00	; 0
 1cc:	8d e0       	ldi	r24, 0x0D	; 13
 1ce:	a8 9f       	mul	r26, r24
 1d0:	d0 01       	movw	r26, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	25 e9       	ldi	r18, 0x95	; 149
 1d6:	33 e0       	ldi	r19, 0x03	; 3
 1d8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__usmulhisi3>
 1dc:	68 53       	subi	r22, 0x38	; 56
 1de:	7e 4f       	sbci	r23, 0xFE	; 254
 1e0:	8f 4f       	sbci	r24, 0xFF	; 255
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	24 e6       	ldi	r18, 0x64	; 100
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	0e 94 2d 02 	call	0x45a	; 0x45a <__udivmodsi4>
 1f0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 1f4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1f8:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_start+0x2>
 1fc:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_start+0x3>
 200:	0e c0       	rjmp	.+28     	; 0x21e <UART_InterpretPumpingEffort+0xa4>
	}else{ //255 lose your mind
		//change duty cycle and pwm to max out the motor
		lowPowerMode = false;
 202:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lowPowerMode>
		dutyCycle = 99;
 206:	83 e6       	ldi	r24, 0x63	; 99
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 212:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 216:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 21a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	changePumpingEffort = false;
 21e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <changePumpingEffort>
 222:	08 95       	ret

00000224 <__vector_18>:

void jamCheck(uint16_t voltageArray){
	
}

void collisionCheck(){
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	5b 9a       	sbi	0x0b, 3	; 11
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_12>:
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 24c:	81 11       	cpse	r24, r1
 24e:	04 c0       	rjmp	.+8      	; 0x258 <__vector_12+0x1e>
 250:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lowPowerMode>
 254:	88 23       	and	r24, r24
 256:	51 f0       	breq	.+20     	; 0x26c <__vector_12+0x32>
 258:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <isDead>
 25c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count>
 260:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 264:	89 17       	cp	r24, r25
 266:	58 f0       	brcs	.+22     	; 0x27e <__vector_12+0x44>
 268:	2a 98       	cbi	0x05, 2	; 5
 26a:	09 c0       	rjmp	.+18     	; 0x27e <__vector_12+0x44>
 26c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <isDead>
 270:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count>
 274:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 278:	89 17       	cp	r24, r25
 27a:	08 f0       	brcs	.+2      	; 0x27e <__vector_12+0x44>
 27c:	29 98       	cbi	0x05, 1	; 5
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <ConvertTimerValueToDutyCycle>:
 28c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 290:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 294:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 298:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 29c:	ad e7       	ldi	r26, 0x7D	; 125
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	0e 94 65 02 	call	0x4ca	; 0x4ca <__muluhisi3>
 2a4:	24 e6       	ldi	r18, 0x64	; 100
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	0e 94 2d 02 	call	0x45a	; 0x45a <__udivmodsi4>
 2b0:	82 2f       	mov	r24, r18
 2b2:	08 95       	ret

000002b4 <CalculateDeadTime>:
 2b4:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frequency>
 2b8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <noOfWaves>
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	84 ef       	ldi	r24, 0xF4	; 244
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 19 02 	call	0x432	; 0x432 <__divmodhi4>
 2c6:	62 1b       	sub	r22, r18
 2c8:	71 09       	sbc	r23, r1
 2ca:	8d e7       	ldi	r24, 0x7D	; 125
 2cc:	28 2f       	mov	r18, r24
 2ce:	26 9f       	mul	r18, r22
 2d0:	c0 01       	movw	r24, r0
 2d2:	27 9f       	mul	r18, r23
 2d4:	90 0d       	add	r25, r0
 2d6:	11 24       	eor	r1, r1
 2d8:	08 95       	ret

000002da <__vector_11>:
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
 2fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 300:	81 11       	cpse	r24, r1
 302:	04 c0       	rjmp	.+8      	; 0x30c <__vector_11+0x32>
 304:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lowPowerMode>
 308:	88 23       	and	r24, r24
 30a:	b9 f1       	breq	.+110    	; 0x37a <__vector_11+0xa0>
 30c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count>
 310:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 314:	89 17       	cp	r24, r25
 316:	60 f0       	brcs	.+24     	; 0x330 <__vector_11+0x56>
 318:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <isDead>
 31c:	81 11       	cpse	r24, r1
 31e:	08 c0       	rjmp	.+16     	; 0x330 <__vector_11+0x56>
 320:	2a 9a       	sbi	0x05, 2	; 5
 322:	5d 9a       	sbi	0x0b, 5	; 11
 324:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <count>
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <count>
 32e:	57 c0       	rjmp	.+174    	; 0x3de <__vector_11+0x104>
 330:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count>
 334:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 338:	89 17       	cp	r24, r25
 33a:	a0 f4       	brcc	.+40     	; 0x364 <__vector_11+0x8a>
 33c:	5d 98       	cbi	0x0b, 5	; 11
 33e:	2a 98       	cbi	0x05, 2	; 5
 340:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <CalculateDeadTime>
 344:	6f ef       	ldi	r22, 0xFF	; 255
 346:	7f ef       	ldi	r23, 0xFF	; 255
 348:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 34c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lowPowerMode>
 350:	81 11       	cpse	r24, r1
 352:	02 c0       	rjmp	.+4      	; 0x358 <__vector_11+0x7e>
 354:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isLHS>
 358:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <isDead>
 362:	3d c0       	rjmp	.+122    	; 0x3de <__vector_11+0x104>
 364:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <isDead>
 368:	0e 94 46 01 	call	0x28c	; 0x28c <ConvertTimerValueToDutyCycle>
 36c:	68 2f       	mov	r22, r24
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	8d e7       	ldi	r24, 0x7D	; 125
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 378:	32 c0       	rjmp	.+100    	; 0x3de <__vector_11+0x104>
 37a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count>
 37e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 382:	89 17       	cp	r24, r25
 384:	60 f0       	brcs	.+24     	; 0x39e <__vector_11+0xc4>
 386:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <isDead>
 38a:	81 11       	cpse	r24, r1
 38c:	08 c0       	rjmp	.+16     	; 0x39e <__vector_11+0xc4>
 38e:	5e 9a       	sbi	0x0b, 6	; 11
 390:	29 9a       	sbi	0x05, 1	; 5
 392:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <count>
 396:	8f 5f       	subi	r24, 0xFF	; 255
 398:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <count>
 39c:	20 c0       	rjmp	.+64     	; 0x3de <__vector_11+0x104>
 39e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count>
 3a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 3a6:	89 17       	cp	r24, r25
 3a8:	80 f4       	brcc	.+32     	; 0x3ca <__vector_11+0xf0>
 3aa:	5e 98       	cbi	0x0b, 6	; 11
 3ac:	29 98       	cbi	0x05, 1	; 5
 3ae:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <CalculateDeadTime>
 3b2:	6f ef       	ldi	r22, 0xFF	; 255
 3b4:	7f ef       	ldi	r23, 0xFF	; 255
 3b6:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isLHS>
 3c0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count>
 3c4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <isDead>
 3c8:	0a c0       	rjmp	.+20     	; 0x3de <__vector_11+0x104>
 3ca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <isDead>
 3ce:	0e 94 46 01 	call	0x28c	; 0x28c <ConvertTimerValueToDutyCycle>
 3d2:	68 2f       	mov	r22, r24
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	8d e7       	ldi	r24, 0x7D	; 125
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <main>:


int main(void)
{	

    sei();
 400:	78 94       	sei
	UART_Init(UBRR_VALUE);
 402:	83 e3       	ldi	r24, 0x33	; 51
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 67 00 	call	0xce	; 0xce <UART_Init>
	//ADC_Init();
	PWM_Init();
 40a:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 40e:	84 b1       	in	r24, 0x04	; 4
 410:	86 60       	ori	r24, 0x06	; 6
 412:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 414:	8a b1       	in	r24, 0x0a	; 10
 416:	80 66       	ori	r24, 0x60	; 96
 418:	8a b9       	out	0x0a, r24	; 10
	
	DDRD |= (1<<PD3); //check if receive works
 41a:	53 9a       	sbi	0x0a, 3	; 10

    while (1) 
    {
		//message received is true
		//parse message 
		parseUARTMessage();
 41c:	0e 94 7f 00 	call	0xfe	; 0xfe <parseUARTMessage>
		if(changePumpingEffort){
 420:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <changePumpingEffort>
 424:	88 23       	and	r24, r24
 426:	d1 f3       	breq	.-12     	; 0x41c <main+0x1c>
			 UART_InterpretPumpingEffort();
 428:	0e 94 bd 00 	call	0x17a	; 0x17a <UART_InterpretPumpingEffort>
			 ConvertTimerValueToDutyCycle();
 42c:	0e 94 46 01 	call	0x28c	; 0x28c <ConvertTimerValueToDutyCycle>
 430:	f5 cf       	rjmp	.-22     	; 0x41c <main+0x1c>

00000432 <__divmodhi4>:
 432:	97 fb       	bst	r25, 7
 434:	07 2e       	mov	r0, r23
 436:	16 f4       	brtc	.+4      	; 0x43c <__divmodhi4+0xa>
 438:	00 94       	com	r0
 43a:	07 d0       	rcall	.+14     	; 0x44a <__divmodhi4_neg1>
 43c:	77 fd       	sbrc	r23, 7
 43e:	09 d0       	rcall	.+18     	; 0x452 <__divmodhi4_neg2>
 440:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__udivmodhi4>
 444:	07 fc       	sbrc	r0, 7
 446:	05 d0       	rcall	.+10     	; 0x452 <__divmodhi4_neg2>
 448:	3e f4       	brtc	.+14     	; 0x458 <__divmodhi4_exit>

0000044a <__divmodhi4_neg1>:
 44a:	90 95       	com	r25
 44c:	81 95       	neg	r24
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	08 95       	ret

00000452 <__divmodhi4_neg2>:
 452:	70 95       	com	r23
 454:	61 95       	neg	r22
 456:	7f 4f       	sbci	r23, 0xFF	; 255

00000458 <__divmodhi4_exit>:
 458:	08 95       	ret

0000045a <__udivmodsi4>:
 45a:	a1 e2       	ldi	r26, 0x21	; 33
 45c:	1a 2e       	mov	r1, r26
 45e:	aa 1b       	sub	r26, r26
 460:	bb 1b       	sub	r27, r27
 462:	fd 01       	movw	r30, r26
 464:	0d c0       	rjmp	.+26     	; 0x480 <__udivmodsi4_ep>

00000466 <__udivmodsi4_loop>:
 466:	aa 1f       	adc	r26, r26
 468:	bb 1f       	adc	r27, r27
 46a:	ee 1f       	adc	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	a2 17       	cp	r26, r18
 470:	b3 07       	cpc	r27, r19
 472:	e4 07       	cpc	r30, r20
 474:	f5 07       	cpc	r31, r21
 476:	20 f0       	brcs	.+8      	; 0x480 <__udivmodsi4_ep>
 478:	a2 1b       	sub	r26, r18
 47a:	b3 0b       	sbc	r27, r19
 47c:	e4 0b       	sbc	r30, r20
 47e:	f5 0b       	sbc	r31, r21

00000480 <__udivmodsi4_ep>:
 480:	66 1f       	adc	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	1a 94       	dec	r1
 48a:	69 f7       	brne	.-38     	; 0x466 <__udivmodsi4_loop>
 48c:	60 95       	com	r22
 48e:	70 95       	com	r23
 490:	80 95       	com	r24
 492:	90 95       	com	r25
 494:	9b 01       	movw	r18, r22
 496:	ac 01       	movw	r20, r24
 498:	bd 01       	movw	r22, r26
 49a:	cf 01       	movw	r24, r30
 49c:	08 95       	ret

0000049e <__umulhisi3>:
 49e:	a2 9f       	mul	r26, r18
 4a0:	b0 01       	movw	r22, r0
 4a2:	b3 9f       	mul	r27, r19
 4a4:	c0 01       	movw	r24, r0
 4a6:	a3 9f       	mul	r26, r19
 4a8:	70 0d       	add	r23, r0
 4aa:	81 1d       	adc	r24, r1
 4ac:	11 24       	eor	r1, r1
 4ae:	91 1d       	adc	r25, r1
 4b0:	b2 9f       	mul	r27, r18
 4b2:	70 0d       	add	r23, r0
 4b4:	81 1d       	adc	r24, r1
 4b6:	11 24       	eor	r1, r1
 4b8:	91 1d       	adc	r25, r1
 4ba:	08 95       	ret

000004bc <__usmulhisi3>:
 4bc:	0e 94 4f 02 	call	0x49e	; 0x49e <__umulhisi3>

000004c0 <__usmulhisi3_tail>:
 4c0:	b7 ff       	sbrs	r27, 7
 4c2:	08 95       	ret
 4c4:	82 1b       	sub	r24, r18
 4c6:	93 0b       	sbc	r25, r19
 4c8:	08 95       	ret

000004ca <__muluhisi3>:
 4ca:	0e 94 4f 02 	call	0x49e	; 0x49e <__umulhisi3>
 4ce:	a5 9f       	mul	r26, r21
 4d0:	90 0d       	add	r25, r0
 4d2:	b4 9f       	mul	r27, r20
 4d4:	90 0d       	add	r25, r0
 4d6:	a4 9f       	mul	r26, r20
 4d8:	80 0d       	add	r24, r0
 4da:	91 1d       	adc	r25, r1
 4dc:	11 24       	eor	r1, r1
 4de:	08 95       	ret

000004e0 <__udivmodhi4>:
 4e0:	aa 1b       	sub	r26, r26
 4e2:	bb 1b       	sub	r27, r27
 4e4:	51 e1       	ldi	r21, 0x11	; 17
 4e6:	07 c0       	rjmp	.+14     	; 0x4f6 <__udivmodhi4_ep>

000004e8 <__udivmodhi4_loop>:
 4e8:	aa 1f       	adc	r26, r26
 4ea:	bb 1f       	adc	r27, r27
 4ec:	a6 17       	cp	r26, r22
 4ee:	b7 07       	cpc	r27, r23
 4f0:	10 f0       	brcs	.+4      	; 0x4f6 <__udivmodhi4_ep>
 4f2:	a6 1b       	sub	r26, r22
 4f4:	b7 0b       	sbc	r27, r23

000004f6 <__udivmodhi4_ep>:
 4f6:	88 1f       	adc	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	5a 95       	dec	r21
 4fc:	a9 f7       	brne	.-22     	; 0x4e8 <__udivmodhi4_loop>
 4fe:	80 95       	com	r24
 500:	90 95       	com	r25
 502:	bc 01       	movw	r22, r24
 504:	cd 01       	movw	r24, r26
 506:	08 95       	ret

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
