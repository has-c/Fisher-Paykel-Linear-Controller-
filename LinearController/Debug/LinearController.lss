
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000055c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000580  00800118  00800118  00000608  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002387  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8e  00000000  00000000  00002b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e5d  00000000  00000000  000035c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00004424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c3  00000000  00000000  00004780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5f  00000000  00000000  00004f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005aa2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_11>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	26 e0       	ldi	r18, 0x06	; 6
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 39       	cpi	r26, 0x98	; 152
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 07 02 	call	0x40e	; 0x40e <main>
  9e:	0c 94 ac 02 	jmp	0x558	; 0x558 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  
#include "adc.h"

void ADC_Init(){
	// selection channel is set to AREF
	ADMUX &= ~(1<<REFS1);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS0);
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
	
	//Selects ADC5 as the analog channel selection
	ADMUX &= ~(1<<MUX3)|(1<<MUX2)|(1<<MUX0);
  b6:	80 81       	ld	r24, Z
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX1);
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
	
	//set required Prescaler Select Bits
	//Turns on the ADC and sets prescaler to 64
	//enable ADC
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	86 68       	ori	r24, 0x86	; 134
  ca:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADPS0);
  cc:	80 81       	ld	r24, Z
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
  da:	e1 e8       	ldi	r30, 0x81	; 129
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8b 60       	ori	r24, 0x0B	; 11
  e2:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
  e4:	ef e6       	ldi	r30, 0x6F	; 111
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 60       	ori	r24, 0x06	; 6
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
  f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
  f8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  fc:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 100:	08 95       	ret

00000102 <UART_Init>:
		}
	}
	//after message is parsed empty the array, reset the numbers 
	memset(receiveBuffer, 0, sizeof(receiveBuffer)); //clear the array to 0 
	reverseCurlyBracketCount = 0;
	messageReceived = false;
 102:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 106:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 10a:	e1 ec       	ldi	r30, 0xC1	; 193
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 e9       	ldi	r24, 0x90	; 144
 110:	80 83       	st	Z, r24
 112:	80 81       	ld	r24, Z
 114:	88 64       	ori	r24, 0x48	; 72
 116:	80 83       	st	Z, r24
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 11e:	08 95       	ret

00000120 <UART_Transmit>:
}

//
void UART_Transmit(uint8_t myValue){
	//disable receive 
	UCSR0B &= ~(1 << RXEN0);
 120:	e1 ec       	ldi	r30, 0xC1	; 193
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	9f 7e       	andi	r25, 0xEF	; 239
 128:	90 83       	st	Z, r25
	UCSR0B &= ~(1 << RXCIE0);
 12a:	90 81       	ld	r25, Z
 12c:	9f 77       	andi	r25, 0x7F	; 127
 12e:	90 83       	st	Z, r25
	while (!((1<<UDRE0)&&(UCSR0A))); //wait until the transmit register is ready
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	99 23       	and	r25, r25
 138:	e9 f3       	breq	.-6      	; 0x134 <UART_Transmit+0x14>
	UDR0 = myValue;//once ready, store next value for transmission
 13a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 13e:	08 95       	ret

00000140 <usart_putchar_printf>:
}

uint8_t ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	8a 30       	cpi	r24, 0x0A	; 10
 146:	19 f4       	brne	.+6      	; 0x14e <usart_putchar_printf+0xe>
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	0e 94 90 00 	call	0x120	; 0x120 <UART_Transmit>
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 90 00 	call	0x120	; 0x120 <UART_Transmit>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <concatenate>:
 15c:	c0 97       	sbiw	r24, 0x30	; 48
 15e:	e4 e6       	ldi	r30, 0x64	; 100
 160:	e8 9f       	mul	r30, r24
 162:	90 01       	movw	r18, r0
 164:	e9 9f       	mul	r30, r25
 166:	30 0d       	add	r19, r0
 168:	11 24       	eor	r1, r1
 16a:	60 53       	subi	r22, 0x30	; 48
 16c:	71 09       	sbc	r23, r1
 16e:	cb 01       	movw	r24, r22
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	68 0f       	add	r22, r24
 182:	79 1f       	adc	r23, r25
 184:	62 0f       	add	r22, r18
 186:	73 1f       	adc	r23, r19
 188:	ca 01       	movw	r24, r20
 18a:	c0 97       	sbiw	r24, 0x30	; 48
 18c:	86 0f       	add	r24, r22
 18e:	97 1f       	adc	r25, r23
 190:	08 95       	ret

00000192 <__vector_18>:
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
 1a4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1a8:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <received>
 1ac:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <rx_count>
 1b0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <rx_count+0x1>
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <rx_count+0x1>
 1ba:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <rx_count>
 1be:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <rx_count>
 1c2:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <rx_count+0x1>
 1c6:	45 97       	sbiw	r24, 0x15	; 21
 1c8:	4c f0       	brlt	.+18     	; 0x1dc <__vector_18+0x4a>
 1ca:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <rx_count>
 1ce:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <rx_count+0x1>
 1d2:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <received>
 1d6:	eb 5f       	subi	r30, 0xFB	; 251
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 83       	st	Z, r24
 1dc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <rx_count>
 1e0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <rx_count+0x1>
 1e4:	86 97       	sbiw	r24, 0x26	; 38
 1e6:	7c f0       	brlt	.+30     	; 0x206 <__vector_18+0x74>
 1e8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 77       	andi	r24, 0x7F	; 127
 1f0:	80 83       	st	Z, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	8f 7e       	andi	r24, 0xEF	; 239
 1f6:	80 83       	st	Z, r24
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <finished>
 1fe:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <rx_count+0x1>
 202:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <rx_count>
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_20>:
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
 228:	e1 ec       	ldi	r30, 0xC1	; 193
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 61       	ori	r24, 0x10	; 16
 230:	80 83       	st	Z, r24
 232:	80 81       	ld	r24, Z
 234:	80 68       	ori	r24, 0x80	; 128
 236:	80 83       	st	Z, r24
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_12>:
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <isLHS>
 25a:	81 11       	cpse	r24, r1
 25c:	04 c0       	rjmp	.+8      	; 0x266 <__vector_12+0x1e>
 25e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <lowPowerMode>
 262:	88 23       	and	r24, r24
 264:	51 f0       	breq	.+20     	; 0x27a <__vector_12+0x32>
 266:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <isDead>
 26a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count>
 26e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 272:	89 17       	cp	r24, r25
 274:	58 f0       	brcs	.+22     	; 0x28c <__vector_12+0x44>
 276:	2a 98       	cbi	0x05, 2	; 5
 278:	09 c0       	rjmp	.+18     	; 0x28c <__vector_12+0x44>
 27a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <isDead>
 27e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count>
 282:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 286:	89 17       	cp	r24, r25
 288:	08 f0       	brcs	.+2      	; 0x28c <__vector_12+0x44>
 28a:	29 98       	cbi	0x05, 1	; 5
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <ConvertTimerValueToDutyCycle>:
 29a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <dutyCycle>
 29e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <dutyCycle+0x1>
 2a2:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <dutyCycle+0x2>
 2a6:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <dutyCycle+0x3>
 2aa:	ad e7       	ldi	r26, 0x7D	; 125
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__muluhisi3>
 2b2:	24 e6       	ldi	r18, 0x64	; 100
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__udivmodsi4>
 2be:	82 2f       	mov	r24, r18
 2c0:	08 95       	ret

000002c2 <CalculateDeadTime>:
 2c2:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <frequency>
 2c6:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <noOfWaves>
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	88 e8       	ldi	r24, 0x88	; 136
 2ce:	93 e1       	ldi	r25, 0x13	; 19
 2d0:	0e 94 48 02 	call	0x490	; 0x490 <__divmodhi4>
 2d4:	62 1b       	sub	r22, r18
 2d6:	71 09       	sbc	r23, r1
 2d8:	8d e7       	ldi	r24, 0x7D	; 125
 2da:	28 2f       	mov	r18, r24
 2dc:	26 9f       	mul	r18, r22
 2de:	c0 01       	movw	r24, r0
 2e0:	27 9f       	mul	r18, r23
 2e2:	90 0d       	add	r25, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	08 95       	ret

000002e8 <__vector_11>:
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <isLHS>
 30e:	81 11       	cpse	r24, r1
 310:	04 c0       	rjmp	.+8      	; 0x31a <__vector_11+0x32>
 312:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <lowPowerMode>
 316:	88 23       	and	r24, r24
 318:	b9 f1       	breq	.+110    	; 0x388 <__vector_11+0xa0>
 31a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count>
 31e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 322:	89 17       	cp	r24, r25
 324:	60 f0       	brcs	.+24     	; 0x33e <__vector_11+0x56>
 326:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <isDead>
 32a:	81 11       	cpse	r24, r1
 32c:	08 c0       	rjmp	.+16     	; 0x33e <__vector_11+0x56>
 32e:	2a 9a       	sbi	0x05, 2	; 5
 330:	5d 9a       	sbi	0x0b, 5	; 11
 332:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <count>
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <count>
 33c:	57 c0       	rjmp	.+174    	; 0x3ec <__vector_11+0x104>
 33e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count>
 342:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 346:	89 17       	cp	r24, r25
 348:	a0 f4       	brcc	.+40     	; 0x372 <__vector_11+0x8a>
 34a:	5d 98       	cbi	0x0b, 5	; 11
 34c:	2a 98       	cbi	0x05, 2	; 5
 34e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CalculateDeadTime>
 352:	6f ef       	ldi	r22, 0xFF	; 255
 354:	7f ef       	ldi	r23, 0xFF	; 255
 356:	0e 94 78 00 	call	0xf0	; 0xf0 <PWM_Change>
 35a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <lowPowerMode>
 35e:	81 11       	cpse	r24, r1
 360:	02 c0       	rjmp	.+4      	; 0x366 <__vector_11+0x7e>
 362:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <isLHS>
 366:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <count>
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <isDead>
 370:	3d c0       	rjmp	.+122    	; 0x3ec <__vector_11+0x104>
 372:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <isDead>
 376:	0e 94 4d 01 	call	0x29a	; 0x29a <ConvertTimerValueToDutyCycle>
 37a:	68 2f       	mov	r22, r24
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	8d e7       	ldi	r24, 0x7D	; 125
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 78 00 	call	0xf0	; 0xf0 <PWM_Change>
 386:	32 c0       	rjmp	.+100    	; 0x3ec <__vector_11+0x104>
 388:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count>
 38c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 390:	89 17       	cp	r24, r25
 392:	60 f0       	brcs	.+24     	; 0x3ac <__vector_11+0xc4>
 394:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <isDead>
 398:	81 11       	cpse	r24, r1
 39a:	08 c0       	rjmp	.+16     	; 0x3ac <__vector_11+0xc4>
 39c:	5e 9a       	sbi	0x0b, 6	; 11
 39e:	29 9a       	sbi	0x05, 1	; 5
 3a0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <count>
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <count>
 3aa:	20 c0       	rjmp	.+64     	; 0x3ec <__vector_11+0x104>
 3ac:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count>
 3b0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 3b4:	89 17       	cp	r24, r25
 3b6:	80 f4       	brcc	.+32     	; 0x3d8 <__vector_11+0xf0>
 3b8:	5e 98       	cbi	0x0b, 6	; 11
 3ba:	29 98       	cbi	0x05, 1	; 5
 3bc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CalculateDeadTime>
 3c0:	6f ef       	ldi	r22, 0xFF	; 255
 3c2:	7f ef       	ldi	r23, 0xFF	; 255
 3c4:	0e 94 78 00 	call	0xf0	; 0xf0 <PWM_Change>
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <isLHS>
 3ce:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <count>
 3d2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <isDead>
 3d6:	0a c0       	rjmp	.+20     	; 0x3ec <__vector_11+0x104>
 3d8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <isDead>
 3dc:	0e 94 4d 01 	call	0x29a	; 0x29a <ConvertTimerValueToDutyCycle>
 3e0:	68 2f       	mov	r22, r24
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	8d e7       	ldi	r24, 0x7D	; 125
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 78 00 	call	0xf0	; 0xf0 <PWM_Change>
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	bf 91       	pop	r27
 3f2:	af 91       	pop	r26
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	7f 91       	pop	r23
 3fa:	6f 91       	pop	r22
 3fc:	5f 91       	pop	r21
 3fe:	4f 91       	pop	r20
 400:	3f 91       	pop	r19
 402:	2f 91       	pop	r18
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <main>:

int main(void)
{	
	stdout= &mystdout;//printf
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	90 93 95 06 	sts	0x0695, r25	; 0x800695 <__iob+0x3>
 416:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <__iob+0x2>

	//clock_prescale_set(clock_div_2);
    sei();
 41a:	78 94       	sei
	UART_Init(UBRR_VALUE);
 41c:	83 e3       	ldi	r24, 0x33	; 51
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 81 00 	call	0x102	; 0x102 <UART_Init>
	ADC_Init();
 424:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
 428:	0e 94 6d 00 	call	0xda	; 0xda <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 42c:	84 b1       	in	r24, 0x04	; 4
 42e:	86 60       	ori	r24, 0x06	; 6
 430:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 432:	8a b1       	in	r24, 0x0a	; 10
 434:	80 66       	ori	r24, 0x60	; 96
 436:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<PD3);
 438:	53 9a       	sbi	0x0a, 3	; 10

    while (1) 
    {
		if(finished){
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
 43a:	ca e1       	ldi	r28, 0x1A	; 26
 43c:	d1 e0       	ldi	r29, 0x01	; 1
	DDRD |= (1<<PD5)|(1<<PD6);
	DDRD |= (1<<PD3);

    while (1) 
    {
		if(finished){
 43e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <finished>
 442:	88 23       	and	r24, r24
 444:	11 f1       	breq	.+68     	; 0x48a <main+0x7c>
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
 446:	4a 81       	ldd	r20, Y+2	; 0x02
 448:	69 81       	ldd	r22, Y+1	; 0x01
 44a:	88 81       	ld	r24, Y
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 ae 00 	call	0x15c	; 0x15c <concatenate>
 456:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 45a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
			UART_Transmit(pumpParam);
 45e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 462:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 466:	0e 94 90 00 	call	0x120	; 0x120 <UART_Transmit>
			for(int i = 0; i < 38; i++){
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
				pumpingEffortArray[i] = 0;
 46e:	fc 01       	movw	r30, r24
 470:	e6 5e       	subi	r30, 0xE6	; 230
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	10 82       	st	Z, r1
    while (1) 
    {
		if(finished){
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
			UART_Transmit(pumpParam);
			for(int i = 0; i < 38; i++){
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	86 32       	cpi	r24, 0x26	; 38
 47a:	91 05       	cpc	r25, r1
 47c:	c1 f7       	brne	.-16     	; 0x46e <main+0x60>
				pumpingEffortArray[i] = 0;
			}

			finished = false;
 47e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <finished>
			rx_count = 0;
 482:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <rx_count+0x1>
 486:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <rx_count>
		}
	
		if(changePumpingEffort){
 48a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <changePumpingEffort>
			//voltageRHSIndex++;
		//}
		
		//TAKE 
			
    }
 48e:	d7 cf       	rjmp	.-82     	; 0x43e <main+0x30>

00000490 <__divmodhi4>:
 490:	97 fb       	bst	r25, 7
 492:	07 2e       	mov	r0, r23
 494:	16 f4       	brtc	.+4      	; 0x49a <__divmodhi4+0xa>
 496:	00 94       	com	r0
 498:	07 d0       	rcall	.+14     	; 0x4a8 <__divmodhi4_neg1>
 49a:	77 fd       	sbrc	r23, 7
 49c:	09 d0       	rcall	.+18     	; 0x4b0 <__divmodhi4_neg2>
 49e:	0e 94 89 02 	call	0x512	; 0x512 <__udivmodhi4>
 4a2:	07 fc       	sbrc	r0, 7
 4a4:	05 d0       	rcall	.+10     	; 0x4b0 <__divmodhi4_neg2>
 4a6:	3e f4       	brtc	.+14     	; 0x4b6 <__divmodhi4_exit>

000004a8 <__divmodhi4_neg1>:
 4a8:	90 95       	com	r25
 4aa:	81 95       	neg	r24
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	08 95       	ret

000004b0 <__divmodhi4_neg2>:
 4b0:	70 95       	com	r23
 4b2:	61 95       	neg	r22
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255

000004b6 <__divmodhi4_exit>:
 4b6:	08 95       	ret

000004b8 <__udivmodsi4>:
 4b8:	a1 e2       	ldi	r26, 0x21	; 33
 4ba:	1a 2e       	mov	r1, r26
 4bc:	aa 1b       	sub	r26, r26
 4be:	bb 1b       	sub	r27, r27
 4c0:	fd 01       	movw	r30, r26
 4c2:	0d c0       	rjmp	.+26     	; 0x4de <__udivmodsi4_ep>

000004c4 <__udivmodsi4_loop>:
 4c4:	aa 1f       	adc	r26, r26
 4c6:	bb 1f       	adc	r27, r27
 4c8:	ee 1f       	adc	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	a2 17       	cp	r26, r18
 4ce:	b3 07       	cpc	r27, r19
 4d0:	e4 07       	cpc	r30, r20
 4d2:	f5 07       	cpc	r31, r21
 4d4:	20 f0       	brcs	.+8      	; 0x4de <__udivmodsi4_ep>
 4d6:	a2 1b       	sub	r26, r18
 4d8:	b3 0b       	sbc	r27, r19
 4da:	e4 0b       	sbc	r30, r20
 4dc:	f5 0b       	sbc	r31, r21

000004de <__udivmodsi4_ep>:
 4de:	66 1f       	adc	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	88 1f       	adc	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	1a 94       	dec	r1
 4e8:	69 f7       	brne	.-38     	; 0x4c4 <__udivmodsi4_loop>
 4ea:	60 95       	com	r22
 4ec:	70 95       	com	r23
 4ee:	80 95       	com	r24
 4f0:	90 95       	com	r25
 4f2:	9b 01       	movw	r18, r22
 4f4:	ac 01       	movw	r20, r24
 4f6:	bd 01       	movw	r22, r26
 4f8:	cf 01       	movw	r24, r30
 4fa:	08 95       	ret

000004fc <__muluhisi3>:
 4fc:	0e 94 9d 02 	call	0x53a	; 0x53a <__umulhisi3>
 500:	a5 9f       	mul	r26, r21
 502:	90 0d       	add	r25, r0
 504:	b4 9f       	mul	r27, r20
 506:	90 0d       	add	r25, r0
 508:	a4 9f       	mul	r26, r20
 50a:	80 0d       	add	r24, r0
 50c:	91 1d       	adc	r25, r1
 50e:	11 24       	eor	r1, r1
 510:	08 95       	ret

00000512 <__udivmodhi4>:
 512:	aa 1b       	sub	r26, r26
 514:	bb 1b       	sub	r27, r27
 516:	51 e1       	ldi	r21, 0x11	; 17
 518:	07 c0       	rjmp	.+14     	; 0x528 <__udivmodhi4_ep>

0000051a <__udivmodhi4_loop>:
 51a:	aa 1f       	adc	r26, r26
 51c:	bb 1f       	adc	r27, r27
 51e:	a6 17       	cp	r26, r22
 520:	b7 07       	cpc	r27, r23
 522:	10 f0       	brcs	.+4      	; 0x528 <__udivmodhi4_ep>
 524:	a6 1b       	sub	r26, r22
 526:	b7 0b       	sbc	r27, r23

00000528 <__udivmodhi4_ep>:
 528:	88 1f       	adc	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	5a 95       	dec	r21
 52e:	a9 f7       	brne	.-22     	; 0x51a <__udivmodhi4_loop>
 530:	80 95       	com	r24
 532:	90 95       	com	r25
 534:	bc 01       	movw	r22, r24
 536:	cd 01       	movw	r24, r26
 538:	08 95       	ret

0000053a <__umulhisi3>:
 53a:	a2 9f       	mul	r26, r18
 53c:	b0 01       	movw	r22, r0
 53e:	b3 9f       	mul	r27, r19
 540:	c0 01       	movw	r24, r0
 542:	a3 9f       	mul	r26, r19
 544:	70 0d       	add	r23, r0
 546:	81 1d       	adc	r24, r1
 548:	11 24       	eor	r1, r1
 54a:	91 1d       	adc	r25, r1
 54c:	b2 9f       	mul	r27, r18
 54e:	70 0d       	add	r23, r0
 550:	81 1d       	adc	r24, r1
 552:	11 24       	eor	r1, r1
 554:	91 1d       	adc	r25, r1
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
