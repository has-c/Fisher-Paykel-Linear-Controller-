
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000110c  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000110c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007c9  00800108  00800108  000011a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022b6  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8b  00000000  00000000  000035fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc7  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00005050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007de  00000000  00000000  00005394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000daa  00000000  00000000  00005b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000691c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__vector_11>
      30:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e0       	ldi	r30, 0x0C	; 12
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	28 e0       	ldi	r18, 0x08	; 8
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3d       	cpi	r26, 0xD1	; 209
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 94 06 	call	0xd28	; 0xd28 <main>
      9e:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#define UPPER_LIMIT_VOLTAGE 5
#define OPAMP_VOLTAGE_GAIN 27

/**************************************************************ADC Intialisation**************************************************************/
void ADC_Init(){
	ADMUX &= ~(1<<REFS1) | ~(1<<REFS0);										//Select Reference Channel to be AREF
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);					//Enables ADC and adds a prescaler of 128 bits
      ae:	ea e7       	ldi	r30, 0x7A	; 122
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 81       	ld	r24, Z
      b4:	87 68       	ori	r24, 0x87	; 135
      b6:	80 83       	st	Z, r24
      b8:	08 95       	ret

000000ba <ADC_Read>:
}

/**************************************************************ADC Polling**************************************************************/
uint32_t ADC_Read(){
	while(!(ADCSRA &&(1<<ADIF)));
      ba:	ea e7       	ldi	r30, 0x7A	; 122
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	88 23       	and	r24, r24
      c2:	e9 f3       	breq	.-6      	; 0xbe <ADC_Read+0x4>
	return ADC;
      c4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      c8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
}
      d0:	08 95       	ret

000000d2 <ADC_Calculate>:

/**************************************************************ADC Conversion**************************************************************/
/*Note this could've done using floats but our microcontroller does not have a floating point unit and thus computations using floats is more 
computationally extensive. Hence we opted for unsigned integers and are forced to divide by powers of 10 in various places*/ 
uint32_t ADC_Calculate(){
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
	uint32_t  adcValue = ADC_Read();
      d6:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
      da:	9b 01       	movw	r18, r22
      dc:	ac 01       	movw	r20, r24
	uint32_t measuredVoltage = ((adcValue*1000)/ADC_RESOLUTION) * UPPER_LIMIT_VOLTAGE;						
	return measuredVoltage;
      de:	a8 ee       	ldi	r26, 0xE8	; 232
      e0:	b3 e0       	ldi	r27, 0x03	; 3
      e2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__muluhisi3>
      e6:	dc 01       	movw	r26, r24
      e8:	cb 01       	movw	r24, r22
      ea:	07 2e       	mov	r0, r23
      ec:	7a e0       	ldi	r23, 0x0A	; 10
      ee:	b6 95       	lsr	r27
      f0:	a7 95       	ror	r26
      f2:	97 95       	ror	r25
      f4:	87 95       	ror	r24
      f6:	7a 95       	dec	r23
      f8:	d1 f7       	brne	.-12     	; 0xee <ADC_Calculate+0x1c>
      fa:	70 2d       	mov	r23, r0
      fc:	8c 01       	movw	r16, r24
      fe:	9d 01       	movw	r18, r26
     100:	00 0f       	add	r16, r16
     102:	11 1f       	adc	r17, r17
     104:	22 1f       	adc	r18, r18
     106:	33 1f       	adc	r19, r19
     108:	00 0f       	add	r16, r16
     10a:	11 1f       	adc	r17, r17
     10c:	22 1f       	adc	r18, r18
     10e:	33 1f       	adc	r19, r19
     110:	bc 01       	movw	r22, r24
     112:	cd 01       	movw	r24, r26
     114:	60 0f       	add	r22, r16
     116:	71 1f       	adc	r23, r17
     118:	82 1f       	adc	r24, r18
     11a:	93 1f       	adc	r25, r19
}
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	08 95       	ret

00000122 <ADC_LHSVoltage>:

/**************************************************************Read LHS Voltage**************************************************************/
uint32_t ADC_LHSVoltage(){
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
     122:	ec e7       	ldi	r30, 0x7C	; 124
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     12c:	ea e7       	ldi	r30, 0x7A	; 122
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	80 64       	ori	r24, 0x40	; 64
     134:	80 83       	st	Z, r24
	uint32_t lhsVoltage = ADC_Calculate(); //calculates measured voltage 
     136:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_Calculate>
     13a:	9b 01       	movw	r18, r22
     13c:	ac 01       	movw	r20, r24
	return (lhsVoltage*OPAMP_VOLTAGE_GAIN/100); //return a 4 digit number that is the LHS voltage
     13e:	ab e1       	ldi	r26, 0x1B	; 27
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__muluhisi3>
     146:	24 e6       	ldi	r18, 0x64	; 100
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	40 e0       	ldi	r20, 0x00	; 0
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	0e 94 48 08 	call	0x1090	; 0x1090 <__udivmodsi4>
}
     152:	ca 01       	movw	r24, r20
     154:	b9 01       	movw	r22, r18
     156:	08 95       	ret

00000158 <ADC_RHSVoltage>:

/**************************************************************Read RHS Voltage**************************************************************/
uint32_t ADC_RHSVoltage(){
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1));
     158:	ec e7       	ldi	r30, 0x7C	; 124
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	81 7f       	andi	r24, 0xF1	; 241
     160:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX0);
     162:	80 81       	ld	r24, Z
     164:	81 60       	ori	r24, 0x01	; 1
     166:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     168:	ea e7       	ldi	r30, 0x7A	; 122
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	80 64       	ori	r24, 0x40	; 64
     170:	80 83       	st	Z, r24
	uint32_t rhsVoltage = ADC_Calculate();
     172:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_Calculate>
     176:	9b 01       	movw	r18, r22
     178:	ac 01       	movw	r20, r24
	return (rhsVoltage*OPAMP_VOLTAGE_GAIN/100);
     17a:	ab e1       	ldi	r26, 0x1B	; 27
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__muluhisi3>
     182:	24 e6       	ldi	r18, 0x64	; 100
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e0       	ldi	r20, 0x00	; 0
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	0e 94 48 08 	call	0x1090	; 0x1090 <__udivmodsi4>
}
     18e:	ca 01       	movw	r24, r20
     190:	b9 01       	movw	r22, r18
     192:	08 95       	ret

00000194 <PWM_Init>:
/**************************************************************Macros**************************************************************/
#define PWM_FREQUENCY 1000

/**************************************************************PWM Intialisation**************************************************************/
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);												//CTC mode and no prescaler
     194:	e1 e8       	ldi	r30, 0x81	; 129
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	8b 60       	ori	r24, 0x0B	; 11
     19c:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); 														//Enabling interrupts for match on OCR1A and OCR1B (trigger points)
     19e:	ef e6       	ldi	r30, 0x6F	; 111
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	86 60       	ori	r24, 0x06	; 6
     1a6:	80 83       	st	Z, r24
     1a8:	08 95       	ret

000001aa <PWM_Change>:
	
}

/**************************************************************PWM Intialisation**************************************************************/
void PWM_Change(uint16_t topValue, uint16_t bottomValue){									//Allows us to change the PWM Waveform by changing the trigger points OCR1A and OCR1B
	OCR1A = topValue;
     1aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
     1b2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     1b6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     1ba:	08 95       	ret

000001bc <PWM_ConvertTimerValueToDutyCycle>:
	
}

/**************************************************************PWM Conversion**************************************************************/
uint8_t PWM_ConvertTimerValueToDutyCycle(){													//Converts the timer value to a more user readable duty-cycle value 
	return ((dutyCycle*125)/100);
     1bc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <dutyCycle>
     1c0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <dutyCycle+0x1>
     1c4:	4d e7       	ldi	r20, 0x7D	; 125
     1c6:	48 9f       	mul	r20, r24
     1c8:	90 01       	movw	r18, r0
     1ca:	49 9f       	mul	r20, r25
     1cc:	30 0d       	add	r19, r0
     1ce:	11 24       	eor	r1, r1
     1d0:	36 95       	lsr	r19
     1d2:	27 95       	ror	r18
     1d4:	36 95       	lsr	r19
     1d6:	27 95       	ror	r18
     1d8:	ab e7       	ldi	r26, 0x7B	; 123
     1da:	b4 e1       	ldi	r27, 0x14	; 20
     1dc:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__umulhisi3>
     1e0:	96 95       	lsr	r25
     1e2:	87 95       	ror	r24
}
     1e4:	08 95       	ret

000001e6 <PWM_CalculateDeadTime>:

/**************************************************************PWM Dead-Time**************************************************************/
uint16_t PWM_CalculateDeadTime(){															//Calculates dead-zone to set up the PWM waveform 
	return (((5000/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; 
     1e6:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <frequency>
     1ea:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <frequency+0x1>
     1ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <noOfWaves>
     1f2:	88 e8       	ldi	r24, 0x88	; 136
     1f4:	93 e1       	ldi	r25, 0x13	; 19
     1f6:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodhi4>
     1fa:	62 1b       	sub	r22, r18
     1fc:	71 09       	sbc	r23, r1
}
     1fe:	8d e7       	ldi	r24, 0x7D	; 125
     200:	28 2f       	mov	r18, r24
     202:	26 9f       	mul	r18, r22
     204:	c0 01       	movw	r24, r0
     206:	27 9f       	mul	r18, r23
     208:	90 0d       	add	r25, r0
     20a:	11 24       	eor	r1, r1
     20c:	08 95       	ret

0000020e <UART_Init>:

/**************************************************************Decimal to ASCII Conversion**************************************************************/
uint8_t UART_ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
     20e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     212:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     216:	e1 ec       	ldi	r30, 0xC1	; 193
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 e9       	ldi	r24, 0x90	; 144
     21c:	80 83       	st	Z, r24
     21e:	80 81       	ld	r24, Z
     220:	88 64       	ori	r24, 0x48	; 72
     222:	80 83       	st	Z, r24
     224:	86 e0       	ldi	r24, 0x06	; 6
     226:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     22a:	08 95       	ret

0000022c <UART_Transmit>:
     22c:	e1 ec       	ldi	r30, 0xC1	; 193
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	90 81       	ld	r25, Z
     232:	9f 7e       	andi	r25, 0xEF	; 239
     234:	90 83       	st	Z, r25
     236:	90 81       	ld	r25, Z
     238:	9f 77       	andi	r25, 0x7F	; 127
     23a:	90 83       	st	Z, r25
     23c:	e0 ec       	ldi	r30, 0xC0	; 192
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	90 81       	ld	r25, Z
     242:	99 23       	and	r25, r25
     244:	e9 f3       	breq	.-6      	; 0x240 <UART_Transmit+0x14>
     246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     24a:	08 95       	ret

0000024c <UART_InterpretPumpingEffort>:

/**************************************************************Mass-Flow Control Value Interpretation**************************************************************/
/*Puropose: This function allows the controller to interpret the mass-flow control (MFC) value sent by the master. This function changes duty cyle in an effort 
to adjust stroke length which is proportionally related to exerted pumping effort*/
void UART_InterpretPumpingEffort(){
	if(pumpingEffort==255){																					//MFC at maximum
     24c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     250:	8f 3f       	cpi	r24, 0xFF	; 255
     252:	a9 f4       	brne	.+42     	; 0x27e <UART_InterpretPumpingEffort+0x32>
		if(!isOn){
     254:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isOn>
     258:	81 11       	cpse	r24, r1
     25a:	08 c0       	rjmp	.+16     	; 0x26c <UART_InterpretPumpingEffort+0x20>
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
     25c:	e4 e6       	ldi	r30, 0x64	; 100
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	80 71       	andi	r24, 0x10	; 16
     264:	80 83       	st	Z, r24
			power_all_enable();
			isOn = true;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <isOn>
		}
		dutyCycle = 99;
     26c:	83 e6       	ldi	r24, 0x63	; 99
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <dutyCycle+0x1>
     274:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <dutyCycle>
		lowPowerMode = false;
     278:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lowPowerMode>
     27c:	08 95       	ret
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){														
     27e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     282:	88 23       	and	r24, r24
     284:	91 f1       	breq	.+100    	; 0x2ea <UART_InterpretPumpingEffort+0x9e>
     286:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     28a:	83 3b       	cpi	r24, 0xB3	; 179
     28c:	70 f5       	brcc	.+92     	; 0x2ea <UART_InterpretPumpingEffort+0x9e>
		if(!isOn){
     28e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isOn>
     292:	81 11       	cpse	r24, r1
     294:	08 c0       	rjmp	.+16     	; 0x2a6 <UART_InterpretPumpingEffort+0x5a>
     296:	e4 e6       	ldi	r30, 0x64	; 100
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	80 71       	andi	r24, 0x10	; 16
     29e:	80 83       	st	Z, r24
			power_all_enable();
			isOn = true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <isOn>
		}
		if(!lowPowerMode){
     2a6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     2aa:	81 11       	cpse	r24, r1
     2ac:	0a c0       	rjmp	.+20     	; 0x2c2 <UART_InterpretPumpingEffort+0x76>
			frequency /= 2;																					//Frequency is halved to maintain the current operating frequency
     2ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <frequency>
     2b2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <frequency+0x1>
     2b6:	96 95       	lsr	r25
     2b8:	87 95       	ror	r24
     2ba:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <frequency+0x1>
     2be:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <frequency>
		}
		lowPowerMode = true; 																				//Turns on low power mode meaning we are only using one pair of drivers
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lowPowerMode>
		dutyCycle = (LOW_POWER_PROPORTIONALITY_CONSTANT*pumpingEffort + LOW_POWER_INTERCEPT)/100;			//Low power relationship between duty cycle and pumping effort - found through analysis
     2c8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     2cc:	2e e1       	ldi	r18, 0x1E	; 30
     2ce:	82 9f       	mul	r24, r18
     2d0:	c0 01       	movw	r24, r0
     2d2:	11 24       	eor	r1, r1
     2d4:	8c 5e       	subi	r24, 0xEC	; 236
     2d6:	9a 4f       	sbci	r25, 0xFA	; 250
     2d8:	64 e6       	ldi	r22, 0x64	; 100
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	0e 94 34 08 	call	0x1068	; 0x1068 <__divmodhi4>
     2e0:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <dutyCycle+0x1>
     2e4:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <dutyCycle>
     2e8:	08 95       	ret
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){													//Higher MFC range, 
     2ea:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     2ee:	83 3b       	cpi	r24, 0xB3	; 179
     2f0:	78 f1       	brcs	.+94     	; 0x350 <UART_InterpretPumpingEffort+0x104>
     2f2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     2f6:	8f 3f       	cpi	r24, 0xFF	; 255
     2f8:	59 f1       	breq	.+86     	; 0x350 <UART_InterpretPumpingEffort+0x104>
		if(!isOn){
     2fa:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isOn>
     2fe:	81 11       	cpse	r24, r1
     300:	08 c0       	rjmp	.+16     	; 0x312 <UART_InterpretPumpingEffort+0xc6>
     302:	e4 e6       	ldi	r30, 0x64	; 100
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	80 71       	andi	r24, 0x10	; 16
     30a:	80 83       	st	Z, r24
			power_all_enable();
			isOn = true;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <isOn>
		}
		if(lowPowerMode){
     312:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     316:	88 23       	and	r24, r24
     318:	51 f0       	breq	.+20     	; 0x32e <UART_InterpretPumpingEffort+0xe2>
			frequency *= 2;																					//Frequency is doubled to maintain the current operating frequency
     31a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <frequency>
     31e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <frequency+0x1>
     322:	88 0f       	add	r24, r24
     324:	99 1f       	adc	r25, r25
     326:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <frequency+0x1>
     32a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <frequency>
		}
		lowPowerMode = false;
     32e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lowPowerMode>
		dutyCycle = HIGH_POWER_PROPORTIONALITY_CONSTANT*pumpingEffort/100;									//High power relationship between duty cycle and pumping effort - again found through analysis
     332:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     336:	20 e2       	ldi	r18, 0x20	; 32
     338:	82 9f       	mul	r24, r18
     33a:	c0 01       	movw	r24, r0
     33c:	11 24       	eor	r1, r1
     33e:	64 e6       	ldi	r22, 0x64	; 100
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	0e 94 34 08 	call	0x1068	; 0x1068 <__divmodhi4>
     346:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <dutyCycle+0x1>
     34a:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <dutyCycle>
     34e:	08 95       	ret
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
     350:	e4 e6       	ldi	r30, 0x64	; 100
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	8f 6e       	ori	r24, 0xEF	; 239
     358:	80 83       	st	Z, r24
	}else{ 																									//When a zero or other undefined character is received through the master turn off the coil
		power_all_disable(); 																				//Disable all units																			
		power_usart0_enable();
     35a:	80 81       	ld	r24, Z
     35c:	8d 7f       	andi	r24, 0xFD	; 253
     35e:	80 83       	st	Z, r24
		isOn = false;																				//Enable UART so that communication can still occur
     360:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <isOn>
		dutyCycle = 0;																						
     364:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <dutyCycle+0x1>
     368:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <dutyCycle>
     36c:	08 95       	ret

0000036e <MFCmodulator>:

}

/**************************************************************Mass Flow Control**************************************************************/

void MFCmodulator(uint8_t requiredValue, uint8_t currentValue){
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	18 2f       	mov	r17, r24
     37e:	d6 2f       	mov	r29, r22
	uint8_t firstDigit = 0;
	uint8_t secondDigit = 0;
	uint8_t thirdDigit = 0;
																											//Shown below are the ASCII conversions
	UART_Transmit(13); 																						//carriage return
     380:	8d e0       	ldi	r24, 0x0D	; 13
     382:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(123); 																					//{
     386:	8b e7       	ldi	r24, 0x7B	; 123
     388:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); 																						//line feed 
     38c:	8a e0       	ldi	r24, 0x0A	; 10
     38e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     392:	8d e0       	ldi	r24, 0x0D	; 13
     394:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//LCC Identifier 
	UART_Transmit(34); 																						//"
     398:	82 e2       	ldi	r24, 0x22	; 34
     39a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(51);																						//3
     39e:	83 e3       	ldi	r24, 0x33	; 51
     3a0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     3a4:	82 e2       	ldi	r24, 0x22	; 34
     3a6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     3aa:	8a e3       	ldi	r24, 0x3A	; 58
     3ac:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>

																											//MFC 
	UART_Transmit(10); 																						//Line feed
     3b0:	8a e0       	ldi	r24, 0x0A	; 10
     3b2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     3b6:	8d e0       	ldi	r24, 0x0D	; 13
     3b8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(123);																						//{
     3bc:	8b e7       	ldi	r24, 0x7B	; 123
     3be:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10);																						//Line feed
     3c2:	8a e0       	ldi	r24, 0x0A	; 10
     3c4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     3c8:	8d e0       	ldi	r24, 0x0D	; 13
     3ca:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//MFC letter setup
	UART_Transmit(34); 																						//'
     3ce:	82 e2       	ldi	r24, 0x22	; 34
     3d0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(109);																						//m
     3d4:	8d e6       	ldi	r24, 0x6D	; 109
     3d6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(102);																						//f
     3da:	86 e6       	ldi	r24, 0x66	; 102
     3dc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(99);																						//c
     3e0:	83 e6       	ldi	r24, 0x63	; 99
     3e2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     3e6:	82 e2       	ldi	r24, 0x22	; 34
     3e8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     3ec:	8a e3       	ldi	r24, 0x3A	; 58
     3ee:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	 
																											//MFC Values 
	UART_Transmit(123); 																					//{
     3f2:	8b e7       	ldi	r24, 0x7B	; 123
     3f4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     3f8:	82 e2       	ldi	r24, 0x22	; 34
     3fa:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     3fe:	82 e7       	ldi	r24, 0x72	; 114
     400:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(101);																						//e
     404:	85 e6       	ldi	r24, 0x65	; 101
     406:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(113);																						//q
     40a:	81 e7       	ldi	r24, 0x71	; 113
     40c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     410:	82 e2       	ldi	r24, 0x22	; 34
     412:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     416:	8a e3       	ldi	r24, 0x3A	; 58
     418:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     41c:	82 e2       	ldi	r24, 0x22	; 34
     41e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit the required MFC value 
	firstDigit = requiredValue/100;																			//The dividing by powers of 10 and multiplying by powers of 10 is necessary to extract a digit from a number 
     422:	c9 e2       	ldi	r28, 0x29	; 41
     424:	1c 9f       	mul	r17, r28
     426:	21 2d       	mov	r18, r1
     428:	11 24       	eor	r1, r1
     42a:	22 95       	swap	r18
     42c:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (requiredValue-(firstDigit*100))/10;
     42e:	0f 2e       	mov	r0, r31
     430:	fc e9       	ldi	r31, 0x9C	; 156
     432:	df 2e       	mov	r13, r31
     434:	f0 2d       	mov	r31, r0
     436:	3d 2d       	mov	r19, r13
     438:	32 03       	mulsu	r19, r18
     43a:	c0 01       	movw	r24, r0
     43c:	11 24       	eor	r1, r1
     43e:	81 0f       	add	r24, r17
     440:	91 1d       	adc	r25, r1
     442:	0f 2e       	mov	r0, r31
     444:	fa e0       	ldi	r31, 0x0A	; 10
     446:	ef 2e       	mov	r14, r31
     448:	f1 2c       	mov	r15, r1
     44a:	f0 2d       	mov	r31, r0
     44c:	b7 01       	movw	r22, r14
     44e:	0e 94 34 08 	call	0x1068	; 0x1068 <__divmodhi4>
     452:	06 2f       	mov	r16, r22
     454:	10 5d       	subi	r17, 0xD0	; 208
     456:	2d 9d       	mul	r18, r13
     458:	10 0d       	add	r17, r0
     45a:	11 24       	eor	r1, r1
	thirdDigit = requiredValue - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     45c:	80 e3       	ldi	r24, 0x30	; 48
     45e:	82 0f       	add	r24, r18
     460:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit)); 
     464:	80 e3       	ldi	r24, 0x30	; 48
     466:	80 0f       	add	r24, r16
     468:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     46c:	00 0f       	add	r16, r16
     46e:	80 2f       	mov	r24, r16
     470:	88 0f       	add	r24, r24
     472:	88 0f       	add	r24, r24
     474:	08 0f       	add	r16, r24
     476:	81 2f       	mov	r24, r17
     478:	80 1b       	sub	r24, r16
     47a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     47e:	82 e2       	ldi	r24, 0x22	; 34
     480:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);																						//,
     484:	8c e2       	ldi	r24, 0x2C	; 44
     486:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	

	UART_Transmit(34);																						//"
     48a:	82 e2       	ldi	r24, 0x22	; 34
     48c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(99);																						//c
     490:	83 e6       	ldi	r24, 0x63	; 99
     492:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(117);																						//u
     496:	85 e7       	ldi	r24, 0x75	; 117
     498:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     49c:	82 e7       	ldi	r24, 0x72	; 114
     49e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     4a2:	82 e2       	ldi	r24, 0x22	; 34
     4a4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     4a8:	8a e3       	ldi	r24, 0x3A	; 58
     4aa:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     4ae:	82 e2       	ldi	r24, 0x22	; 34
     4b0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit current MFC value
	firstDigit = currentValue/100;																			//The dividing by powers of 10 and multiplying by powers of 10 is necessary to extract a digit from a number 
     4b4:	dc 9f       	mul	r29, r28
     4b6:	21 2d       	mov	r18, r1
     4b8:	11 24       	eor	r1, r1
     4ba:	22 95       	swap	r18
     4bc:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (currentValue-(firstDigit*100))/10;
     4be:	3d 2d       	mov	r19, r13
     4c0:	32 03       	mulsu	r19, r18
     4c2:	c0 01       	movw	r24, r0
     4c4:	11 24       	eor	r1, r1
     4c6:	8d 0f       	add	r24, r29
     4c8:	91 1d       	adc	r25, r1
     4ca:	b7 01       	movw	r22, r14
     4cc:	0e 94 34 08 	call	0x1068	; 0x1068 <__divmodhi4>
     4d0:	c6 2f       	mov	r28, r22
     4d2:	d0 5d       	subi	r29, 0xD0	; 208
     4d4:	2d 9d       	mul	r18, r13
     4d6:	d0 0d       	add	r29, r0
     4d8:	11 24       	eor	r1, r1
	thirdDigit = currentValue - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     4da:	80 e3       	ldi	r24, 0x30	; 48
     4dc:	82 0f       	add	r24, r18
     4de:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     4e2:	80 e3       	ldi	r24, 0x30	; 48
     4e4:	8c 0f       	add	r24, r28
     4e6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     4ea:	cc 0f       	add	r28, r28
     4ec:	8c 2f       	mov	r24, r28
     4ee:	88 0f       	add	r24, r24
     4f0:	88 0f       	add	r24, r24
     4f2:	c8 0f       	add	r28, r24
     4f4:	8d 2f       	mov	r24, r29
     4f6:	8c 1b       	sub	r24, r28
     4f8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
	UART_Transmit(34);																						//"
     4fc:	82 e2       	ldi	r24, 0x22	; 34
     4fe:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(125);																						//}
     502:	8d e7       	ldi	r24, 0x7D	; 125
     504:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);																						//,
     508:	8c e2       	ldi	r24, 0x2C	; 44
     50a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); 																						//Line feed
     50e:	8a e0       	ldi	r24, 0x0A	; 10
     510:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     514:	8d e0       	ldi	r24, 0x0D	; 13
     516:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	 
	
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	df 90       	pop	r13
     528:	08 95       	ret

0000052a <VERmodulator>:

/**************************************************************Version Number**************************************************************/
void VERmodulator(){
	UART_Transmit(34); 																						//"
     52a:	82 e2       	ldi	r24, 0x22	; 34
     52c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(118);																						//v
     530:	86 e7       	ldi	r24, 0x76	; 118
     532:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(101);																						//e
     536:	85 e6       	ldi	r24, 0x65	; 101
     538:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     53c:	82 e7       	ldi	r24, 0x72	; 114
     53e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     542:	82 e2       	ldi	r24, 0x22	; 34
     544:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     548:	8a e3       	ldi	r24, 0x3A	; 58
     54a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     54e:	82 e2       	ldi	r24, 0x22	; 34
     550:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(49);																						//1
     554:	81 e3       	ldi	r24, 0x31	; 49
     556:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(46);																						//.
     55a:	8e e2       	ldi	r24, 0x2E	; 46
     55c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(50);																						//2
     560:	82 e3       	ldi	r24, 0x32	; 50
     562:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(46);																						//.
     566:	8e e2       	ldi	r24, 0x2E	; 46
     568:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(51);																						//3
     56c:	83 e3       	ldi	r24, 0x33	; 51
     56e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     572:	82 e2       	ldi	r24, 0x22	; 34
     574:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);																						//,
     578:	8c e2       	ldi	r24, 0x2C	; 44
     57a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); 																						//Line feed 
     57e:	8a e0       	ldi	r24, 0x0A	; 10
     580:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     584:	8d e0       	ldi	r24, 0x0D	; 13
     586:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
     58a:	08 95       	ret

0000058c <PARAMmodulator>:
	 
}

/**************************************************************Parameter Modulator**************************************************************/
void PARAMmodulator(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current){
     58c:	8f 92       	push	r8
     58e:	9f 92       	push	r9
     590:	af 92       	push	r10
     592:	bf 92       	push	r11
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	c8 2f       	mov	r28, r24
     5a6:	96 2e       	mov	r9, r22
     5a8:	69 01       	movw	r12, r18
     5aa:	7a 01       	movw	r14, r20
	uint8_t firstDigit; 
	uint8_t secondDigit;
	uint8_t thirdDigit;
	uint8_t fourthDigit;

	UART_Transmit(34);																						//"
     5ac:	82 e2       	ldi	r24, 0x22	; 34
     5ae:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(112);																						//p
     5b2:	80 e7       	ldi	r24, 0x70	; 112
     5b4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(97);																						//a
     5b8:	81 e6       	ldi	r24, 0x61	; 97
     5ba:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     5be:	82 e7       	ldi	r24, 0x72	; 114
     5c0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(97);																						//a
     5c4:	81 e6       	ldi	r24, 0x61	; 97
     5c6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(109);																						//m
     5ca:	8d e6       	ldi	r24, 0x6D	; 109
     5cc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     5d0:	82 e2       	ldi	r24, 0x22	; 34
     5d2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     5d6:	8a e3       	ldi	r24, 0x3A	; 58
     5d8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(123);																						//{
     5dc:	8b e7       	ldi	r24, 0x7B	; 123
     5de:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>

																											//Transmit Parameters
	UART_Transmit(34); 																						//"
     5e2:	82 e2       	ldi	r24, 0x22	; 34
     5e4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(112); 																					//p
     5e8:	80 e7       	ldi	r24, 0x70	; 112
     5ea:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(119); 																					//w
     5ee:	87 e7       	ldi	r24, 0x77	; 119
     5f0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r 
     5f4:	82 e7       	ldi	r24, 0x72	; 114
     5f6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     5fa:	82 e2       	ldi	r24, 0x22	; 34
     5fc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58); 																						//:
     600:	8a e3       	ldi	r24, 0x3A	; 58
     602:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     606:	82 e2       	ldi	r24, 0x22	; 34
     608:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit Power 
	firstDigit = averagePower/100;																			//The dividing by powers of 10 and multiplying by powers of 10 is necessary to extract a digit from a number 
     60c:	d9 e2       	ldi	r29, 0x29	; 41
     60e:	cd 9f       	mul	r28, r29
     610:	21 2d       	mov	r18, r1
     612:	11 24       	eor	r1, r1
     614:	22 95       	swap	r18
     616:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (averagePower-(firstDigit*100))/10;
     618:	1c e9       	ldi	r17, 0x9C	; 156
     61a:	12 03       	mulsu	r17, r18
     61c:	c0 01       	movw	r24, r0
     61e:	11 24       	eor	r1, r1
     620:	8c 0f       	add	r24, r28
     622:	91 1d       	adc	r25, r1
     624:	0f 2e       	mov	r0, r31
     626:	fa e0       	ldi	r31, 0x0A	; 10
     628:	af 2e       	mov	r10, r31
     62a:	b1 2c       	mov	r11, r1
     62c:	f0 2d       	mov	r31, r0
     62e:	b5 01       	movw	r22, r10
     630:	0e 94 34 08 	call	0x1068	; 0x1068 <__divmodhi4>
     634:	86 2e       	mov	r8, r22
     636:	c0 5d       	subi	r28, 0xD0	; 208
     638:	21 9f       	mul	r18, r17
     63a:	c0 0d       	add	r28, r0
     63c:	11 24       	eor	r1, r1
	thirdDigit = averagePower - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     63e:	80 e3       	ldi	r24, 0x30	; 48
     640:	82 0f       	add	r24, r18
     642:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     646:	80 e3       	ldi	r24, 0x30	; 48
     648:	88 0d       	add	r24, r8
     64a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(46); 																						//Decimal point
     64e:	8e e2       	ldi	r24, 0x2E	; 46
     650:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     654:	88 0c       	add	r8, r8
     656:	88 2d       	mov	r24, r8
     658:	88 0f       	add	r24, r24
     65a:	88 0f       	add	r24, r24
     65c:	88 0e       	add	r8, r24
     65e:	8c 2f       	mov	r24, r28
     660:	88 19       	sub	r24, r8
     662:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(87); 																						//W
     666:	87 e5       	ldi	r24, 0x57	; 87
     668:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     66c:	82 e2       	ldi	r24, 0x22	; 34
     66e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44); 																						//,
     672:	8c e2       	ldi	r24, 0x2C	; 44
     674:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	 
	 
	
																											//Transmit Frequency
	UART_Transmit(34); 																						//"
     678:	82 e2       	ldi	r24, 0x22	; 34
     67a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(102);																						//f
     67e:	86 e6       	ldi	r24, 0x66	; 102
     680:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     684:	82 e7       	ldi	r24, 0x72	; 114
     686:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(101);																						//e
     68a:	85 e6       	ldi	r24, 0x65	; 101
     68c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(113);																						//q
     690:	81 e7       	ldi	r24, 0x71	; 113
     692:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     696:	82 e2       	ldi	r24, 0x22	; 34
     698:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     69c:	8a e3       	ldi	r24, 0x3A	; 58
     69e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     6a2:	82 e2       	ldi	r24, 0x22	; 34
     6a4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	firstDigit = operatingFrequency/10;																		//The dividing by powers of 10 and multiplying by powers of 10 is necessary to extract a digit from a number 
     6a8:	cd ec       	ldi	r28, 0xCD	; 205
     6aa:	9c 9e       	mul	r9, r28
     6ac:	c1 2d       	mov	r28, r1
     6ae:	11 24       	eor	r1, r1
     6b0:	c6 95       	lsr	r28
     6b2:	c6 95       	lsr	r28
     6b4:	c6 95       	lsr	r28
	secondDigit = operatingFrequency-(firstDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     6b6:	80 e3       	ldi	r24, 0x30	; 48
     6b8:	8c 0f       	add	r24, r28
     6ba:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     6be:	cc 0f       	add	r28, r28
     6c0:	8c 2f       	mov	r24, r28
     6c2:	88 0f       	add	r24, r24
     6c4:	88 0f       	add	r24, r24
     6c6:	c8 0f       	add	r28, r24
     6c8:	80 e3       	ldi	r24, 0x30	; 48
     6ca:	89 0d       	add	r24, r9
     6cc:	8c 1b       	sub	r24, r28
     6ce:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(72);																						//H
     6d2:	88 e4       	ldi	r24, 0x48	; 72
     6d4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(122);																						//z
     6d8:	8a e7       	ldi	r24, 0x7A	; 122
     6da:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     6de:	82 e2       	ldi	r24, 0x22	; 34
     6e0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);																						//,
     6e4:	8c e2       	ldi	r24, 0x2C	; 44
     6e6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit Current
	UART_Transmit(34); 																						//"
     6ea:	82 e2       	ldi	r24, 0x22	; 34
     6ec:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(99); 																						//c
     6f0:	83 e6       	ldi	r24, 0x63	; 99
     6f2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(117); 																					//u
     6f6:	85 e7       	ldi	r24, 0x75	; 117
     6f8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     6fc:	82 e7       	ldi	r24, 0x72	; 114
     6fe:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     702:	82 e7       	ldi	r24, 0x72	; 114
     704:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     708:	82 e2       	ldi	r24, 0x22	; 34
     70a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58); 																						//:
     70e:	8a e3       	ldi	r24, 0x3A	; 58
     710:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     714:	82 e2       	ldi	r24, 0x22	; 34
     716:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	firstDigit = current/100;																				//The dividing and multiplying by powers of 10 below is necessary to extract a digit from a number 
     71a:	0d 9f       	mul	r16, r29
     71c:	21 2d       	mov	r18, r1
     71e:	11 24       	eor	r1, r1
     720:	22 95       	swap	r18
     722:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (current-(firstDigit*100))/10;										
     724:	12 03       	mulsu	r17, r18
     726:	c0 01       	movw	r24, r0
     728:	11 24       	eor	r1, r1
     72a:	80 0f       	add	r24, r16
     72c:	91 1d       	adc	r25, r1
     72e:	b5 01       	movw	r22, r10
     730:	0e 94 34 08 	call	0x1068	; 0x1068 <__divmodhi4>
     734:	c6 2f       	mov	r28, r22
     736:	00 5d       	subi	r16, 0xD0	; 208
     738:	21 9f       	mul	r18, r17
     73a:	00 0d       	add	r16, r0
     73c:	11 24       	eor	r1, r1
	thirdDigit = current - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     73e:	80 e3       	ldi	r24, 0x30	; 48
     740:	82 0f       	add	r24, r18
     742:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(46); 																						//decimal point												
     746:	8e e2       	ldi	r24, 0x2E	; 46
     748:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     74c:	80 e3       	ldi	r24, 0x30	; 48
     74e:	8c 0f       	add	r24, r28
     750:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     754:	cc 0f       	add	r28, r28
     756:	8c 2f       	mov	r24, r28
     758:	88 0f       	add	r24, r24
     75a:	88 0f       	add	r24, r24
     75c:	c8 0f       	add	r28, r24
     75e:	80 2f       	mov	r24, r16
     760:	8c 1b       	sub	r24, r28
     762:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(65); 																						//A
     766:	81 e4       	ldi	r24, 0x41	; 65
     768:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     76c:	82 e2       	ldi	r24, 0x22	; 34
     76e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44); 																						//,
     772:	8c e2       	ldi	r24, 0x2C	; 44
     774:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit average voltage across the coil
	 
	UART_Transmit(34); 																						//"
     778:	82 e2       	ldi	r24, 0x22	; 34
     77a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(118); 																					//v
     77e:	86 e7       	ldi	r24, 0x76	; 118
     780:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(111); 																					//o
     784:	8f e6       	ldi	r24, 0x6F	; 111
     786:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(108); 																					//l
     78a:	8c e6       	ldi	r24, 0x6C	; 108
     78c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(116); 																					//t
     790:	84 e7       	ldi	r24, 0x74	; 116
     792:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     796:	82 e2       	ldi	r24, 0x22	; 34
     798:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58); 																						//:
     79c:	8a e3       	ldi	r24, 0x3A	; 58
     79e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     7a2:	82 e2       	ldi	r24, 0x22	; 34
     7a4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	firstDigit = appliedVoltage/1000;																		//The dividing and multiplying by powers of 10 below is necessary to extract a digit from a number 
     7a8:	c7 01       	movw	r24, r14
     7aa:	b6 01       	movw	r22, r12
     7ac:	28 ee       	ldi	r18, 0xE8	; 232
     7ae:	33 e0       	ldi	r19, 0x03	; 3
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	0e 94 48 08 	call	0x1090	; 0x1090 <__udivmodsi4>
     7b8:	12 2f       	mov	r17, r18
	secondDigit = (appliedVoltage-(firstDigit*1000))/100;												
     7ba:	28 ee       	ldi	r18, 0xE8	; 232
     7bc:	33 e0       	ldi	r19, 0x03	; 3
     7be:	12 9f       	mul	r17, r18
     7c0:	c0 01       	movw	r24, r0
     7c2:	13 9f       	mul	r17, r19
     7c4:	90 0d       	add	r25, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	09 2e       	mov	r0, r25
     7ca:	00 0c       	add	r0, r0
     7cc:	aa 0b       	sbc	r26, r26
     7ce:	bb 0b       	sbc	r27, r27
     7d0:	46 01       	movw	r8, r12
     7d2:	57 01       	movw	r10, r14
     7d4:	88 1a       	sub	r8, r24
     7d6:	99 0a       	sbc	r9, r25
     7d8:	aa 0a       	sbc	r10, r26
     7da:	bb 0a       	sbc	r11, r27
     7dc:	c5 01       	movw	r24, r10
     7de:	b4 01       	movw	r22, r8
     7e0:	24 e6       	ldi	r18, 0x64	; 100
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	0e 94 48 08 	call	0x1090	; 0x1090 <__udivmodsi4>
     7ec:	d2 2f       	mov	r29, r18
	thirdDigit = (appliedVoltage - (firstDigit*1000) - (secondDigit*100))/10;
     7ee:	04 e6       	ldi	r16, 0x64	; 100
     7f0:	02 9f       	mul	r16, r18
     7f2:	c0 01       	movw	r24, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	09 2e       	mov	r0, r25
     7f8:	00 0c       	add	r0, r0
     7fa:	aa 0b       	sbc	r26, r26
     7fc:	bb 0b       	sbc	r27, r27
     7fe:	a5 01       	movw	r20, r10
     800:	94 01       	movw	r18, r8
     802:	28 1b       	sub	r18, r24
     804:	39 0b       	sbc	r19, r25
     806:	4a 0b       	sbc	r20, r26
     808:	5b 0b       	sbc	r21, r27
     80a:	ca 01       	movw	r24, r20
     80c:	b9 01       	movw	r22, r18
     80e:	2a e0       	ldi	r18, 0x0A	; 10
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	0e 94 48 08 	call	0x1090	; 0x1090 <__udivmodsi4>
     81a:	c2 2f       	mov	r28, r18
     81c:	8c 2d       	mov	r24, r12
     81e:	38 e1       	ldi	r19, 0x18	; 24
     820:	13 9f       	mul	r17, r19
     822:	80 0d       	add	r24, r0
     824:	11 24       	eor	r1, r1
     826:	80 5d       	subi	r24, 0xD0	; 208
     828:	c8 2e       	mov	r12, r24
     82a:	0d 9f       	mul	r16, r29
     82c:	c0 18       	sub	r12, r0
     82e:	11 24       	eor	r1, r1
	fourthDigit = appliedVoltage -(firstDigit*1000) - (secondDigit*100) - (thirdDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     830:	80 e3       	ldi	r24, 0x30	; 48
     832:	81 0f       	add	r24, r17
     834:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     838:	80 e3       	ldi	r24, 0x30	; 48
     83a:	8d 0f       	add	r24, r29
     83c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(46); 																						//decimal point
     840:	8e e2       	ldi	r24, 0x2E	; 46
     842:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     846:	80 e3       	ldi	r24, 0x30	; 48
     848:	8c 0f       	add	r24, r28
     84a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(fourthDigit));
     84e:	cc 0f       	add	r28, r28
     850:	8c 2f       	mov	r24, r28
     852:	88 0f       	add	r24, r24
     854:	88 0f       	add	r24, r24
     856:	c8 0f       	add	r28, r24
     858:	8c 2d       	mov	r24, r12
     85a:	8c 1b       	sub	r24, r28
     85c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(86); 																						//V
     860:	86 e5       	ldi	r24, 0x56	; 86
     862:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     866:	82 e2       	ldi	r24, 0x22	; 34
     868:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
	 
	UART_Transmit(125); 																					//}
     86c:	8d e7       	ldi	r24, 0x7D	; 125
     86e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);																						//,
     872:	8c e2       	ldi	r24, 0x2C	; 44
     874:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); 																						//line feed
     878:	8a e0       	ldi	r24, 0x0A	; 10
     87a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     87e:	8d e0       	ldi	r24, 0x0D	; 13
     880:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	 
}
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	9f 90       	pop	r9
     89a:	8f 90       	pop	r8
     89c:	08 95       	ret

0000089e <ERRORmodulator>:

/**************************************************************Error Modulator**************************************************************/
void ERRORmodulator(bool jamErrorFlag, bool collisionErrorFlag){  
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	d8 2f       	mov	r29, r24
     8a4:	c6 2f       	mov	r28, r22
	if(clearErrorFlag){																						//acknowledge that the 'clear error' command was received from the user and obeyed by the controller
     8a6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <clearErrorFlag>
     8aa:	88 23       	and	r24, r24
     8ac:	51 f1       	breq	.+84     	; 0x902 <__stack+0x3>
		UART_Transmit(34); 																					//"
     8ae:	82 e2       	ldi	r24, 0x22	; 34
     8b0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(99); 																					//c
     8b4:	83 e6       	ldi	r24, 0x63	; 99
     8b6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(108); 																				//l
     8ba:	8c e6       	ldi	r24, 0x6C	; 108
     8bc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(114); 																				//r
     8c0:	82 e7       	ldi	r24, 0x72	; 114
     8c2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(34); 																					//"
     8c6:	82 e2       	ldi	r24, 0x22	; 34
     8c8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(58); 																					//:
     8cc:	8a e3       	ldi	r24, 0x3A	; 58
     8ce:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(34); 																					//"
     8d2:	82 e2       	ldi	r24, 0x22	; 34
     8d4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(101); 																				//e
     8d8:	85 e6       	ldi	r24, 0x65	; 101
     8da:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(119); 																				//w
     8de:	87 e7       	ldi	r24, 0x77	; 119
     8e0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(34); 																					//"
     8e4:	82 e2       	ldi	r24, 0x22	; 34
     8e6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(44); 																					//,
     8ea:	8c e2       	ldi	r24, 0x2C	; 44
     8ec:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(10); 																					//line feed
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(13); 																					//carriage return
     8f6:	8d e0       	ldi	r24, 0x0D	; 13
     8f8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		clearErrorFlag = false;
     8fc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <clearErrorFlag>
     900:	36 c0       	rjmp	.+108    	; 0x96e <__stack+0x6f>
	}else{
		UART_Transmit(10); 																					//line feed
     902:	8a e0       	ldi	r24, 0x0A	; 10
     904:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(13); 																					//carriage return
     908:	8d e0       	ldi	r24, 0x0D	; 13
     90a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		
		if(collisionErrorFlag || jamErrorFlag) {															//if either error occurs then send 
     90e:	c1 11       	cpse	r28, r1
     910:	7c c0       	rjmp	.+248    	; 0xa0a <__stack+0x10b>
     912:	d1 11       	cpse	r29, r1
     914:	45 c0       	rjmp	.+138    	; 0x9a0 <__stack+0xa1>
     916:	25 c0       	rjmp	.+74     	; 0x962 <__stack+0x63>
					UART_Transmit(44); 																		//,
				}
			}

			if(collisionErrorFlag){ 																		//Compressor Colliding
				UART_Transmit(34); 																			//"
     918:	82 e2       	ldi	r24, 0x22	; 34
     91a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(99); 																			//c
     91e:	83 e6       	ldi	r24, 0x63	; 99
     920:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(111); 																		//o
     924:	8f e6       	ldi	r24, 0x6F	; 111
     926:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(108); 																		//l
     92a:	8c e6       	ldi	r24, 0x6C	; 108
     92c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(108); 																		//l
     930:	8c e6       	ldi	r24, 0x6C	; 108
     932:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(105); 																		//i
     936:	89 e6       	ldi	r24, 0x69	; 105
     938:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(115); 																		//s
     93c:	83 e7       	ldi	r24, 0x73	; 115
     93e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(105); 																		//i
     942:	89 e6       	ldi	r24, 0x69	; 105
     944:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(111); 																		//o
     948:	8f e6       	ldi	r24, 0x6F	; 111
     94a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(110); 																		//n
     94e:	8e e6       	ldi	r24, 0x6E	; 110
     950:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(34); 																			//"
     954:	82 e2       	ldi	r24, 0x22	; 34
     956:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			}
			
			
			UART_Transmit(93); 																				//[
     95a:	8d e5       	ldi	r24, 0x5D	; 93
     95c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
     960:	06 c0       	rjmp	.+12     	; 0x96e <__stack+0x6f>
			
			}else{ 																							//No errors present
			UART_Transmit(10); 																				//line feed
     962:	8a e0       	ldi	r24, 0x0A	; 10
     964:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(13); 																				//carriage return
     968:	8d e0       	ldi	r24, 0x0D	; 13
     96a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		}
	}
	
	
	UART_Transmit(10); 																						//line feed
     96e:	8a e0       	ldi	r24, 0x0A	; 10
     970:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     974:	8d e0       	ldi	r24, 0x0D	; 13
     976:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(125); 																					// }
     97a:	8d e7       	ldi	r24, 0x7D	; 125
     97c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); 																						//line feed
     980:	8a e0       	ldi	r24, 0x0A	; 10
     982:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13);																						//carriage return
     986:	8d e0       	ldi	r24, 0x0D	; 13
     988:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(125); 																					// }
     98c:	8d e7       	ldi	r24, 0x7D	; 125
     98e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); 																						//line feed
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     998:	8d e0       	ldi	r24, 0x0D	; 13
     99a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>


     99e:	4b c0       	rjmp	.+150    	; 0xa36 <__stack+0x137>
	}else{
		UART_Transmit(10); 																					//line feed
		UART_Transmit(13); 																					//carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {															//if either error occurs then send 
			UART_Transmit(34); 																				//'
     9a0:	82 e2       	ldi	r24, 0x22	; 34
     9a2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(101); 																			//e
     9a6:	85 e6       	ldi	r24, 0x65	; 101
     9a8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(119); 																			//w
     9ac:	87 e7       	ldi	r24, 0x77	; 119
     9ae:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(34); 																				// "
     9b2:	82 e2       	ldi	r24, 0x22	; 34
     9b4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(58); 																				//:
     9b8:	8a e3       	ldi	r24, 0x3A	; 58
     9ba:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(91); 																				//[
     9be:	8b e5       	ldi	r24, 0x5B	; 91
     9c0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
																											
																											//Print the various errors
			if(jamErrorFlag){ 																				//Compressor Jammed 
				UART_Transmit(34); 																			//"
     9c4:	82 e2       	ldi	r24, 0x22	; 34
     9c6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(106); 																		//j
     9ca:	8a e6       	ldi	r24, 0x6A	; 106
     9cc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(97); 																			//a
     9d0:	81 e6       	ldi	r24, 0x61	; 97
     9d2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(109); 																		//m
     9d6:	8d e6       	ldi	r24, 0x6D	; 109
     9d8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(34); 																			//"
     9dc:	82 e2       	ldi	r24, 0x22	; 34
     9de:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
     9e2:	bb cf       	rjmp	.-138    	; 0x95a <__stack+0x5b>
			UART_Transmit(58); 																				//:
			UART_Transmit(91); 																				//[
																											
																											//Print the various errors
			if(jamErrorFlag){ 																				//Compressor Jammed 
				UART_Transmit(34); 																			//"
     9e4:	82 e2       	ldi	r24, 0x22	; 34
     9e6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(106); 																		//j
     9ea:	8a e6       	ldi	r24, 0x6A	; 106
     9ec:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(97); 																			//a
     9f0:	81 e6       	ldi	r24, 0x61	; 97
     9f2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(109); 																		//m
     9f6:	8d e6       	ldi	r24, 0x6D	; 109
     9f8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(34); 																			//"
     9fc:	82 e2       	ldi	r24, 0x22	; 34
     9fe:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				if(jamErrorFlag && collisionErrorFlag){
					UART_Transmit(44); 																		//,
     a02:	8c e2       	ldi	r24, 0x2C	; 44
     a04:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
     a08:	87 cf       	rjmp	.-242    	; 0x918 <__stack+0x19>
	}else{
		UART_Transmit(10); 																					//line feed
		UART_Transmit(13); 																					//carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {															//if either error occurs then send 
			UART_Transmit(34); 																				//'
     a0a:	82 e2       	ldi	r24, 0x22	; 34
     a0c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(101); 																			//e
     a10:	85 e6       	ldi	r24, 0x65	; 101
     a12:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(119); 																			//w
     a16:	87 e7       	ldi	r24, 0x77	; 119
     a18:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(34); 																				// "
     a1c:	82 e2       	ldi	r24, 0x22	; 34
     a1e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(58); 																				//:
     a22:	8a e3       	ldi	r24, 0x3A	; 58
     a24:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(91); 																				//[
     a28:	8b e5       	ldi	r24, 0x5B	; 91
     a2a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
																											
																											//Print the various errors
			if(jamErrorFlag){ 																				//Compressor Jammed 
     a2e:	dd 23       	and	r29, r29
     a30:	09 f4       	brne	.+2      	; 0xa34 <__stack+0x135>
     a32:	72 cf       	rjmp	.-284    	; 0x918 <__stack+0x19>
     a34:	d7 cf       	rjmp	.-82     	; 0x9e4 <__stack+0xe5>
	UART_Transmit(125); 																					// }
	UART_Transmit(10); 																						//line feed
	UART_Transmit(13); 																						//carriage return


     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <UART_SendJson>:

/**************************************************************JSON Structure**************************************************************/

/**************************************************************Send JSON Structure**************************************************************/
/*Note:The functions encapsulated within UART_SendJSON create the JSON Structure that is send to the master from the controller*/
void UART_SendJson(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current,bool jamErrorFlag, bool collisionErrorFlag, uint8_t requiredValue, uint8_t currentValue){
     a3c:	4f 92       	push	r4
     a3e:	5f 92       	push	r5
     a40:	6f 92       	push	r6
     a42:	7f 92       	push	r7
     a44:	8f 92       	push	r8
     a46:	af 92       	push	r10
     a48:	cf 92       	push	r12
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	18 2f       	mov	r17, r24
     a5c:	f6 2e       	mov	r15, r22
     a5e:	29 01       	movw	r4, r18
     a60:	3a 01       	movw	r6, r20
     a62:	8a 2d       	mov	r24, r10
     a64:	68 2d       	mov	r22, r8
	MFCmodulator(requiredValue,currentValue);
     a66:	0e 94 b7 01 	call	0x36e	; 0x36e <MFCmodulator>
	VERmodulator();
     a6a:	0e 94 95 02 	call	0x52a	; 0x52a <VERmodulator>
	PARAMmodulator(averagePower,operatingFrequency,appliedVoltage,current);
     a6e:	a3 01       	movw	r20, r6
     a70:	92 01       	movw	r18, r4
     a72:	6f 2d       	mov	r22, r15
     a74:	81 2f       	mov	r24, r17
     a76:	0e 94 c6 02 	call	0x58c	; 0x58c <PARAMmodulator>
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);
     a7a:	6c 2d       	mov	r22, r12
     a7c:	8e 2d       	mov	r24, r14
     a7e:	0e 94 4f 04 	call	0x89e	; 0x89e <ERRORmodulator>

}
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	cf 90       	pop	r12
     a90:	af 90       	pop	r10
     a92:	8f 90       	pop	r8
     a94:	7f 90       	pop	r7
     a96:	6f 90       	pop	r6
     a98:	5f 90       	pop	r5
     a9a:	4f 90       	pop	r4
     a9c:	08 95       	ret

00000a9e <__vector_18>:
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
		return true;
		}else{
		return false;
	}
}
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
     ab0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ab4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <characterReceived>
     ab8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <numberOfCharactersReceived>
     abc:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <numberOfCharactersReceived+0x1>
     ac6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <numberOfCharactersReceived>
     aca:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <numberOfCharactersReceived>
     ace:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     ad2:	45 97       	sbiw	r24, 0x15	; 21
     ad4:	4c f0       	brlt	.+18     	; 0xae8 <__vector_18+0x4a>
     ad6:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <numberOfCharactersReceived>
     ada:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     ade:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <characterReceived>
     ae2:	e6 5f       	subi	r30, 0xF6	; 246
     ae4:	fe 4f       	sbci	r31, 0xFE	; 254
     ae6:	80 83       	st	Z, r24
     ae8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <numberOfCharactersReceived>
     aec:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     af0:	82 97       	sbiw	r24, 0x22	; 34
     af2:	4c f0       	brlt	.+18     	; 0xb06 <__vector_18+0x68>
     af4:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <numberOfCharactersReceived>
     af8:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     afc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <characterReceived>
     b00:	ea 51       	subi	r30, 0x1A	; 26
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	80 83       	st	Z, r24
     b06:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <numberOfCharactersReceived>
     b0a:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     b0e:	86 97       	sbiw	r24, 0x26	; 38
     b10:	7c f0       	brlt	.+30     	; 0xb30 <__vector_18+0x92>
     b12:	e1 ec       	ldi	r30, 0xC1	; 193
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	8f 77       	andi	r24, 0x7F	; 127
     b1a:	80 83       	st	Z, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	8f 7e       	andi	r24, 0xEF	; 239
     b20:	80 83       	st	Z, r24
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <messageReceived>
     b28:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <numberOfCharactersReceived+0x1>
     b2c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <numberOfCharactersReceived>
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <__vector_20>:
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	8f 93       	push	r24
     b4e:	ef 93       	push	r30
     b50:	ff 93       	push	r31
     b52:	e1 ec       	ldi	r30, 0xC1	; 193
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 61       	ori	r24, 0x10	; 16
     b5a:	80 83       	st	Z, r24
     b5c:	80 81       	ld	r24, Z
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	80 83       	st	Z, r24
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	8f 91       	pop	r24
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	0f 90       	pop	r0
     b6e:	1f 90       	pop	r1
     b70:	18 95       	reti

00000b72 <__vector_11>:
     b72:	1f 92       	push	r1
     b74:	0f 92       	push	r0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	0f 92       	push	r0
     b7a:	11 24       	eor	r1, r1
     b7c:	2f 93       	push	r18
     b7e:	3f 93       	push	r19
     b80:	4f 93       	push	r20
     b82:	5f 93       	push	r21
     b84:	6f 93       	push	r22
     b86:	7f 93       	push	r23
     b88:	8f 93       	push	r24
     b8a:	9f 93       	push	r25
     b8c:	af 93       	push	r26
     b8e:	bf 93       	push	r27
     b90:	ef 93       	push	r30
     b92:	ff 93       	push	r31
     b94:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
     b98:	81 11       	cpse	r24, r1
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__vector_11+0x32>
     b9c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     ba0:	88 23       	and	r24, r24
     ba2:	b9 f1       	breq	.+110    	; 0xc12 <__vector_11+0xa0>
     ba4:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <count>
     ba8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     bac:	89 17       	cp	r24, r25
     bae:	60 f0       	brcs	.+24     	; 0xbc8 <__vector_11+0x56>
     bb0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <isDead>
     bb4:	81 11       	cpse	r24, r1
     bb6:	08 c0       	rjmp	.+16     	; 0xbc8 <__vector_11+0x56>
     bb8:	2a 9a       	sbi	0x05, 2	; 5
     bba:	5d 9a       	sbi	0x0b, 5	; 11
     bbc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <count>
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <count>
     bc6:	57 c0       	rjmp	.+174    	; 0xc76 <__vector_11+0x104>
     bc8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <count>
     bcc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     bd0:	89 17       	cp	r24, r25
     bd2:	a0 f4       	brcc	.+40     	; 0xbfc <__vector_11+0x8a>
     bd4:	2a 98       	cbi	0x05, 2	; 5
     bd6:	5d 98       	cbi	0x0b, 5	; 11
     bd8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PWM_CalculateDeadTime>
     bdc:	6f ef       	ldi	r22, 0xFF	; 255
     bde:	7f ef       	ldi	r23, 0xFF	; 255
     be0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWM_Change>
     be4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     be8:	81 11       	cpse	r24, r1
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <__vector_11+0x7e>
     bec:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isLHS>
     bf0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <count>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <isDead>
     bfa:	3d c0       	rjmp	.+122    	; 0xc76 <__vector_11+0x104>
     bfc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <isDead>
     c00:	0e 94 de 00 	call	0x1bc	; 0x1bc <PWM_ConvertTimerValueToDutyCycle>
     c04:	68 2f       	mov	r22, r24
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	8d e7       	ldi	r24, 0x7D	; 125
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWM_Change>
     c10:	32 c0       	rjmp	.+100    	; 0xc76 <__vector_11+0x104>
     c12:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <count>
     c16:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     c1a:	89 17       	cp	r24, r25
     c1c:	60 f0       	brcs	.+24     	; 0xc36 <__vector_11+0xc4>
     c1e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <isDead>
     c22:	81 11       	cpse	r24, r1
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <__vector_11+0xc4>
     c26:	5e 9a       	sbi	0x0b, 6	; 11
     c28:	29 9a       	sbi	0x05, 1	; 5
     c2a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <count>
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <count>
     c34:	20 c0       	rjmp	.+64     	; 0xc76 <__vector_11+0x104>
     c36:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <count>
     c3a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     c3e:	89 17       	cp	r24, r25
     c40:	80 f4       	brcc	.+32     	; 0xc62 <__vector_11+0xf0>
     c42:	29 98       	cbi	0x05, 1	; 5
     c44:	5e 98       	cbi	0x0b, 6	; 11
     c46:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PWM_CalculateDeadTime>
     c4a:	6f ef       	ldi	r22, 0xFF	; 255
     c4c:	7f ef       	ldi	r23, 0xFF	; 255
     c4e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWM_Change>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isLHS>
     c58:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <count>
     c5c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <isDead>
     c60:	0a c0       	rjmp	.+20     	; 0xc76 <__vector_11+0x104>
     c62:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <isDead>
     c66:	0e 94 de 00 	call	0x1bc	; 0x1bc <PWM_ConvertTimerValueToDutyCycle>
     c6a:	68 2f       	mov	r22, r24
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	8d e7       	ldi	r24, 0x7D	; 125
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWM_Change>
     c76:	ff 91       	pop	r31
     c78:	ef 91       	pop	r30
     c7a:	bf 91       	pop	r27
     c7c:	af 91       	pop	r26
     c7e:	9f 91       	pop	r25
     c80:	8f 91       	pop	r24
     c82:	7f 91       	pop	r23
     c84:	6f 91       	pop	r22
     c86:	5f 91       	pop	r21
     c88:	4f 91       	pop	r20
     c8a:	3f 91       	pop	r19
     c8c:	2f 91       	pop	r18
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <__vector_12>:
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	8f 93       	push	r24
     ca4:	9f 93       	push	r25
     ca6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
     caa:	81 11       	cpse	r24, r1
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <__vector_12+0x1e>
     cae:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     cb2:	88 23       	and	r24, r24
     cb4:	61 f0       	breq	.+24     	; 0xcce <__vector_12+0x36>
     cb6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <isDead>
     cba:	81 11       	cpse	r24, r1
     cbc:	13 c0       	rjmp	.+38     	; 0xce4 <__vector_12+0x4c>
     cbe:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <count>
     cc2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     cc6:	89 17       	cp	r24, r25
     cc8:	68 f0       	brcs	.+26     	; 0xce4 <__vector_12+0x4c>
     cca:	2a 98       	cbi	0x05, 2	; 5
     ccc:	0b c0       	rjmp	.+22     	; 0xce4 <__vector_12+0x4c>
     cce:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <isDead>
     cd2:	81 11       	cpse	r24, r1
     cd4:	07 c0       	rjmp	.+14     	; 0xce4 <__vector_12+0x4c>
     cd6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <count>
     cda:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     cde:	89 17       	cp	r24, r25
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <__vector_12+0x4c>
     ce2:	29 98       	cbi	0x05, 1	; 5
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	1f 90       	pop	r1
     cf0:	18 95       	reti

00000cf2 <concatenate>:
     cf2:	c0 97       	sbiw	r24, 0x30	; 48
     cf4:	e4 e6       	ldi	r30, 0x64	; 100
     cf6:	e8 9f       	mul	r30, r24
     cf8:	90 01       	movw	r18, r0
     cfa:	e9 9f       	mul	r30, r25
     cfc:	30 0d       	add	r19, r0
     cfe:	11 24       	eor	r1, r1
     d00:	60 53       	subi	r22, 0x30	; 48
     d02:	71 09       	sbc	r23, r1
     d04:	cb 01       	movw	r24, r22
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	66 0f       	add	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	66 0f       	add	r22, r22
     d14:	77 1f       	adc	r23, r23
     d16:	68 0f       	add	r22, r24
     d18:	79 1f       	adc	r23, r25
     d1a:	62 0f       	add	r22, r18
     d1c:	73 1f       	adc	r23, r19
     d1e:	ca 01       	movw	r24, r20
     d20:	c0 97       	sbiw	r24, 0x30	; 48
     d22:	86 0f       	add	r24, r22
     d24:	97 1f       	adc	r25, r23
     d26:	08 95       	ret

00000d28 <main>:
/**************************************************************Main Function**************************************************************/
int main(void)
{	

	/*******************Intialisations*******************/
    sei();
     d28:	78 94       	sei
	UART_Init(UBRR_VALUE);
     d2a:	83 e3       	ldi	r24, 0x33	; 51
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 07 01 	call	0x20e	; 0x20e <UART_Init>
	ADC_Init();
     d32:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
     d36:	0e 94 ca 00 	call	0x194	; 0x194 <PWM_Init>
	uint16_t voltageAverageFinal = 0;
	uint16_t currentAverageFinal = 0;
	uint32_t averagePower = 0;
	
	/*******************Output Pin Setup*******************/
	DDRB |= (1<<PB1)|(1<<PB2);
     d3a:	84 b1       	in	r24, 0x04	; 4
     d3c:	86 60       	ori	r24, 0x06	; 6
     d3e:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
     d40:	8a b1       	in	r24, 0x0a	; 10
     d42:	80 66       	ori	r24, 0x60	; 96
     d44:	8a b9       	out	0x0a, r24	; 10
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
	uint16_t voltageAverageFinal = 0;
	uint16_t currentAverageFinal = 0;
     d46:	21 2c       	mov	r2, r1
     d48:	31 2c       	mov	r3, r1
	ADC_Init();
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
	uint16_t voltageAverageFinal = 0;
     d4a:	c0 e0       	ldi	r28, 0x00	; 0
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
	UART_Init(UBRR_VALUE);
	ADC_Init();
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
     d4e:	10 e0       	ldi	r17, 0x00	; 0
		}		
		averagePower = (voltageAverageFinal*currentAverageFinal)/1000;						
					
		
		if(messageReceived){
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
     d50:	0f 2e       	mov	r0, r31
     d52:	ff e1       	ldi	r31, 0x1F	; 31
     d54:	6f 2e       	mov	r6, r31
     d56:	f1 e0       	ldi	r31, 0x01	; 1
     d58:	7f 2e       	mov	r7, r31
     d5a:	f0 2d       	mov	r31, r0
				
			for(int i = 0; i < 38; i++){
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
     d5c:	0f 2e       	mov	r0, r31
     d5e:	f8 e0       	ldi	r31, 0x08	; 8
     d60:	4f 2e       	mov	r4, r31
     d62:	f1 e0       	ldi	r31, 0x01	; 1
     d64:	5f 2e       	mov	r5, r31
     d66:	f0 2d       	mov	r31, r0

    while (1) 
    {	
		
		/*******************Local Variable Declaration*******************/
		measurementIndex = 0;
     d68:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <measurementIndex>
		uint32_t averageVoltage = 0;
		uint32_t voltageSum = 0;

		/*******************Voltage Measurement*******************/
			while(measurementIndex < NUMBER_OF_SAMPLES){									//Keep on sampling the LHS and RHS of the coil until you reach the total number of samples
     d6c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <measurementIndex>
     d70:	88 37       	cpi	r24, 0x78	; 120
     d72:	08 f0       	brcs	.+2      	; 0xd76 <main+0x4e>
     d74:	5f c1       	rjmp	.+702    	; 0x1034 <main+0x30c>
				voltageLHS[measurementIndex] = ADC_LHSVoltage();							//Sample LHS voltage
     d76:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <measurementIndex>
     d7a:	f1 2c       	mov	r15, r1
     d7c:	0e 94 91 00 	call	0x122	; 0x122 <ADC_LHSVoltage>
     d80:	f7 01       	movw	r30, r14
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ef 5e       	subi	r30, 0xEF	; 239
     d8c:	fa 4f       	sbci	r31, 0xFA	; 250
     d8e:	60 83       	st	Z, r22
     d90:	71 83       	std	Z+1, r23	; 0x01
     d92:	82 83       	std	Z+2, r24	; 0x02
     d94:	93 83       	std	Z+3, r25	; 0x03
				voltageRHS[measurementIndex] = ADC_RHSVoltage();							//Sample RHS voltage
     d96:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <measurementIndex>
     d9a:	f1 2c       	mov	r15, r1
     d9c:	0e 94 ac 00 	call	0x158	; 0x158 <ADC_RHSVoltage>
     da0:	f7 01       	movw	r30, r14
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	ef 5c       	subi	r30, 0xCF	; 207
     dac:	fc 4f       	sbci	r31, 0xFC	; 252
     dae:	60 83       	st	Z, r22
     db0:	71 83       	std	Z+1, r23	; 0x01
     db2:	82 83       	std	Z+2, r24	; 0x02
     db4:	93 83       	std	Z+3, r25	; 0x03
				measurementIndex++;											
     db6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <measurementIndex>
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <measurementIndex>
		measurementIndex = 0;
		uint32_t averageVoltage = 0;
		uint32_t voltageSum = 0;

		/*******************Voltage Measurement*******************/
			while(measurementIndex < NUMBER_OF_SAMPLES){									//Keep on sampling the LHS and RHS of the coil until you reach the total number of samples
     dc0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <measurementIndex>
     dc4:	88 37       	cpi	r24, 0x78	; 120
     dc6:	b8 f2       	brcs	.-82     	; 0xd76 <main+0x4e>
     dc8:	35 c1       	rjmp	.+618    	; 0x1034 <main+0x30c>
				voltageRHS[measurementIndex] = ADC_RHSVoltage();							//Sample RHS voltage
				measurementIndex++;											
			}
		
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){												//This for-loop calculates the voltage across the coil
			if(voltageLHS[i]>voltageRHS[i]){												
     dca:	9c 01       	movw	r18, r24
     dcc:	22 0f       	add	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	f9 01       	movw	r30, r18
     dd6:	ef 5e       	subi	r30, 0xEF	; 239
     dd8:	fa 4f       	sbci	r31, 0xFA	; 250
     dda:	80 80       	ld	r8, Z
     ddc:	91 80       	ldd	r9, Z+1	; 0x01
     dde:	a2 80       	ldd	r10, Z+2	; 0x02
     de0:	b3 80       	ldd	r11, Z+3	; 0x03
     de2:	f9 01       	movw	r30, r18
     de4:	ef 5c       	subi	r30, 0xCF	; 207
     de6:	fc 4f       	sbci	r31, 0xFC	; 252
     de8:	c0 80       	ld	r12, Z
     dea:	d1 80       	ldd	r13, Z+1	; 0x01
     dec:	e2 80       	ldd	r14, Z+2	; 0x02
     dee:	f3 80       	ldd	r15, Z+3	; 0x03
     df0:	c8 14       	cp	r12, r8
     df2:	d9 04       	cpc	r13, r9
     df4:	ea 04       	cpc	r14, r10
     df6:	fb 04       	cpc	r15, r11
     df8:	f8 f4       	brcc	.+62     	; 0xe38 <main+0x110>
				voltageAcrossTheCoil[i] = voltageLHS[i]-voltageRHS[i];
     dfa:	9c 01       	movw	r18, r24
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	22 0f       	add	r18, r18
     e02:	33 1f       	adc	r19, r19
     e04:	f9 01       	movw	r30, r18
     e06:	ef 5e       	subi	r30, 0xEF	; 239
     e08:	fa 4f       	sbci	r31, 0xFA	; 250
     e0a:	c0 80       	ld	r12, Z
     e0c:	d1 80       	ldd	r13, Z+1	; 0x01
     e0e:	e2 80       	ldd	r14, Z+2	; 0x02
     e10:	f3 80       	ldd	r15, Z+3	; 0x03
     e12:	f9 01       	movw	r30, r18
     e14:	ef 5c       	subi	r30, 0xCF	; 207
     e16:	fc 4f       	sbci	r31, 0xFC	; 252
     e18:	80 80       	ld	r8, Z
     e1a:	91 80       	ldd	r9, Z+1	; 0x01
     e1c:	a2 80       	ldd	r10, Z+2	; 0x02
     e1e:	b3 80       	ldd	r11, Z+3	; 0x03
     e20:	c8 18       	sub	r12, r8
     e22:	d9 08       	sbc	r13, r9
     e24:	ea 08       	sbc	r14, r10
     e26:	fb 08       	sbc	r15, r11
     e28:	f9 01       	movw	r30, r18
     e2a:	ef 50       	subi	r30, 0x0F	; 15
     e2c:	f9 4f       	sbci	r31, 0xF9	; 249
     e2e:	c0 82       	st	Z, r12
     e30:	d1 82       	std	Z+1, r13	; 0x01
     e32:	e2 82       	std	Z+2, r14	; 0x02
     e34:	f3 82       	std	Z+3, r15	; 0x03
     e36:	1e c0       	rjmp	.+60     	; 0xe74 <main+0x14c>
				}else{
				voltageAcrossTheCoil[i] = voltageRHS[i]-voltageLHS[i];
     e38:	9c 01       	movw	r18, r24
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	f9 01       	movw	r30, r18
     e44:	ef 5c       	subi	r30, 0xCF	; 207
     e46:	fc 4f       	sbci	r31, 0xFC	; 252
     e48:	c0 80       	ld	r12, Z
     e4a:	d1 80       	ldd	r13, Z+1	; 0x01
     e4c:	e2 80       	ldd	r14, Z+2	; 0x02
     e4e:	f3 80       	ldd	r15, Z+3	; 0x03
     e50:	f9 01       	movw	r30, r18
     e52:	ef 5e       	subi	r30, 0xEF	; 239
     e54:	fa 4f       	sbci	r31, 0xFA	; 250
     e56:	80 80       	ld	r8, Z
     e58:	91 80       	ldd	r9, Z+1	; 0x01
     e5a:	a2 80       	ldd	r10, Z+2	; 0x02
     e5c:	b3 80       	ldd	r11, Z+3	; 0x03
     e5e:	c8 18       	sub	r12, r8
     e60:	d9 08       	sbc	r13, r9
     e62:	ea 08       	sbc	r14, r10
     e64:	fb 08       	sbc	r15, r11
     e66:	f9 01       	movw	r30, r18
     e68:	ef 50       	subi	r30, 0x0F	; 15
     e6a:	f9 4f       	sbci	r31, 0xF9	; 249
     e6c:	c0 82       	st	Z, r12
     e6e:	d1 82       	std	Z+1, r13	; 0x01
     e70:	e2 82       	std	Z+2, r14	; 0x02
     e72:	f3 82       	std	Z+3, r15	; 0x03
			}		
			voltageSum += voltageAcrossTheCoil[i];											
     e74:	fc 01       	movw	r30, r24
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	ef 50       	subi	r30, 0x0F	; 15
     e80:	f9 4f       	sbci	r31, 0xF9	; 249
     e82:	c0 80       	ld	r12, Z
     e84:	d1 80       	ldd	r13, Z+1	; 0x01
     e86:	e2 80       	ldd	r14, Z+2	; 0x02
     e88:	f3 80       	ldd	r15, Z+3	; 0x03
     e8a:	4c 0d       	add	r20, r12
     e8c:	5d 1d       	adc	r21, r13
     e8e:	6e 1d       	adc	r22, r14
     e90:	7f 1d       	adc	r23, r15
				voltageLHS[measurementIndex] = ADC_LHSVoltage();							//Sample LHS voltage
				voltageRHS[measurementIndex] = ADC_RHSVoltage();							//Sample RHS voltage
				measurementIndex++;											
			}
		
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){												//This for-loop calculates the voltage across the coil
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	88 37       	cpi	r24, 0x78	; 120
     e96:	91 05       	cpc	r25, r1
     e98:	09 f0       	breq	.+2      	; 0xe9c <main+0x174>
     e9a:	97 cf       	rjmp	.-210    	; 0xdca <main+0xa2>
			}		
			voltageSum += voltageAcrossTheCoil[i];											
			
		}
		
		averageVoltage = voltageSum / NUMBER_OF_SAMPLES;									//This is the average voltage per sample					
     e9c:	cb 01       	movw	r24, r22
     e9e:	ba 01       	movw	r22, r20
     ea0:	28 e7       	ldi	r18, 0x78	; 120
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	0e 94 48 08 	call	0x1090	; 0x1090 <__udivmodsi4>

		voltageAverageArray[voltageAverageIndex] = averageVoltage;							
     eac:	e1 2f       	mov	r30, r17
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	ef 5a       	subi	r30, 0xAF	; 175
     eba:	fe 4f       	sbci	r31, 0xFE	; 254
     ebc:	20 83       	st	Z, r18
     ebe:	31 83       	std	Z+1, r19	; 0x01
     ec0:	42 83       	std	Z+2, r20	; 0x02
     ec2:	53 83       	std	Z+3, r21	; 0x03
		voltageAverageIndex++;
     ec4:	1f 5f       	subi	r17, 0xFF	; 255
				
		/*******************Calculate Average Voltage and Current*******************/		
		if(voltageAverageIndex==NUMBER_OF_SAMPLES){											//The averageVoltage per sample is then averaged across multiple samples to get a a more accurate result	
     ec6:	18 37       	cpi	r17, 0x78	; 120
     ec8:	71 f5       	brne	.+92     	; 0xf26 <main+0x1fe>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
			for(int k = 0;k < NUMBER_OF_SAMPLES;k++){
				voltageAverageFinal += voltageAverageArray[k];
     ece:	fc 01       	movw	r30, r24
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	ef 5a       	subi	r30, 0xAF	; 175
     eda:	fe 4f       	sbci	r31, 0xFE	; 254
     edc:	40 81       	ld	r20, Z
     ede:	51 81       	ldd	r21, Z+1	; 0x01
     ee0:	62 81       	ldd	r22, Z+2	; 0x02
     ee2:	73 81       	ldd	r23, Z+3	; 0x03
     ee4:	c4 0f       	add	r28, r20
     ee6:	d5 1f       	adc	r29, r21
		voltageAverageArray[voltageAverageIndex] = averageVoltage;							
		voltageAverageIndex++;
				
		/*******************Calculate Average Voltage and Current*******************/		
		if(voltageAverageIndex==NUMBER_OF_SAMPLES){											//The averageVoltage per sample is then averaged across multiple samples to get a a more accurate result	
			for(int k = 0;k < NUMBER_OF_SAMPLES;k++){
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	88 37       	cpi	r24, 0x78	; 120
     eec:	91 05       	cpc	r25, r1
     eee:	79 f7       	brne	.-34     	; 0xece <main+0x1a6>
				voltageAverageFinal += voltageAverageArray[k];
			}
			voltageAverageFinal /= NUMBER_OF_SAMPLES;										//This the average voltage across multiple samples taken 
     ef0:	9e 01       	movw	r18, r28
     ef2:	a9 e8       	ldi	r26, 0x89	; 137
     ef4:	b8 e8       	ldi	r27, 0x88	; 136
     ef6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__umulhisi3>
     efa:	ec 01       	movw	r28, r24
     efc:	00 24       	eor	r0, r0
     efe:	cc 0f       	add	r28, r28
     f00:	dd 1f       	adc	r29, r29
     f02:	00 1c       	adc	r0, r0
     f04:	cc 0f       	add	r28, r28
     f06:	dd 1f       	adc	r29, r29
     f08:	00 1c       	adc	r0, r0
     f0a:	cd 2f       	mov	r28, r29
     f0c:	d0 2d       	mov	r29, r0
			currentAverageFinal = (voltageAverageFinal*100)/IMPEDANCE;							//From average voltage, average current through the coil is calculated using Ohms law			
     f0e:	24 e6       	ldi	r18, 0x64	; 100
     f10:	2c 9f       	mul	r18, r28
     f12:	c0 01       	movw	r24, r0
     f14:	2d 9f       	mul	r18, r29
     f16:	90 0d       	add	r25, r0
     f18:	11 24       	eor	r1, r1
     f1a:	6f e9       	ldi	r22, 0x9F	; 159
     f1c:	71 e0       	ldi	r23, 0x01	; 1
     f1e:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodhi4>
     f22:	1b 01       	movw	r2, r22
			voltageAverageIndex = 0;
     f24:	10 e0       	ldi	r17, 0x00	; 0
		}		
		averagePower = (voltageAverageFinal*currentAverageFinal)/1000;						
					
		
		if(messageReceived){
     f26:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <messageReceived>
     f2a:	88 23       	and	r24, r24
     f2c:	09 f4       	brne	.+2      	; 0xf30 <main+0x208>
     f2e:	7f c0       	rjmp	.+254    	; 0x102e <main+0x306>
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
     f30:	f3 01       	movw	r30, r6
     f32:	42 81       	ldd	r20, Z+2	; 0x02
     f34:	61 81       	ldd	r22, Z+1	; 0x01
     f36:	80 81       	ld	r24, Z
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <concatenate>
     f42:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pumpingEffort>
				
			for(int i = 0; i < 38; i++){
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
				pumpingEffortArray[i] = 0;
     f4a:	fc 01       	movw	r30, r24
     f4c:	e1 5e       	subi	r30, 0xE1	; 225
     f4e:	fe 4f       	sbci	r31, 0xFE	; 254
     f50:	10 82       	st	Z, r1
					
		
		if(messageReceived){
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	86 32       	cpi	r24, 0x26	; 38
     f56:	91 05       	cpc	r25, r1
     f58:	c1 f7       	brne	.-16     	; 0xf4a <main+0x222>
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
     f5a:	f2 01       	movw	r30, r4
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	80 81       	ld	r24, Z
int concatenate(int a, int b, int c){
	return ((a-48)*100 + (b-48)*10 + (c-48));
}

bool checkForError(unsigned char a, unsigned char b){
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
     f60:	85 36       	cpi	r24, 0x65	; 101
     f62:	29 f4       	brne	.+10     	; 0xf6e <main+0x246>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	97 37       	cpi	r25, 0x77	; 119
     f68:	19 f0       	breq	.+6      	; 0xf70 <main+0x248>
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <main+0x248>
		return true;
		}else{
		return false;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
     f70:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <clearErrorFlag>
			if(clearErrorFlag){
     f74:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <clearErrorFlag>
     f78:	88 23       	and	r24, r24
     f7a:	21 f0       	breq	.+8      	; 0xf84 <main+0x25c>
				cmprCollide = false;
     f7c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				cmprJammed = false;;
     f80:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <cmprJammed>
			}
			if(lowPowerMode){
     f84:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     f88:	88 23       	and	r24, r24
     f8a:	99 f0       	breq	.+38     	; 0xfb2 <main+0x28a>
				operatingFrequency = frequency*2/10;
     f8c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <frequency>
     f90:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <frequency+0x1>
     f94:	22 0f       	add	r18, r18
     f96:	33 1f       	adc	r19, r19
     f98:	ad ec       	ldi	r26, 0xCD	; 205
     f9a:	bc ec       	ldi	r27, 0xCC	; 204
     f9c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__umulhisi3>
     fa0:	96 95       	lsr	r25
     fa2:	87 95       	ror	r24
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	96 95       	lsr	r25
     faa:	87 95       	ror	r24
     fac:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <operatingFrequency>
     fb0:	10 c0       	rjmp	.+32     	; 0xfd2 <main+0x2aa>
			}else{
				operatingFrequency = frequency/10;
     fb2:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <frequency>
     fb6:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <frequency+0x1>
     fba:	ad ec       	ldi	r26, 0xCD	; 205
     fbc:	bc ec       	ldi	r27, 0xCC	; 204
     fbe:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__umulhisi3>
     fc2:	96 95       	lsr	r25
     fc4:	87 95       	ror	r24
     fc6:	96 95       	lsr	r25
     fc8:	87 95       	ror	r24
     fca:	96 95       	lsr	r25
     fcc:	87 95       	ror	r24
     fce:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <operatingFrequency>
			}
			UART_SendJson(averagePower,operatingFrequency,voltageAverageFinal,currentAverageFinal,cmprJammed,cmprCollide, pumpingEffort,pumpingEffort);
     fd2:	80 90 4c 01 	lds	r8, 0x014C	; 0x80014c <pumpingEffort>
     fd6:	a0 90 4c 01 	lds	r10, 0x014C	; 0x80014c <pumpingEffort>
     fda:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     fde:	e0 90 01 01 	lds	r14, 0x0101	; 0x800101 <cmprJammed>
     fe2:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <operatingFrequency>
     fe6:	c2 9d       	mul	r28, r2
     fe8:	90 01       	movw	r18, r0
     fea:	c3 9d       	mul	r28, r3
     fec:	30 0d       	add	r19, r0
     fee:	d2 9d       	mul	r29, r2
     ff0:	30 0d       	add	r19, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	36 95       	lsr	r19
     ff6:	27 95       	ror	r18
     ff8:	36 95       	lsr	r19
     ffa:	27 95       	ror	r18
     ffc:	36 95       	lsr	r19
     ffe:	27 95       	ror	r18
    1000:	a5 ec       	ldi	r26, 0xC5	; 197
    1002:	b0 e2       	ldi	r27, 0x20	; 32
    1004:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__umulhisi3>
    1008:	92 95       	swap	r25
    100a:	82 95       	swap	r24
    100c:	8f 70       	andi	r24, 0x0F	; 15
    100e:	89 27       	eor	r24, r25
    1010:	9f 70       	andi	r25, 0x0F	; 15
    1012:	89 27       	eor	r24, r25
    1014:	02 2d       	mov	r16, r2
    1016:	9e 01       	movw	r18, r28
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	6e 2f       	mov	r22, r30
    101e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_SendJson>
			messageReceived = false;
    1022:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <messageReceived>
			numberOfCharactersReceived = 0;
    1026:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <numberOfCharactersReceived+0x1>
    102a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <numberOfCharactersReceived>
		}
		UART_InterpretPumpingEffort();	
    102e:	0e 94 26 01 	call	0x24c	; 0x24c <UART_InterpretPumpingEffort>
		//}else{
			//hallPreviousAverage = hallCurrentAverage;
			//hallCurrentAverage = 0;
			//hallArray = {0};
		//}
    }
    1032:	9a ce       	rjmp	.-716    	; 0xd68 <main+0x40>
	UART_Init(UBRR_VALUE);
	ADC_Init();
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	ba 01       	movw	r22, r20
    103e:	c5 ce       	rjmp	.-630    	; 0xdca <main+0xa2>

00001040 <__udivmodhi4>:
    1040:	aa 1b       	sub	r26, r26
    1042:	bb 1b       	sub	r27, r27
    1044:	51 e1       	ldi	r21, 0x11	; 17
    1046:	07 c0       	rjmp	.+14     	; 0x1056 <__udivmodhi4_ep>

00001048 <__udivmodhi4_loop>:
    1048:	aa 1f       	adc	r26, r26
    104a:	bb 1f       	adc	r27, r27
    104c:	a6 17       	cp	r26, r22
    104e:	b7 07       	cpc	r27, r23
    1050:	10 f0       	brcs	.+4      	; 0x1056 <__udivmodhi4_ep>
    1052:	a6 1b       	sub	r26, r22
    1054:	b7 0b       	sbc	r27, r23

00001056 <__udivmodhi4_ep>:
    1056:	88 1f       	adc	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	5a 95       	dec	r21
    105c:	a9 f7       	brne	.-22     	; 0x1048 <__udivmodhi4_loop>
    105e:	80 95       	com	r24
    1060:	90 95       	com	r25
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	08 95       	ret

00001068 <__divmodhi4>:
    1068:	97 fb       	bst	r25, 7
    106a:	07 2e       	mov	r0, r23
    106c:	16 f4       	brtc	.+4      	; 0x1072 <__divmodhi4+0xa>
    106e:	00 94       	com	r0
    1070:	07 d0       	rcall	.+14     	; 0x1080 <__divmodhi4_neg1>
    1072:	77 fd       	sbrc	r23, 7
    1074:	09 d0       	rcall	.+18     	; 0x1088 <__divmodhi4_neg2>
    1076:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodhi4>
    107a:	07 fc       	sbrc	r0, 7
    107c:	05 d0       	rcall	.+10     	; 0x1088 <__divmodhi4_neg2>
    107e:	3e f4       	brtc	.+14     	; 0x108e <__divmodhi4_exit>

00001080 <__divmodhi4_neg1>:
    1080:	90 95       	com	r25
    1082:	81 95       	neg	r24
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	08 95       	ret

00001088 <__divmodhi4_neg2>:
    1088:	70 95       	com	r23
    108a:	61 95       	neg	r22
    108c:	7f 4f       	sbci	r23, 0xFF	; 255

0000108e <__divmodhi4_exit>:
    108e:	08 95       	ret

00001090 <__udivmodsi4>:
    1090:	a1 e2       	ldi	r26, 0x21	; 33
    1092:	1a 2e       	mov	r1, r26
    1094:	aa 1b       	sub	r26, r26
    1096:	bb 1b       	sub	r27, r27
    1098:	fd 01       	movw	r30, r26
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <__udivmodsi4_ep>

0000109c <__udivmodsi4_loop>:
    109c:	aa 1f       	adc	r26, r26
    109e:	bb 1f       	adc	r27, r27
    10a0:	ee 1f       	adc	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	a2 17       	cp	r26, r18
    10a6:	b3 07       	cpc	r27, r19
    10a8:	e4 07       	cpc	r30, r20
    10aa:	f5 07       	cpc	r31, r21
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <__udivmodsi4_ep>
    10ae:	a2 1b       	sub	r26, r18
    10b0:	b3 0b       	sbc	r27, r19
    10b2:	e4 0b       	sbc	r30, r20
    10b4:	f5 0b       	sbc	r31, r21

000010b6 <__udivmodsi4_ep>:
    10b6:	66 1f       	adc	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	88 1f       	adc	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	1a 94       	dec	r1
    10c0:	69 f7       	brne	.-38     	; 0x109c <__udivmodsi4_loop>
    10c2:	60 95       	com	r22
    10c4:	70 95       	com	r23
    10c6:	80 95       	com	r24
    10c8:	90 95       	com	r25
    10ca:	9b 01       	movw	r18, r22
    10cc:	ac 01       	movw	r20, r24
    10ce:	bd 01       	movw	r22, r26
    10d0:	cf 01       	movw	r24, r30
    10d2:	08 95       	ret

000010d4 <__umulhisi3>:
    10d4:	a2 9f       	mul	r26, r18
    10d6:	b0 01       	movw	r22, r0
    10d8:	b3 9f       	mul	r27, r19
    10da:	c0 01       	movw	r24, r0
    10dc:	a3 9f       	mul	r26, r19
    10de:	70 0d       	add	r23, r0
    10e0:	81 1d       	adc	r24, r1
    10e2:	11 24       	eor	r1, r1
    10e4:	91 1d       	adc	r25, r1
    10e6:	b2 9f       	mul	r27, r18
    10e8:	70 0d       	add	r23, r0
    10ea:	81 1d       	adc	r24, r1
    10ec:	11 24       	eor	r1, r1
    10ee:	91 1d       	adc	r25, r1
    10f0:	08 95       	ret

000010f2 <__muluhisi3>:
    10f2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__umulhisi3>
    10f6:	a5 9f       	mul	r26, r21
    10f8:	90 0d       	add	r25, r0
    10fa:	b4 9f       	mul	r27, r20
    10fc:	90 0d       	add	r25, r0
    10fe:	a4 9f       	mul	r26, r20
    1100:	80 0d       	add	r24, r0
    1102:	91 1d       	adc	r25, r1
    1104:	11 24       	eor	r1, r1
    1106:	08 95       	ret

00001108 <_exit>:
    1108:	f8 94       	cli

0000110a <__stop_program>:
    110a:	ff cf       	rjmp	.-2      	; 0x110a <__stop_program>
