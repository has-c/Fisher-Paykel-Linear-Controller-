
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000113e  000011d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000113e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007c8  00800108  00800108  000011da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022f8  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab0  00000000  00000000  00003674  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc1  00000000  00000000  00004124  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  000050e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fd  00000000  00000000  0000543c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e41  00000000  00000000  00005c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00006a7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__vector_11>
      30:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e3       	ldi	r30, 0x3E	; 62
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	28 e0       	ldi	r18, 0x08	; 8
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3d       	cpi	r26, 0xD0	; 208
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <main>
      9e:	0c 94 9d 08 	jmp	0x113a	; 0x113a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#define OPAMP_VOLTAGE_GAIN 27
#define LEVEL_SHIFT

/**************************************************************ADC Intialisation**************************************************************/
void ADC_Init(){
	ADMUX &= ~(1<<REFS1) | ~(1<<REFS0);										//Select Reference Channel to be AREF
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);					//Enables ADC and adds a prescaler of 128 bits
      ae:	ea e7       	ldi	r30, 0x7A	; 122
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 81       	ld	r24, Z
      b4:	87 68       	ori	r24, 0x87	; 135
      b6:	80 83       	st	Z, r24
      b8:	08 95       	ret

000000ba <ADC_Read>:
}

/**************************************************************ADC Polling**************************************************************/
uint32_t ADC_Read(){
	while(!(ADCSRA &&(1<<ADIF)));
      ba:	ea e7       	ldi	r30, 0x7A	; 122
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	88 23       	and	r24, r24
      c2:	e9 f3       	breq	.-6      	; 0xbe <ADC_Read+0x4>
	return ADC;
      c4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      c8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
}
      d0:	08 95       	ret

000000d2 <ADC_Calculate>:

/**************************************************************ADC Conversion**************************************************************/
/*Note this could've done using floats but our microcontroller does not have a floating point unit and thus computations using floats is more 
computationally extensive. Hence we opted for unsigned integers and are forced to divide by powers of 10 in various places*/ 
uint32_t ADC_Calculate(){
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
	uint32_t  adcValue = ADC_Read();
      d6:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
      da:	9b 01       	movw	r18, r22
      dc:	ac 01       	movw	r20, r24
	uint32_t measuredVoltage = ((adcValue*1000)/ADC_RESOLUTION) * UPPER_LIMIT_VOLTAGE;						
	return measuredVoltage;
      de:	a8 ee       	ldi	r26, 0xE8	; 232
      e0:	b3 e0       	ldi	r27, 0x03	; 3
      e2:	0e 94 92 08 	call	0x1124	; 0x1124 <__muluhisi3>
      e6:	dc 01       	movw	r26, r24
      e8:	cb 01       	movw	r24, r22
      ea:	07 2e       	mov	r0, r23
      ec:	7a e0       	ldi	r23, 0x0A	; 10
      ee:	b6 95       	lsr	r27
      f0:	a7 95       	ror	r26
      f2:	97 95       	ror	r25
      f4:	87 95       	ror	r24
      f6:	7a 95       	dec	r23
      f8:	d1 f7       	brne	.-12     	; 0xee <ADC_Calculate+0x1c>
      fa:	70 2d       	mov	r23, r0
      fc:	8c 01       	movw	r16, r24
      fe:	9d 01       	movw	r18, r26
     100:	00 0f       	add	r16, r16
     102:	11 1f       	adc	r17, r17
     104:	22 1f       	adc	r18, r18
     106:	33 1f       	adc	r19, r19
     108:	00 0f       	add	r16, r16
     10a:	11 1f       	adc	r17, r17
     10c:	22 1f       	adc	r18, r18
     10e:	33 1f       	adc	r19, r19
     110:	bc 01       	movw	r22, r24
     112:	cd 01       	movw	r24, r26
     114:	60 0f       	add	r22, r16
     116:	71 1f       	adc	r23, r17
     118:	82 1f       	adc	r24, r18
     11a:	93 1f       	adc	r25, r19
}
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	08 95       	ret

00000122 <ADC_LHSVoltage>:

/**************************************************************Read LHS Voltage**************************************************************/
uint32_t ADC_LHSVoltage(){
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
     122:	ec e7       	ldi	r30, 0x7C	; 124
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     12c:	ea e7       	ldi	r30, 0x7A	; 122
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	80 64       	ori	r24, 0x40	; 64
     134:	80 83       	st	Z, r24
	uint32_t lhsVoltage = ADC_Calculate(); //calculates measured voltage 
     136:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_Calculate>
     13a:	9b 01       	movw	r18, r22
     13c:	ac 01       	movw	r20, r24
	return (lhsVoltage*OPAMP_VOLTAGE_GAIN/100); //return a 4 digit number that is the LHS voltage
     13e:	ab e1       	ldi	r26, 0x1B	; 27
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	0e 94 92 08 	call	0x1124	; 0x1124 <__muluhisi3>
     146:	24 e6       	ldi	r18, 0x64	; 100
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	40 e0       	ldi	r20, 0x00	; 0
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
}
     152:	ca 01       	movw	r24, r20
     154:	b9 01       	movw	r22, r18
     156:	08 95       	ret

00000158 <ADC_RHSVoltage>:

/**************************************************************Read RHS Voltage**************************************************************/
uint32_t ADC_RHSVoltage(){
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1));
     158:	ec e7       	ldi	r30, 0x7C	; 124
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	81 7f       	andi	r24, 0xF1	; 241
     160:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX0);
     162:	80 81       	ld	r24, Z
     164:	81 60       	ori	r24, 0x01	; 1
     166:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     168:	ea e7       	ldi	r30, 0x7A	; 122
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	80 64       	ori	r24, 0x40	; 64
     170:	80 83       	st	Z, r24
	uint32_t rhsVoltage = ADC_Calculate();
     172:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_Calculate>
     176:	9b 01       	movw	r18, r22
     178:	ac 01       	movw	r20, r24
	return (rhsVoltage*OPAMP_VOLTAGE_GAIN/100);
     17a:	ab e1       	ldi	r26, 0x1B	; 27
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	0e 94 92 08 	call	0x1124	; 0x1124 <__muluhisi3>
     182:	24 e6       	ldi	r18, 0x64	; 100
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e0       	ldi	r20, 0x00	; 0
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
}
     18e:	ca 01       	movw	r24, r20
     190:	b9 01       	movw	r22, r18
     192:	08 95       	ret

00000194 <PWM_Init>:
/**************************************************************Macros**************************************************************/
#define PWM_FREQUENCY 1000

/**************************************************************PWM Intialisation**************************************************************/
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);												//CTC mode and no prescaler
     194:	e1 e8       	ldi	r30, 0x81	; 129
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	8b 60       	ori	r24, 0x0B	; 11
     19c:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); 														//Enabling interrupts for match on OCR1A and OCR1B (trigger points)
     19e:	ef e6       	ldi	r30, 0x6F	; 111
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	86 60       	ori	r24, 0x06	; 6
     1a6:	80 83       	st	Z, r24
     1a8:	08 95       	ret

000001aa <PWM_Change>:
	
}

/**************************************************************PWM Intialisation**************************************************************/
void PWM_Change(uint16_t topValue, uint16_t bottomValue){									//Allows us to change the PWM Waveform by changing the trigger points OCR1A and OCR1B
	OCR1A = topValue;
     1aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
     1b2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     1b6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     1ba:	08 95       	ret

000001bc <PWM_ConvertTimerValueToDutyCycle>:
	
}

/**************************************************************PWM Conversion**************************************************************/
uint8_t PWM_ConvertTimerValueToDutyCycle(){													//Converts the timer value to a more user readable duty-cycle value 
	return ((dutyCycle*125)/100);
     1bc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <dutyCycle>
     1c0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <dutyCycle+0x1>
     1c4:	4d e7       	ldi	r20, 0x7D	; 125
     1c6:	48 9f       	mul	r20, r24
     1c8:	90 01       	movw	r18, r0
     1ca:	49 9f       	mul	r20, r25
     1cc:	30 0d       	add	r19, r0
     1ce:	11 24       	eor	r1, r1
     1d0:	36 95       	lsr	r19
     1d2:	27 95       	ror	r18
     1d4:	36 95       	lsr	r19
     1d6:	27 95       	ror	r18
     1d8:	ab e7       	ldi	r26, 0x7B	; 123
     1da:	b4 e1       	ldi	r27, 0x14	; 20
     1dc:	0e 94 83 08 	call	0x1106	; 0x1106 <__umulhisi3>
     1e0:	96 95       	lsr	r25
     1e2:	87 95       	ror	r24
}
     1e4:	08 95       	ret

000001e6 <PWM_CalculateDeadTime>:

/**************************************************************PWM Dead-Time**************************************************************/
uint16_t PWM_CalculateDeadTime(){															//Calculates dead-zone to set up the PWM waveform 
	return (((5000/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; 
     1e6:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <frequency>
     1ea:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <frequency+0x1>
     1ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <noOfWaves>
     1f2:	88 e8       	ldi	r24, 0x88	; 136
     1f4:	93 e1       	ldi	r25, 0x13	; 19
     1f6:	0e 94 39 08 	call	0x1072	; 0x1072 <__udivmodhi4>
     1fa:	62 1b       	sub	r22, r18
     1fc:	71 09       	sbc	r23, r1
}
     1fe:	8d e7       	ldi	r24, 0x7D	; 125
     200:	28 2f       	mov	r18, r24
     202:	26 9f       	mul	r18, r22
     204:	c0 01       	movw	r24, r0
     206:	27 9f       	mul	r18, r23
     208:	90 0d       	add	r25, r0
     20a:	11 24       	eor	r1, r1
     20c:	08 95       	ret

0000020e <UART_Init>:

/**************************************************************Decimal to ASCII Conversion**************************************************************/
uint8_t UART_ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
     20e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     212:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     216:	e1 ec       	ldi	r30, 0xC1	; 193
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 e9       	ldi	r24, 0x90	; 144
     21c:	80 83       	st	Z, r24
     21e:	80 81       	ld	r24, Z
     220:	88 64       	ori	r24, 0x48	; 72
     222:	80 83       	st	Z, r24
     224:	86 e0       	ldi	r24, 0x06	; 6
     226:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     22a:	08 95       	ret

0000022c <UART_Transmit>:
     22c:	e1 ec       	ldi	r30, 0xC1	; 193
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	90 81       	ld	r25, Z
     232:	9f 7e       	andi	r25, 0xEF	; 239
     234:	90 83       	st	Z, r25
     236:	90 81       	ld	r25, Z
     238:	9f 77       	andi	r25, 0x7F	; 127
     23a:	90 83       	st	Z, r25
     23c:	e0 ec       	ldi	r30, 0xC0	; 192
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	90 81       	ld	r25, Z
     242:	99 23       	and	r25, r25
     244:	e9 f3       	breq	.-6      	; 0x240 <UART_Transmit+0x14>
     246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     24a:	08 95       	ret

0000024c <UART_InterpretPumpingEffort>:

/**************************************************************Mass-Flow Control Value Interpretation**************************************************************/
/*Puropose: This function allows the controller to interpret the mass-flow control (MFC) value sent by the master. This function changes duty cyle in an effort 
to adjust stroke length which is proportionally related to exerted pumping effort*/
void UART_InterpretPumpingEffort(){
	if(pumpingEffort==255){																					//MFC at maximum
     24c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     250:	8f 3f       	cpi	r24, 0xFF	; 255
     252:	71 f4       	brne	.+28     	; 0x270 <UART_InterpretPumpingEffort+0x24>
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
     254:	e4 e6       	ldi	r30, 0x64	; 100
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	80 71       	andi	r24, 0x10	; 16
     25c:	80 83       	st	Z, r24
		power_all_enable();
		dutyCycle = 99;
     25e:	83 e6       	ldi	r24, 0x63	; 99
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <dutyCycle+0x1>
     266:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <dutyCycle>
		lowPowerMode = false;
     26a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lowPowerMode>
     26e:	08 95       	ret
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){														
     270:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     274:	88 23       	and	r24, r24
     276:	59 f1       	breq	.+86     	; 0x2ce <UART_InterpretPumpingEffort+0x82>
     278:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     27c:	83 3b       	cpi	r24, 0xB3	; 179
     27e:	38 f5       	brcc	.+78     	; 0x2ce <UART_InterpretPumpingEffort+0x82>
     280:	e4 e6       	ldi	r30, 0x64	; 100
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	80 71       	andi	r24, 0x10	; 16
     288:	80 83       	st	Z, r24
		power_all_enable();
		if(!lowPowerMode){
     28a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     28e:	81 11       	cpse	r24, r1
     290:	0a c0       	rjmp	.+20     	; 0x2a6 <UART_InterpretPumpingEffort+0x5a>
			frequency /= 2;																					//Frequency is halved to maintain the current operating frequency
     292:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <frequency>
     296:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <frequency+0x1>
     29a:	96 95       	lsr	r25
     29c:	87 95       	ror	r24
     29e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <frequency+0x1>
     2a2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <frequency>
		}
		lowPowerMode = true; 																				//Turns on low power mode meaning we are only using one pair of drivers
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lowPowerMode>
		dutyCycle = (LOW_POWER_PROPORTIONALITY_CONSTANT*pumpingEffort + LOW_POWER_INTERCEPT)/100;			//Low power relationship between duty cycle and pumping effort - found through analysis
     2ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     2b0:	2e e1       	ldi	r18, 0x1E	; 30
     2b2:	82 9f       	mul	r24, r18
     2b4:	c0 01       	movw	r24, r0
     2b6:	11 24       	eor	r1, r1
     2b8:	8c 5e       	subi	r24, 0xEC	; 236
     2ba:	9a 4f       	sbci	r25, 0xFA	; 250
     2bc:	64 e6       	ldi	r22, 0x64	; 100
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	0e 94 4d 08 	call	0x109a	; 0x109a <__divmodhi4>
     2c4:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <dutyCycle+0x1>
     2c8:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <dutyCycle>
     2cc:	08 95       	ret
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){													//Higher MFC range, 
     2ce:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     2d2:	83 3b       	cpi	r24, 0xB3	; 179
     2d4:	40 f1       	brcs	.+80     	; 0x326 <UART_InterpretPumpingEffort+0xda>
     2d6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     2da:	8f 3f       	cpi	r24, 0xFF	; 255
     2dc:	21 f1       	breq	.+72     	; 0x326 <UART_InterpretPumpingEffort+0xda>
     2de:	e4 e6       	ldi	r30, 0x64	; 100
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	80 71       	andi	r24, 0x10	; 16
     2e6:	80 83       	st	Z, r24
		power_all_enable();
		if(lowPowerMode){
     2e8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     2ec:	88 23       	and	r24, r24
     2ee:	51 f0       	breq	.+20     	; 0x304 <UART_InterpretPumpingEffort+0xb8>
			frequency *= 2;																					//Frequency is doubled to maintain the current operating frequency
     2f0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <frequency>
     2f4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <frequency+0x1>
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <frequency+0x1>
     300:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <frequency>
		}
		lowPowerMode = false;
     304:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lowPowerMode>
		dutyCycle = HIGH_POWER_PROPORTIONALITY_CONSTANT*pumpingEffort/100;									//High power relationship between duty cycle and pumping effort - again found through analysis
     308:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     30c:	25 e2       	ldi	r18, 0x25	; 37
     30e:	82 9f       	mul	r24, r18
     310:	c0 01       	movw	r24, r0
     312:	11 24       	eor	r1, r1
     314:	64 e6       	ldi	r22, 0x64	; 100
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 4d 08 	call	0x109a	; 0x109a <__divmodhi4>
     31c:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <dutyCycle+0x1>
     320:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <dutyCycle>
     324:	08 95       	ret
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
     326:	e4 e6       	ldi	r30, 0x64	; 100
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	80 81       	ld	r24, Z
     32c:	8f 6e       	ori	r24, 0xEF	; 239
     32e:	80 83       	st	Z, r24
	}else{ 																									//When a zero or other undefined character is received through the master turn off the coil
		power_all_disable(); 																				//Disable all units																			
		power_usart0_enable();																				//Enable UART so that communication can still occur
     330:	80 81       	ld	r24, Z
     332:	8d 7f       	andi	r24, 0xFD	; 253
     334:	80 83       	st	Z, r24
		dutyCycle = 0;																						
     336:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <dutyCycle+0x1>
     33a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <dutyCycle>
     33e:	08 95       	ret

00000340 <MFCmodulator>:

}

/**************************************************************Mass Flow Control**************************************************************/

void MFCmodulator(uint8_t requiredValue, uint8_t currentValue){
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	18 2f       	mov	r17, r24
     350:	d6 2f       	mov	r29, r22
	uint8_t firstDigit = 0;
	uint8_t secondDigit = 0;
	uint8_t thirdDigit = 0;
																											//Shown below are the ASCII conversions
	UART_Transmit(13); 																						//carriage return
     352:	8d e0       	ldi	r24, 0x0D	; 13
     354:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(123); 																					//{
     358:	8b e7       	ldi	r24, 0x7B	; 123
     35a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); 																						//line feed 
     35e:	8a e0       	ldi	r24, 0x0A	; 10
     360:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     364:	8d e0       	ldi	r24, 0x0D	; 13
     366:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//LCC Identifier 
	UART_Transmit(34); 																						//"
     36a:	82 e2       	ldi	r24, 0x22	; 34
     36c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(51);																						//3
     370:	83 e3       	ldi	r24, 0x33	; 51
     372:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     376:	82 e2       	ldi	r24, 0x22	; 34
     378:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     37c:	8a e3       	ldi	r24, 0x3A	; 58
     37e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>

																											//MFC 
	UART_Transmit(10); 																						//Line feed
     382:	8a e0       	ldi	r24, 0x0A	; 10
     384:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     388:	8d e0       	ldi	r24, 0x0D	; 13
     38a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(123);																						//{
     38e:	8b e7       	ldi	r24, 0x7B	; 123
     390:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10);																						//Line feed
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     39a:	8d e0       	ldi	r24, 0x0D	; 13
     39c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//MFC letter setup
	UART_Transmit(34); 																						//'
     3a0:	82 e2       	ldi	r24, 0x22	; 34
     3a2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(109);																						//m
     3a6:	8d e6       	ldi	r24, 0x6D	; 109
     3a8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(102);																						//f
     3ac:	86 e6       	ldi	r24, 0x66	; 102
     3ae:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(99);																						//c
     3b2:	83 e6       	ldi	r24, 0x63	; 99
     3b4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     3b8:	82 e2       	ldi	r24, 0x22	; 34
     3ba:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     3be:	8a e3       	ldi	r24, 0x3A	; 58
     3c0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	 
																											//MFC Values 
	UART_Transmit(123); 																					//{
     3c4:	8b e7       	ldi	r24, 0x7B	; 123
     3c6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     3ca:	82 e2       	ldi	r24, 0x22	; 34
     3cc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     3d0:	82 e7       	ldi	r24, 0x72	; 114
     3d2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(101);																						//e
     3d6:	85 e6       	ldi	r24, 0x65	; 101
     3d8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(113);																						//q
     3dc:	81 e7       	ldi	r24, 0x71	; 113
     3de:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     3e2:	82 e2       	ldi	r24, 0x22	; 34
     3e4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     3e8:	8a e3       	ldi	r24, 0x3A	; 58
     3ea:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     3ee:	82 e2       	ldi	r24, 0x22	; 34
     3f0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit the required MFC value 
	firstDigit = requiredValue/100;																			//The dividing by powers of 10 and multiplying by powers of 10 is necessary to extract a digit from a number 
     3f4:	c9 e2       	ldi	r28, 0x29	; 41
     3f6:	1c 9f       	mul	r17, r28
     3f8:	21 2d       	mov	r18, r1
     3fa:	11 24       	eor	r1, r1
     3fc:	22 95       	swap	r18
     3fe:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (requiredValue-(firstDigit*100))/10;
     400:	0f 2e       	mov	r0, r31
     402:	fc e9       	ldi	r31, 0x9C	; 156
     404:	df 2e       	mov	r13, r31
     406:	f0 2d       	mov	r31, r0
     408:	3d 2d       	mov	r19, r13
     40a:	32 03       	mulsu	r19, r18
     40c:	c0 01       	movw	r24, r0
     40e:	11 24       	eor	r1, r1
     410:	81 0f       	add	r24, r17
     412:	91 1d       	adc	r25, r1
     414:	0f 2e       	mov	r0, r31
     416:	fa e0       	ldi	r31, 0x0A	; 10
     418:	ef 2e       	mov	r14, r31
     41a:	f1 2c       	mov	r15, r1
     41c:	f0 2d       	mov	r31, r0
     41e:	b7 01       	movw	r22, r14
     420:	0e 94 4d 08 	call	0x109a	; 0x109a <__divmodhi4>
     424:	06 2f       	mov	r16, r22
     426:	10 5d       	subi	r17, 0xD0	; 208
     428:	2d 9d       	mul	r18, r13
     42a:	10 0d       	add	r17, r0
     42c:	11 24       	eor	r1, r1
	thirdDigit = requiredValue - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     42e:	80 e3       	ldi	r24, 0x30	; 48
     430:	82 0f       	add	r24, r18
     432:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit)); 
     436:	80 e3       	ldi	r24, 0x30	; 48
     438:	80 0f       	add	r24, r16
     43a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     43e:	00 0f       	add	r16, r16
     440:	80 2f       	mov	r24, r16
     442:	88 0f       	add	r24, r24
     444:	88 0f       	add	r24, r24
     446:	08 0f       	add	r16, r24
     448:	81 2f       	mov	r24, r17
     44a:	80 1b       	sub	r24, r16
     44c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     450:	82 e2       	ldi	r24, 0x22	; 34
     452:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);																						//,
     456:	8c e2       	ldi	r24, 0x2C	; 44
     458:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	

	UART_Transmit(34);																						//"
     45c:	82 e2       	ldi	r24, 0x22	; 34
     45e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(99);																						//c
     462:	83 e6       	ldi	r24, 0x63	; 99
     464:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(117);																						//u
     468:	85 e7       	ldi	r24, 0x75	; 117
     46a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     46e:	82 e7       	ldi	r24, 0x72	; 114
     470:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     474:	82 e2       	ldi	r24, 0x22	; 34
     476:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     47a:	8a e3       	ldi	r24, 0x3A	; 58
     47c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     480:	82 e2       	ldi	r24, 0x22	; 34
     482:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit current MFC value
	firstDigit = currentValue/100;																			//The dividing by powers of 10 and multiplying by powers of 10 is necessary to extract a digit from a number 
     486:	dc 9f       	mul	r29, r28
     488:	21 2d       	mov	r18, r1
     48a:	11 24       	eor	r1, r1
     48c:	22 95       	swap	r18
     48e:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (currentValue-(firstDigit*100))/10;
     490:	3d 2d       	mov	r19, r13
     492:	32 03       	mulsu	r19, r18
     494:	c0 01       	movw	r24, r0
     496:	11 24       	eor	r1, r1
     498:	8d 0f       	add	r24, r29
     49a:	91 1d       	adc	r25, r1
     49c:	b7 01       	movw	r22, r14
     49e:	0e 94 4d 08 	call	0x109a	; 0x109a <__divmodhi4>
     4a2:	c6 2f       	mov	r28, r22
     4a4:	d0 5d       	subi	r29, 0xD0	; 208
     4a6:	2d 9d       	mul	r18, r13
     4a8:	d0 0d       	add	r29, r0
     4aa:	11 24       	eor	r1, r1
	thirdDigit = currentValue - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     4ac:	80 e3       	ldi	r24, 0x30	; 48
     4ae:	82 0f       	add	r24, r18
     4b0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     4b4:	80 e3       	ldi	r24, 0x30	; 48
     4b6:	8c 0f       	add	r24, r28
     4b8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     4bc:	cc 0f       	add	r28, r28
     4be:	8c 2f       	mov	r24, r28
     4c0:	88 0f       	add	r24, r24
     4c2:	88 0f       	add	r24, r24
     4c4:	c8 0f       	add	r28, r24
     4c6:	8d 2f       	mov	r24, r29
     4c8:	8c 1b       	sub	r24, r28
     4ca:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
	UART_Transmit(34);																						//"
     4ce:	82 e2       	ldi	r24, 0x22	; 34
     4d0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(125);																						//}
     4d4:	8d e7       	ldi	r24, 0x7D	; 125
     4d6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);																						//,
     4da:	8c e2       	ldi	r24, 0x2C	; 44
     4dc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); 																						//Line feed
     4e0:	8a e0       	ldi	r24, 0x0A	; 10
     4e2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     4e6:	8d e0       	ldi	r24, 0x0D	; 13
     4e8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	 
	
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	08 95       	ret

000004fc <VERmodulator>:

/**************************************************************Version Number**************************************************************/
void VERmodulator(){
	UART_Transmit(34); 																						//"
     4fc:	82 e2       	ldi	r24, 0x22	; 34
     4fe:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(118);																						//v
     502:	86 e7       	ldi	r24, 0x76	; 118
     504:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(101);																						//e
     508:	85 e6       	ldi	r24, 0x65	; 101
     50a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     50e:	82 e7       	ldi	r24, 0x72	; 114
     510:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     514:	82 e2       	ldi	r24, 0x22	; 34
     516:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     51a:	8a e3       	ldi	r24, 0x3A	; 58
     51c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     520:	82 e2       	ldi	r24, 0x22	; 34
     522:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(49);																						//1
     526:	81 e3       	ldi	r24, 0x31	; 49
     528:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(46);																						//.
     52c:	8e e2       	ldi	r24, 0x2E	; 46
     52e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(50);																						//2
     532:	82 e3       	ldi	r24, 0x32	; 50
     534:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(46);																						//.
     538:	8e e2       	ldi	r24, 0x2E	; 46
     53a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(51);																						//3
     53e:	83 e3       	ldi	r24, 0x33	; 51
     540:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     544:	82 e2       	ldi	r24, 0x22	; 34
     546:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);																						//,
     54a:	8c e2       	ldi	r24, 0x2C	; 44
     54c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); 																						//Line feed 
     550:	8a e0       	ldi	r24, 0x0A	; 10
     552:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); 																						//carriage return
     556:	8d e0       	ldi	r24, 0x0D	; 13
     558:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
     55c:	08 95       	ret

0000055e <PARAMmodulator>:
	 
}

/**************************************************************Parameter Modulator**************************************************************/
void PARAMmodulator(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current){
     55e:	8f 92       	push	r8
     560:	9f 92       	push	r9
     562:	af 92       	push	r10
     564:	bf 92       	push	r11
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	c8 2f       	mov	r28, r24
     578:	96 2e       	mov	r9, r22
     57a:	69 01       	movw	r12, r18
     57c:	7a 01       	movw	r14, r20
	uint8_t firstDigit; 
	uint8_t secondDigit;
	uint8_t thirdDigit;
	uint8_t fourthDigit;

	UART_Transmit(34);																						//"
     57e:	82 e2       	ldi	r24, 0x22	; 34
     580:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(112);																						//p
     584:	80 e7       	ldi	r24, 0x70	; 112
     586:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(97);																						//a
     58a:	81 e6       	ldi	r24, 0x61	; 97
     58c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     590:	82 e7       	ldi	r24, 0x72	; 114
     592:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(97);																						//a
     596:	81 e6       	ldi	r24, 0x61	; 97
     598:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(109);																						//m
     59c:	8d e6       	ldi	r24, 0x6D	; 109
     59e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     5a2:	82 e2       	ldi	r24, 0x22	; 34
     5a4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     5a8:	8a e3       	ldi	r24, 0x3A	; 58
     5aa:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(123);																						//{
     5ae:	8b e7       	ldi	r24, 0x7B	; 123
     5b0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>

																											//Transmit Parameters
	UART_Transmit(34); 																						//"
     5b4:	82 e2       	ldi	r24, 0x22	; 34
     5b6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(112); 																					//p
     5ba:	80 e7       	ldi	r24, 0x70	; 112
     5bc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(119); 																					//w
     5c0:	87 e7       	ldi	r24, 0x77	; 119
     5c2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r 
     5c6:	82 e7       	ldi	r24, 0x72	; 114
     5c8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     5cc:	82 e2       	ldi	r24, 0x22	; 34
     5ce:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58); 																						//:
     5d2:	8a e3       	ldi	r24, 0x3A	; 58
     5d4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     5d8:	82 e2       	ldi	r24, 0x22	; 34
     5da:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit Power 
	firstDigit = averagePower/100;																			//The dividing by powers of 10 and multiplying by powers of 10 is necessary to extract a digit from a number 
     5de:	d9 e2       	ldi	r29, 0x29	; 41
     5e0:	cd 9f       	mul	r28, r29
     5e2:	21 2d       	mov	r18, r1
     5e4:	11 24       	eor	r1, r1
     5e6:	22 95       	swap	r18
     5e8:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (averagePower-(firstDigit*100))/10;
     5ea:	1c e9       	ldi	r17, 0x9C	; 156
     5ec:	12 03       	mulsu	r17, r18
     5ee:	c0 01       	movw	r24, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	8c 0f       	add	r24, r28
     5f4:	91 1d       	adc	r25, r1
     5f6:	0f 2e       	mov	r0, r31
     5f8:	fa e0       	ldi	r31, 0x0A	; 10
     5fa:	af 2e       	mov	r10, r31
     5fc:	b1 2c       	mov	r11, r1
     5fe:	f0 2d       	mov	r31, r0
     600:	b5 01       	movw	r22, r10
     602:	0e 94 4d 08 	call	0x109a	; 0x109a <__divmodhi4>
     606:	86 2e       	mov	r8, r22
     608:	c0 5d       	subi	r28, 0xD0	; 208
     60a:	21 9f       	mul	r18, r17
     60c:	c0 0d       	add	r28, r0
     60e:	11 24       	eor	r1, r1
	thirdDigit = averagePower - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     610:	80 e3       	ldi	r24, 0x30	; 48
     612:	82 0f       	add	r24, r18
     614:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     618:	80 e3       	ldi	r24, 0x30	; 48
     61a:	88 0d       	add	r24, r8
     61c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(46); 																						//Decimal point
     620:	8e e2       	ldi	r24, 0x2E	; 46
     622:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     626:	88 0c       	add	r8, r8
     628:	88 2d       	mov	r24, r8
     62a:	88 0f       	add	r24, r24
     62c:	88 0f       	add	r24, r24
     62e:	88 0e       	add	r8, r24
     630:	8c 2f       	mov	r24, r28
     632:	88 19       	sub	r24, r8
     634:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(87); 																						//W
     638:	87 e5       	ldi	r24, 0x57	; 87
     63a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     63e:	82 e2       	ldi	r24, 0x22	; 34
     640:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44); 																						//,
     644:	8c e2       	ldi	r24, 0x2C	; 44
     646:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	 
	 
	
																											//Transmit Frequency
	UART_Transmit(34); 																						//"
     64a:	82 e2       	ldi	r24, 0x22	; 34
     64c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(102);																						//f
     650:	86 e6       	ldi	r24, 0x66	; 102
     652:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     656:	82 e7       	ldi	r24, 0x72	; 114
     658:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(101);																						//e
     65c:	85 e6       	ldi	r24, 0x65	; 101
     65e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(113);																						//q
     662:	81 e7       	ldi	r24, 0x71	; 113
     664:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     668:	82 e2       	ldi	r24, 0x22	; 34
     66a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58);																						//:
     66e:	8a e3       	ldi	r24, 0x3A	; 58
     670:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     674:	82 e2       	ldi	r24, 0x22	; 34
     676:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	firstDigit = operatingFrequency/10;																		//The dividing by powers of 10 and multiplying by powers of 10 is necessary to extract a digit from a number 
     67a:	cd ec       	ldi	r28, 0xCD	; 205
     67c:	9c 9e       	mul	r9, r28
     67e:	c1 2d       	mov	r28, r1
     680:	11 24       	eor	r1, r1
     682:	c6 95       	lsr	r28
     684:	c6 95       	lsr	r28
     686:	c6 95       	lsr	r28
	secondDigit = operatingFrequency-(firstDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     688:	80 e3       	ldi	r24, 0x30	; 48
     68a:	8c 0f       	add	r24, r28
     68c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     690:	cc 0f       	add	r28, r28
     692:	8c 2f       	mov	r24, r28
     694:	88 0f       	add	r24, r24
     696:	88 0f       	add	r24, r24
     698:	c8 0f       	add	r28, r24
     69a:	80 e3       	ldi	r24, 0x30	; 48
     69c:	89 0d       	add	r24, r9
     69e:	8c 1b       	sub	r24, r28
     6a0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(72);																						//H
     6a4:	88 e4       	ldi	r24, 0x48	; 72
     6a6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(122);																						//z
     6aa:	8a e7       	ldi	r24, 0x7A	; 122
     6ac:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     6b0:	82 e2       	ldi	r24, 0x22	; 34
     6b2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);																						//,
     6b6:	8c e2       	ldi	r24, 0x2C	; 44
     6b8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit Current
	UART_Transmit(34); 																						//"
     6bc:	82 e2       	ldi	r24, 0x22	; 34
     6be:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(99); 																						//c
     6c2:	83 e6       	ldi	r24, 0x63	; 99
     6c4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(117); 																					//u
     6c8:	85 e7       	ldi	r24, 0x75	; 117
     6ca:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     6ce:	82 e7       	ldi	r24, 0x72	; 114
     6d0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(114);																						//r
     6d4:	82 e7       	ldi	r24, 0x72	; 114
     6d6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     6da:	82 e2       	ldi	r24, 0x22	; 34
     6dc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58); 																						//:
     6e0:	8a e3       	ldi	r24, 0x3A	; 58
     6e2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34);																						//"
     6e6:	82 e2       	ldi	r24, 0x22	; 34
     6e8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	firstDigit = current/100;																				//The dividing by powers of 10 and multiplying by powers of 10 is necessary to extract a digit from a number 
     6ec:	0d 9f       	mul	r16, r29
     6ee:	21 2d       	mov	r18, r1
     6f0:	11 24       	eor	r1, r1
     6f2:	22 95       	swap	r18
     6f4:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (current-(firstDigit*100))/10;
     6f6:	12 03       	mulsu	r17, r18
     6f8:	c0 01       	movw	r24, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	80 0f       	add	r24, r16
     6fe:	91 1d       	adc	r25, r1
     700:	b5 01       	movw	r22, r10
     702:	0e 94 4d 08 	call	0x109a	; 0x109a <__divmodhi4>
     706:	c6 2f       	mov	r28, r22
     708:	00 5d       	subi	r16, 0xD0	; 208
     70a:	21 9f       	mul	r18, r17
     70c:	00 0d       	add	r16, r0
     70e:	11 24       	eor	r1, r1
	thirdDigit = current - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));														
     710:	80 e3       	ldi	r24, 0x30	; 48
     712:	82 0f       	add	r24, r18
     714:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     718:	80 e3       	ldi	r24, 0x30	; 48
     71a:	8c 0f       	add	r24, r28
     71c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     720:	cc 0f       	add	r28, r28
     722:	8c 2f       	mov	r24, r28
     724:	88 0f       	add	r24, r24
     726:	88 0f       	add	r24, r24
     728:	c8 0f       	add	r28, r24
     72a:	80 2f       	mov	r24, r16
     72c:	8c 1b       	sub	r24, r28
     72e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(109); 																					//m
     732:	8d e6       	ldi	r24, 0x6D	; 109
     734:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(65); 																						//A
     738:	81 e4       	ldi	r24, 0x41	; 65
     73a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); 																						//"
     73e:	82 e2       	ldi	r24, 0x22	; 34
     740:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44); 																						//,
     744:	8c e2       	ldi	r24, 0x2C	; 44
     746:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
																											//Transmit average voltage across the coil
	 
	UART_Transmit(34); //"
     74a:	82 e2       	ldi	r24, 0x22	; 34
     74c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(118); //v
     750:	86 e7       	ldi	r24, 0x76	; 118
     752:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(111); //o
     756:	8f e6       	ldi	r24, 0x6F	; 111
     758:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(108); //l
     75c:	8c e6       	ldi	r24, 0x6C	; 108
     75e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(116); //t
     762:	84 e7       	ldi	r24, 0x74	; 116
     764:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); //"
     768:	82 e2       	ldi	r24, 0x22	; 34
     76a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(58); //:
     76e:	8a e3       	ldi	r24, 0x3A	; 58
     770:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); //"
     774:	82 e2       	ldi	r24, 0x22	; 34
     776:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	firstDigit = appliedVoltage/1000;
     77a:	c7 01       	movw	r24, r14
     77c:	b6 01       	movw	r22, r12
     77e:	28 ee       	ldi	r18, 0xE8	; 232
     780:	33 e0       	ldi	r19, 0x03	; 3
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
     78a:	12 2f       	mov	r17, r18
	secondDigit = (appliedVoltage-(firstDigit*1000))/100;
     78c:	28 ee       	ldi	r18, 0xE8	; 232
     78e:	33 e0       	ldi	r19, 0x03	; 3
     790:	12 9f       	mul	r17, r18
     792:	c0 01       	movw	r24, r0
     794:	13 9f       	mul	r17, r19
     796:	90 0d       	add	r25, r0
     798:	11 24       	eor	r1, r1
     79a:	09 2e       	mov	r0, r25
     79c:	00 0c       	add	r0, r0
     79e:	aa 0b       	sbc	r26, r26
     7a0:	bb 0b       	sbc	r27, r27
     7a2:	46 01       	movw	r8, r12
     7a4:	57 01       	movw	r10, r14
     7a6:	88 1a       	sub	r8, r24
     7a8:	99 0a       	sbc	r9, r25
     7aa:	aa 0a       	sbc	r10, r26
     7ac:	bb 0a       	sbc	r11, r27
     7ae:	c5 01       	movw	r24, r10
     7b0:	b4 01       	movw	r22, r8
     7b2:	24 e6       	ldi	r18, 0x64	; 100
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
     7be:	d2 2f       	mov	r29, r18
	thirdDigit = (appliedVoltage - (firstDigit*1000) - (secondDigit*100))/10;
     7c0:	04 e6       	ldi	r16, 0x64	; 100
     7c2:	02 9f       	mul	r16, r18
     7c4:	c0 01       	movw	r24, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	09 2e       	mov	r0, r25
     7ca:	00 0c       	add	r0, r0
     7cc:	aa 0b       	sbc	r26, r26
     7ce:	bb 0b       	sbc	r27, r27
     7d0:	a5 01       	movw	r20, r10
     7d2:	94 01       	movw	r18, r8
     7d4:	28 1b       	sub	r18, r24
     7d6:	39 0b       	sbc	r19, r25
     7d8:	4a 0b       	sbc	r20, r26
     7da:	5b 0b       	sbc	r21, r27
     7dc:	ca 01       	movw	r24, r20
     7de:	b9 01       	movw	r22, r18
     7e0:	2a e0       	ldi	r18, 0x0A	; 10
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
     7ec:	c2 2f       	mov	r28, r18
     7ee:	8c 2d       	mov	r24, r12
     7f0:	38 e1       	ldi	r19, 0x18	; 24
     7f2:	13 9f       	mul	r17, r19
     7f4:	80 0d       	add	r24, r0
     7f6:	11 24       	eor	r1, r1
     7f8:	80 5d       	subi	r24, 0xD0	; 208
     7fa:	c8 2e       	mov	r12, r24
     7fc:	0d 9f       	mul	r16, r29
     7fe:	c0 18       	sub	r12, r0
     800:	11 24       	eor	r1, r1
	fourthDigit = appliedVoltage -(firstDigit*1000) - (secondDigit*100) - (thirdDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     802:	80 e3       	ldi	r24, 0x30	; 48
     804:	81 0f       	add	r24, r17
     806:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     80a:	80 e3       	ldi	r24, 0x30	; 48
     80c:	8d 0f       	add	r24, r29
     80e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(46); //decimal point
     812:	8e e2       	ldi	r24, 0x2E	; 46
     814:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     818:	80 e3       	ldi	r24, 0x30	; 48
     81a:	8c 0f       	add	r24, r28
     81c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(fourthDigit));
     820:	cc 0f       	add	r28, r28
     822:	8c 2f       	mov	r24, r28
     824:	88 0f       	add	r24, r24
     826:	88 0f       	add	r24, r24
     828:	c8 0f       	add	r28, r24
     82a:	8c 2d       	mov	r24, r12
     82c:	8c 1b       	sub	r24, r28
     82e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(86); //V
     832:	86 e5       	ldi	r24, 0x56	; 86
     834:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(34); //"
     838:	82 e2       	ldi	r24, 0x22	; 34
     83a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	
	 
	UART_Transmit(125); //}
     83e:	8d e7       	ldi	r24, 0x7D	; 125
     840:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(44);//,
     844:	8c e2       	ldi	r24, 0x2C	; 44
     846:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); //line feed
     84a:	8a e0       	ldi	r24, 0x0A	; 10
     84c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); //carriage return
     850:	8d e0       	ldi	r24, 0x0D	; 13
     852:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	 
}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	bf 90       	pop	r11
     868:	af 90       	pop	r10
     86a:	9f 90       	pop	r9
     86c:	8f 90       	pop	r8
     86e:	08 95       	ret

00000870 <ERRORmodulator>:

/**************************************************************Error Modulator**************************************************************/
void ERRORmodulator(bool jamErrorFlag, bool collisionErrorFlag){  
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	d8 2f       	mov	r29, r24
     876:	c6 2f       	mov	r28, r22
	//error clear tells us whether we need to clear the error array
	if(clearErrorFlag){
     878:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <clearErrorFlag>
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <ERRORmodulator+0x64>
		UART_Transmit(34); //"
     880:	82 e2       	ldi	r24, 0x22	; 34
     882:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(99); //c
     886:	83 e6       	ldi	r24, 0x63	; 99
     888:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(108); //l
     88c:	8c e6       	ldi	r24, 0x6C	; 108
     88e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(114); //r
     892:	82 e7       	ldi	r24, 0x72	; 114
     894:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(34); //"
     898:	82 e2       	ldi	r24, 0x22	; 34
     89a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(58); //:
     89e:	8a e3       	ldi	r24, 0x3A	; 58
     8a0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(34); //"
     8a4:	82 e2       	ldi	r24, 0x22	; 34
     8a6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(101); //e
     8aa:	85 e6       	ldi	r24, 0x65	; 101
     8ac:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(119); //w
     8b0:	87 e7       	ldi	r24, 0x77	; 119
     8b2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(34); //"
     8b6:	82 e2       	ldi	r24, 0x22	; 34
     8b8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(44); //,
     8bc:	8c e2       	ldi	r24, 0x2C	; 44
     8be:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(10); //line feed
     8c2:	8a e0       	ldi	r24, 0x0A	; 10
     8c4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(13); //carriage return
     8c8:	8d e0       	ldi	r24, 0x0D	; 13
     8ca:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		clearErrorFlag = false;
     8ce:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <clearErrorFlag>
     8d2:	36 c0       	rjmp	.+108    	; 0x940 <__stack+0x41>
	}else{
		UART_Transmit(10); //line feed
     8d4:	8a e0       	ldi	r24, 0x0A	; 10
     8d6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		UART_Transmit(13); //carriage return
     8da:	8d e0       	ldi	r24, 0x0D	; 13
     8dc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
		
		if(collisionErrorFlag || jamErrorFlag) {
     8e0:	c1 11       	cpse	r28, r1
     8e2:	7c c0       	rjmp	.+248    	; 0x9dc <__stack+0xdd>
     8e4:	d1 11       	cpse	r29, r1
     8e6:	45 c0       	rjmp	.+138    	; 0x972 <__stack+0x73>
     8e8:	25 c0       	rjmp	.+74     	; 0x934 <__stack+0x35>
					UART_Transmit(44); //,
				}
			}

			if(collisionErrorFlag){ //compressor colliding
				UART_Transmit(34); //"
     8ea:	82 e2       	ldi	r24, 0x22	; 34
     8ec:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(99); //c
     8f0:	83 e6       	ldi	r24, 0x63	; 99
     8f2:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(111); //o
     8f6:	8f e6       	ldi	r24, 0x6F	; 111
     8f8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(108); //l
     8fc:	8c e6       	ldi	r24, 0x6C	; 108
     8fe:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(108); //l
     902:	8c e6       	ldi	r24, 0x6C	; 108
     904:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(105); //i
     908:	89 e6       	ldi	r24, 0x69	; 105
     90a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(115); //s
     90e:	83 e7       	ldi	r24, 0x73	; 115
     910:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(105); //i
     914:	89 e6       	ldi	r24, 0x69	; 105
     916:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(111); //o
     91a:	8f e6       	ldi	r24, 0x6F	; 111
     91c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(110); //n
     920:	8e e6       	ldi	r24, 0x6E	; 110
     922:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(34); //"
     926:	82 e2       	ldi	r24, 0x22	; 34
     928:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			}
			
			
			UART_Transmit(93); //[
     92c:	8d e5       	ldi	r24, 0x5D	; 93
     92e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
     932:	06 c0       	rjmp	.+12     	; 0x940 <__stack+0x41>
			
			}else{ //no errors present
			UART_Transmit(10); //line feed
     934:	8a e0       	ldi	r24, 0x0A	; 10
     936:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(13); //carriage return
     93a:	8d e0       	ldi	r24, 0x0D	; 13
     93c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	}
	
	
	//print final curly brackets
	
	UART_Transmit(10); //line feed
     940:	8a e0       	ldi	r24, 0x0A	; 10
     942:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); //carriage return
     946:	8d e0       	ldi	r24, 0x0D	; 13
     948:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(125); // }
     94c:	8d e7       	ldi	r24, 0x7D	; 125
     94e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); //line feed
     952:	8a e0       	ldi	r24, 0x0A	; 10
     954:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); //carriage return
     958:	8d e0       	ldi	r24, 0x0D	; 13
     95a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(125); // }
     95e:	8d e7       	ldi	r24, 0x7D	; 125
     960:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(10); //line feed
     964:	8a e0       	ldi	r24, 0x0A	; 10
     966:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
	UART_Transmit(13); //carriage return
     96a:	8d e0       	ldi	r24, 0x0D	; 13
     96c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>


     970:	4b c0       	rjmp	.+150    	; 0xa08 <__stack+0x109>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
     972:	82 e2       	ldi	r24, 0x22	; 34
     974:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(101); //e
     978:	85 e6       	ldi	r24, 0x65	; 101
     97a:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(119); //w
     97e:	87 e7       	ldi	r24, 0x77	; 119
     980:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(34); // "
     984:	82 e2       	ldi	r24, 0x22	; 34
     986:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(58); //:
     98a:	8a e3       	ldi	r24, 0x3A	; 58
     98c:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(91); //[
     990:	8b e5       	ldi	r24, 0x5B	; 91
     992:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
     996:	82 e2       	ldi	r24, 0x22	; 34
     998:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(106); //j
     99c:	8a e6       	ldi	r24, 0x6A	; 106
     99e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(97); //a
     9a2:	81 e6       	ldi	r24, 0x61	; 97
     9a4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(109); //m
     9a8:	8d e6       	ldi	r24, 0x6D	; 109
     9aa:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(34); //"
     9ae:	82 e2       	ldi	r24, 0x22	; 34
     9b0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
     9b4:	bb cf       	rjmp	.-138    	; 0x92c <__stack+0x2d>
			UART_Transmit(58); //:
			UART_Transmit(91); //[
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
     9b6:	82 e2       	ldi	r24, 0x22	; 34
     9b8:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(106); //j
     9bc:	8a e6       	ldi	r24, 0x6A	; 106
     9be:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(97); //a
     9c2:	81 e6       	ldi	r24, 0x61	; 97
     9c4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(109); //m
     9c8:	8d e6       	ldi	r24, 0x6D	; 109
     9ca:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				UART_Transmit(34); //"
     9ce:	82 e2       	ldi	r24, 0x22	; 34
     9d0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
				if(jamErrorFlag && collisionErrorFlag){
					UART_Transmit(44); //,
     9d4:	8c e2       	ldi	r24, 0x2C	; 44
     9d6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
     9da:	87 cf       	rjmp	.-242    	; 0x8ea <ERRORmodulator+0x7a>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
     9dc:	82 e2       	ldi	r24, 0x22	; 34
     9de:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(101); //e
     9e2:	85 e6       	ldi	r24, 0x65	; 101
     9e4:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(119); //w
     9e8:	87 e7       	ldi	r24, 0x77	; 119
     9ea:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(34); // "
     9ee:	82 e2       	ldi	r24, 0x22	; 34
     9f0:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(58); //:
     9f4:	8a e3       	ldi	r24, 0x3A	; 58
     9f6:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			UART_Transmit(91); //[
     9fa:	8b e5       	ldi	r24, 0x5B	; 91
     9fc:	0e 94 16 01 	call	0x22c	; 0x22c <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
     a00:	dd 23       	and	r29, r29
     a02:	09 f4       	brne	.+2      	; 0xa06 <__stack+0x107>
     a04:	72 cf       	rjmp	.-284    	; 0x8ea <ERRORmodulator+0x7a>
     a06:	d7 cf       	rjmp	.-82     	; 0x9b6 <__stack+0xb7>
	UART_Transmit(125); // }
	UART_Transmit(10); //line feed
	UART_Transmit(13); //carriage return


     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <UART_SendJson>:

/**************************************************************JSON Structure**************************************************************/

/**************************************************************Send JSON Structure**************************************************************/
/*The functions encapsulated within UART_SendJSON create the JSON Structure that is send to the master from the controller*/
void UART_SendJson(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current,bool jamErrorFlag, bool collisionErrorFlag, uint8_t requiredValue, uint8_t currentValue){
     a0e:	4f 92       	push	r4
     a10:	5f 92       	push	r5
     a12:	6f 92       	push	r6
     a14:	7f 92       	push	r7
     a16:	8f 92       	push	r8
     a18:	af 92       	push	r10
     a1a:	cf 92       	push	r12
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	18 2f       	mov	r17, r24
     a2e:	f6 2e       	mov	r15, r22
     a30:	29 01       	movw	r4, r18
     a32:	3a 01       	movw	r6, r20
     a34:	8a 2d       	mov	r24, r10
     a36:	68 2d       	mov	r22, r8
	MFCmodulator(requiredValue,currentValue);
     a38:	0e 94 a0 01 	call	0x340	; 0x340 <MFCmodulator>
	VERmodulator();
     a3c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <VERmodulator>
	PARAMmodulator(averagePower,operatingFrequency,appliedVoltage,current);
     a40:	a3 01       	movw	r20, r6
     a42:	92 01       	movw	r18, r4
     a44:	6f 2d       	mov	r22, r15
     a46:	81 2f       	mov	r24, r17
     a48:	0e 94 af 02 	call	0x55e	; 0x55e <PARAMmodulator>
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);
     a4c:	6c 2d       	mov	r22, r12
     a4e:	8e 2d       	mov	r24, r14
     a50:	0e 94 38 04 	call	0x870	; 0x870 <ERRORmodulator>

}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	cf 90       	pop	r12
     a62:	af 90       	pop	r10
     a64:	8f 90       	pop	r8
     a66:	7f 90       	pop	r7
     a68:	6f 90       	pop	r6
     a6a:	5f 90       	pop	r5
     a6c:	4f 90       	pop	r4
     a6e:	08 95       	ret

00000a70 <__vector_18>:
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
		return true;
		}else{
		return false;
	}
}
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
     a82:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a86:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <characterReceived>
     a8a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <numberOfCharactersReceived>
     a8e:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <numberOfCharactersReceived+0x1>
     a98:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <numberOfCharactersReceived>
     a9c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <numberOfCharactersReceived>
     aa0:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     aa4:	45 97       	sbiw	r24, 0x15	; 21
     aa6:	4c f0       	brlt	.+18     	; 0xaba <__vector_18+0x4a>
     aa8:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <numberOfCharactersReceived>
     aac:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     ab0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <characterReceived>
     ab4:	e6 5f       	subi	r30, 0xF6	; 246
     ab6:	fe 4f       	sbci	r31, 0xFE	; 254
     ab8:	80 83       	st	Z, r24
     aba:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <numberOfCharactersReceived>
     abe:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     ac2:	82 97       	sbiw	r24, 0x22	; 34
     ac4:	4c f0       	brlt	.+18     	; 0xad8 <__vector_18+0x68>
     ac6:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <numberOfCharactersReceived>
     aca:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     ace:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <characterReceived>
     ad2:	ea 51       	subi	r30, 0x1A	; 26
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	80 83       	st	Z, r24
     ad8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <numberOfCharactersReceived>
     adc:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <numberOfCharactersReceived+0x1>
     ae0:	86 97       	sbiw	r24, 0x26	; 38
     ae2:	7c f0       	brlt	.+30     	; 0xb02 <__vector_18+0x92>
     ae4:	e1 ec       	ldi	r30, 0xC1	; 193
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	8f 77       	andi	r24, 0x7F	; 127
     aec:	80 83       	st	Z, r24
     aee:	80 81       	ld	r24, Z
     af0:	8f 7e       	andi	r24, 0xEF	; 239
     af2:	80 83       	st	Z, r24
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <messageReceived>
     afa:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <numberOfCharactersReceived+0x1>
     afe:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <numberOfCharactersReceived>
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	0f 90       	pop	r0
     b10:	1f 90       	pop	r1
     b12:	18 95       	reti

00000b14 <__vector_20>:
     b14:	1f 92       	push	r1
     b16:	0f 92       	push	r0
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	0f 92       	push	r0
     b1c:	11 24       	eor	r1, r1
     b1e:	8f 93       	push	r24
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
     b24:	e1 ec       	ldi	r30, 0xC1	; 193
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	80 61       	ori	r24, 0x10	; 16
     b2c:	80 83       	st	Z, r24
     b2e:	80 81       	ld	r24, Z
     b30:	80 68       	ori	r24, 0x80	; 128
     b32:	80 83       	st	Z, r24
     b34:	ff 91       	pop	r31
     b36:	ef 91       	pop	r30
     b38:	8f 91       	pop	r24
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <__vector_11>:
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	7f 93       	push	r23
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	af 93       	push	r26
     b60:	bf 93       	push	r27
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31
     b66:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
     b6a:	81 11       	cpse	r24, r1
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__vector_11+0x32>
     b6e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     b72:	88 23       	and	r24, r24
     b74:	b9 f1       	breq	.+110    	; 0xbe4 <__vector_11+0xa0>
     b76:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     b7a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     b7e:	89 17       	cp	r24, r25
     b80:	60 f0       	brcs	.+24     	; 0xb9a <__vector_11+0x56>
     b82:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isDead>
     b86:	81 11       	cpse	r24, r1
     b88:	08 c0       	rjmp	.+16     	; 0xb9a <__vector_11+0x56>
     b8a:	2a 9a       	sbi	0x05, 2	; 5
     b8c:	5d 9a       	sbi	0x0b, 5	; 11
     b8e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <count>
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <count>
     b98:	57 c0       	rjmp	.+174    	; 0xc48 <__vector_11+0x104>
     b9a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     b9e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     ba2:	89 17       	cp	r24, r25
     ba4:	a0 f4       	brcc	.+40     	; 0xbce <__vector_11+0x8a>
     ba6:	2a 98       	cbi	0x05, 2	; 5
     ba8:	5d 98       	cbi	0x0b, 5	; 11
     baa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PWM_CalculateDeadTime>
     bae:	6f ef       	ldi	r22, 0xFF	; 255
     bb0:	7f ef       	ldi	r23, 0xFF	; 255
     bb2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWM_Change>
     bb6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     bba:	81 11       	cpse	r24, r1
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <__vector_11+0x7e>
     bbe:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isLHS>
     bc2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <count>
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <isDead>
     bcc:	3d c0       	rjmp	.+122    	; 0xc48 <__vector_11+0x104>
     bce:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <isDead>
     bd2:	0e 94 de 00 	call	0x1bc	; 0x1bc <PWM_ConvertTimerValueToDutyCycle>
     bd6:	68 2f       	mov	r22, r24
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	8d e7       	ldi	r24, 0x7D	; 125
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWM_Change>
     be2:	32 c0       	rjmp	.+100    	; 0xc48 <__vector_11+0x104>
     be4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     be8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     bec:	89 17       	cp	r24, r25
     bee:	60 f0       	brcs	.+24     	; 0xc08 <__vector_11+0xc4>
     bf0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isDead>
     bf4:	81 11       	cpse	r24, r1
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <__vector_11+0xc4>
     bf8:	5e 9a       	sbi	0x0b, 6	; 11
     bfa:	29 9a       	sbi	0x05, 1	; 5
     bfc:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <count>
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <count>
     c06:	20 c0       	rjmp	.+64     	; 0xc48 <__vector_11+0x104>
     c08:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     c0c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     c10:	89 17       	cp	r24, r25
     c12:	80 f4       	brcc	.+32     	; 0xc34 <__vector_11+0xf0>
     c14:	29 98       	cbi	0x05, 1	; 5
     c16:	5e 98       	cbi	0x0b, 6	; 11
     c18:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PWM_CalculateDeadTime>
     c1c:	6f ef       	ldi	r22, 0xFF	; 255
     c1e:	7f ef       	ldi	r23, 0xFF	; 255
     c20:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWM_Change>
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isLHS>
     c2a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <count>
     c2e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <isDead>
     c32:	0a c0       	rjmp	.+20     	; 0xc48 <__vector_11+0x104>
     c34:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <isDead>
     c38:	0e 94 de 00 	call	0x1bc	; 0x1bc <PWM_ConvertTimerValueToDutyCycle>
     c3c:	68 2f       	mov	r22, r24
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	8d e7       	ldi	r24, 0x7D	; 125
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWM_Change>
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	0f 90       	pop	r0
     c66:	1f 90       	pop	r1
     c68:	18 95       	reti

00000c6a <__vector_12>:
     c6a:	1f 92       	push	r1
     c6c:	0f 92       	push	r0
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	0f 92       	push	r0
     c72:	11 24       	eor	r1, r1
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
     c7c:	81 11       	cpse	r24, r1
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <__vector_12+0x1e>
     c80:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     c84:	88 23       	and	r24, r24
     c86:	61 f0       	breq	.+24     	; 0xca0 <__vector_12+0x36>
     c88:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isDead>
     c8c:	81 11       	cpse	r24, r1
     c8e:	13 c0       	rjmp	.+38     	; 0xcb6 <__vector_12+0x4c>
     c90:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     c94:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     c98:	89 17       	cp	r24, r25
     c9a:	68 f0       	brcs	.+26     	; 0xcb6 <__vector_12+0x4c>
     c9c:	2a 98       	cbi	0x05, 2	; 5
     c9e:	0b c0       	rjmp	.+22     	; 0xcb6 <__vector_12+0x4c>
     ca0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isDead>
     ca4:	81 11       	cpse	r24, r1
     ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <__vector_12+0x4c>
     ca8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     cac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     cb0:	89 17       	cp	r24, r25
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <__vector_12+0x4c>
     cb4:	29 98       	cbi	0x05, 1	; 5
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <concatenate>:
     cc4:	c0 97       	sbiw	r24, 0x30	; 48
     cc6:	e4 e6       	ldi	r30, 0x64	; 100
     cc8:	e8 9f       	mul	r30, r24
     cca:	90 01       	movw	r18, r0
     ccc:	e9 9f       	mul	r30, r25
     cce:	30 0d       	add	r19, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	60 53       	subi	r22, 0x30	; 48
     cd4:	71 09       	sbc	r23, r1
     cd6:	cb 01       	movw	r24, r22
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	66 0f       	add	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	66 0f       	add	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	66 0f       	add	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	68 0f       	add	r22, r24
     cea:	79 1f       	adc	r23, r25
     cec:	62 0f       	add	r22, r18
     cee:	73 1f       	adc	r23, r19
     cf0:	ca 01       	movw	r24, r20
     cf2:	c0 97       	sbiw	r24, 0x30	; 48
     cf4:	86 0f       	add	r24, r22
     cf6:	97 1f       	adc	r25, r23
     cf8:	08 95       	ret

00000cfa <main>:
/**************************************************************Main Function**************************************************************/
int main(void)
{	
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <main+0x6>
     d00:	1f 92       	push	r1
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62

	/*******************Intialisations*******************/
    sei();
     d06:	78 94       	sei
	UART_Init(UBRR_VALUE);
     d08:	83 e3       	ldi	r24, 0x33	; 51
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 07 01 	call	0x20e	; 0x20e <UART_Init>
	ADC_Init();
     d10:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
     d14:	0e 94 ca 00 	call	0x194	; 0x194 <PWM_Init>
	uint16_t voltageAverageFinal = 0;
	uint16_t currentAverageFinal = 0;
	uint32_t averagePower = 0;
	
	/*******************Output Pin Setup*******************/
	DDRB |= (1<<PB1)|(1<<PB2);
     d18:	84 b1       	in	r24, 0x04	; 4
     d1a:	86 60       	ori	r24, 0x06	; 6
     d1c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
     d1e:	8a b1       	in	r24, 0x0a	; 10
     d20:	80 66       	ori	r24, 0x60	; 96
     d22:	8a b9       	out	0x0a, r24	; 10
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
	uint16_t voltageAverageFinal = 0;
	uint16_t currentAverageFinal = 0;
     d24:	19 82       	std	Y+1, r1	; 0x01
	ADC_Init();
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
	uint16_t voltageAverageFinal = 0;
     d26:	21 2c       	mov	r2, r1
     d28:	31 2c       	mov	r3, r1
	UART_Init(UBRR_VALUE);
	ADC_Init();
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
     d2a:	1a 82       	std	Y+2, r1	; 0x02
				
		/*******************Power Calculation*******************/	
		uint32_t powerTotal = 0;												
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){											//This for-loop calculates the average power dissipated over the coil
			powerArray[j] = (voltageAcrossTheCoil[j] *voltageAcrossTheCoil[j])/415;
			powerTotal += powerArray[j];
     d2c:	0f 2e       	mov	r0, r31
     d2e:	ff e9       	ldi	r31, 0x9F	; 159
     d30:	4f 2e       	mov	r4, r31
     d32:	55 24       	eor	r5, r5
     d34:	53 94       	inc	r5
     d36:	61 2c       	mov	r6, r1
     d38:	71 2c       	mov	r7, r1
     d3a:	f0 2d       	mov	r31, r0

    while (1) 
    {	
		
		/*******************Local Variable Declaration*******************/
		measurementIndex = 0;
     d3c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <measurementIndex>
		uint32_t averageVoltage = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES];

		/*******************Voltage Measurement*******************/
			while(measurementIndex < NUMBER_OF_SAMPLES){									//Keep on sampling the LHS and RHS of the coil until you reach the total number of samples
     d40:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <measurementIndex>
     d44:	88 37       	cpi	r24, 0x78	; 120
     d46:	08 f0       	brcs	.+2      	; 0xd4a <main+0x50>
     d48:	7e c1       	rjmp	.+764    	; 0x1046 <main+0x34c>
				voltageLHS[measurementIndex] = ADC_LHSVoltage();							//Sample LHS voltage
     d4a:	00 91 1e 01 	lds	r16, 0x011E	; 0x80011e <measurementIndex>
     d4e:	10 e0       	ldi	r17, 0x00	; 0
     d50:	0e 94 91 00 	call	0x122	; 0x122 <ADC_LHSVoltage>
     d54:	00 0f       	add	r16, r16
     d56:	11 1f       	adc	r17, r17
     d58:	00 0f       	add	r16, r16
     d5a:	11 1f       	adc	r17, r17
     d5c:	f8 01       	movw	r30, r16
     d5e:	e0 5f       	subi	r30, 0xF0	; 240
     d60:	fa 4f       	sbci	r31, 0xFA	; 250
     d62:	60 83       	st	Z, r22
     d64:	71 83       	std	Z+1, r23	; 0x01
     d66:	82 83       	std	Z+2, r24	; 0x02
     d68:	93 83       	std	Z+3, r25	; 0x03
				voltageRHS[measurementIndex] = ADC_RHSVoltage();							//Sample RHS voltage
     d6a:	00 91 1e 01 	lds	r16, 0x011E	; 0x80011e <measurementIndex>
     d6e:	10 e0       	ldi	r17, 0x00	; 0
     d70:	0e 94 ac 00 	call	0x158	; 0x158 <ADC_RHSVoltage>
     d74:	00 0f       	add	r16, r16
     d76:	11 1f       	adc	r17, r17
     d78:	00 0f       	add	r16, r16
     d7a:	11 1f       	adc	r17, r17
     d7c:	f8 01       	movw	r30, r16
     d7e:	e0 5d       	subi	r30, 0xD0	; 208
     d80:	fc 4f       	sbci	r31, 0xFC	; 252
     d82:	60 83       	st	Z, r22
     d84:	71 83       	std	Z+1, r23	; 0x01
     d86:	82 83       	std	Z+2, r24	; 0x02
     d88:	93 83       	std	Z+3, r25	; 0x03
				measurementIndex++;											
     d8a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <measurementIndex>
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <measurementIndex>
		uint32_t averageVoltage = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES];

		/*******************Voltage Measurement*******************/
			while(measurementIndex < NUMBER_OF_SAMPLES){									//Keep on sampling the LHS and RHS of the coil until you reach the total number of samples
     d94:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <measurementIndex>
     d98:	88 37       	cpi	r24, 0x78	; 120
     d9a:	b8 f2       	brcs	.-82     	; 0xd4a <main+0x50>
     d9c:	54 c1       	rjmp	.+680    	; 0x1046 <main+0x34c>
				voltageRHS[measurementIndex] = ADC_RHSVoltage();							//Sample RHS voltage
				measurementIndex++;											
			}
		
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){												//This for-loop calculates the voltage across the coil
			if(voltageLHS[i]>voltageRHS[i]){												
     d9e:	9c 01       	movw	r18, r24
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	f9 01       	movw	r30, r18
     daa:	e0 5f       	subi	r30, 0xF0	; 240
     dac:	fa 4f       	sbci	r31, 0xFA	; 250
     dae:	c0 80       	ld	r12, Z
     db0:	d1 80       	ldd	r13, Z+1	; 0x01
     db2:	e2 80       	ldd	r14, Z+2	; 0x02
     db4:	f3 80       	ldd	r15, Z+3	; 0x03
     db6:	f9 01       	movw	r30, r18
     db8:	e0 5d       	subi	r30, 0xD0	; 208
     dba:	fc 4f       	sbci	r31, 0xFC	; 252
     dbc:	00 81       	ld	r16, Z
     dbe:	11 81       	ldd	r17, Z+1	; 0x01
     dc0:	22 81       	ldd	r18, Z+2	; 0x02
     dc2:	33 81       	ldd	r19, Z+3	; 0x03
     dc4:	0c 15       	cp	r16, r12
     dc6:	1d 05       	cpc	r17, r13
     dc8:	2e 05       	cpc	r18, r14
     dca:	3f 05       	cpc	r19, r15
     dcc:	f8 f4       	brcc	.+62     	; 0xe0c <main+0x112>
				voltageAcrossTheCoil[i] = voltageLHS[i]-voltageRHS[i];
     dce:	9c 01       	movw	r18, r24
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	f9 01       	movw	r30, r18
     dda:	e0 5f       	subi	r30, 0xF0	; 240
     ddc:	fa 4f       	sbci	r31, 0xFA	; 250
     dde:	c0 80       	ld	r12, Z
     de0:	d1 80       	ldd	r13, Z+1	; 0x01
     de2:	e2 80       	ldd	r14, Z+2	; 0x02
     de4:	f3 80       	ldd	r15, Z+3	; 0x03
     de6:	f9 01       	movw	r30, r18
     de8:	e0 5d       	subi	r30, 0xD0	; 208
     dea:	fc 4f       	sbci	r31, 0xFC	; 252
     dec:	80 80       	ld	r8, Z
     dee:	91 80       	ldd	r9, Z+1	; 0x01
     df0:	a2 80       	ldd	r10, Z+2	; 0x02
     df2:	b3 80       	ldd	r11, Z+3	; 0x03
     df4:	c8 18       	sub	r12, r8
     df6:	d9 08       	sbc	r13, r9
     df8:	ea 08       	sbc	r14, r10
     dfa:	fb 08       	sbc	r15, r11
     dfc:	f9 01       	movw	r30, r18
     dfe:	e0 51       	subi	r30, 0x10	; 16
     e00:	f9 4f       	sbci	r31, 0xF9	; 249
     e02:	c0 82       	st	Z, r12
     e04:	d1 82       	std	Z+1, r13	; 0x01
     e06:	e2 82       	std	Z+2, r14	; 0x02
     e08:	f3 82       	std	Z+3, r15	; 0x03
     e0a:	1e c0       	rjmp	.+60     	; 0xe48 <main+0x14e>
				}else{
				voltageAcrossTheCoil[i] = voltageRHS[i]-voltageLHS[i];
     e0c:	9c 01       	movw	r18, r24
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	f9 01       	movw	r30, r18
     e18:	e0 5d       	subi	r30, 0xD0	; 208
     e1a:	fc 4f       	sbci	r31, 0xFC	; 252
     e1c:	c0 80       	ld	r12, Z
     e1e:	d1 80       	ldd	r13, Z+1	; 0x01
     e20:	e2 80       	ldd	r14, Z+2	; 0x02
     e22:	f3 80       	ldd	r15, Z+3	; 0x03
     e24:	f9 01       	movw	r30, r18
     e26:	e0 5f       	subi	r30, 0xF0	; 240
     e28:	fa 4f       	sbci	r31, 0xFA	; 250
     e2a:	80 80       	ld	r8, Z
     e2c:	91 80       	ldd	r9, Z+1	; 0x01
     e2e:	a2 80       	ldd	r10, Z+2	; 0x02
     e30:	b3 80       	ldd	r11, Z+3	; 0x03
     e32:	c8 18       	sub	r12, r8
     e34:	d9 08       	sbc	r13, r9
     e36:	ea 08       	sbc	r14, r10
     e38:	fb 08       	sbc	r15, r11
     e3a:	f9 01       	movw	r30, r18
     e3c:	e0 51       	subi	r30, 0x10	; 16
     e3e:	f9 4f       	sbci	r31, 0xF9	; 249
     e40:	c0 82       	st	Z, r12
     e42:	d1 82       	std	Z+1, r13	; 0x01
     e44:	e2 82       	std	Z+2, r14	; 0x02
     e46:	f3 82       	std	Z+3, r15	; 0x03
			}		
			voltageSum += voltageAcrossTheCoil[i];											
     e48:	fc 01       	movw	r30, r24
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	e0 51       	subi	r30, 0x10	; 16
     e54:	f9 4f       	sbci	r31, 0xF9	; 249
     e56:	00 81       	ld	r16, Z
     e58:	11 81       	ldd	r17, Z+1	; 0x01
     e5a:	22 81       	ldd	r18, Z+2	; 0x02
     e5c:	33 81       	ldd	r19, Z+3	; 0x03
     e5e:	40 0f       	add	r20, r16
     e60:	51 1f       	adc	r21, r17
     e62:	62 1f       	adc	r22, r18
     e64:	73 1f       	adc	r23, r19
				voltageLHS[measurementIndex] = ADC_LHSVoltage();							//Sample LHS voltage
				voltageRHS[measurementIndex] = ADC_RHSVoltage();							//Sample RHS voltage
				measurementIndex++;											
			}
		
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){												//This for-loop calculates the voltage across the coil
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	88 37       	cpi	r24, 0x78	; 120
     e6a:	91 05       	cpc	r25, r1
     e6c:	09 f0       	breq	.+2      	; 0xe70 <main+0x176>
     e6e:	97 cf       	rjmp	.-210    	; 0xd9e <main+0xa4>
			}		
			voltageSum += voltageAcrossTheCoil[i];											
			
		}
		
		averageVoltage = voltageSum / NUMBER_OF_SAMPLES;									//This is the average voltage per sample					
     e70:	cb 01       	movw	r24, r22
     e72:	ba 01       	movw	r22, r20
     e74:	28 e7       	ldi	r18, 0x78	; 120
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>

		voltageAverageArray[voltageAverageIndex] = averageVoltage;							
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	e8 2f       	mov	r30, r24
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	ee 0f       	add	r30, r30
     e88:	ff 1f       	adc	r31, r31
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	e0 5b       	subi	r30, 0xB0	; 176
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	20 83       	st	Z, r18
     e94:	31 83       	std	Z+1, r19	; 0x01
     e96:	42 83       	std	Z+2, r20	; 0x02
     e98:	53 83       	std	Z+3, r21	; 0x03
		voltageAverageIndex++;
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	8a 83       	std	Y+2, r24	; 0x02
				
		/*******************Calculate Average Voltage and Current*******************/		
		if(voltageAverageIndex==NUMBER_OF_SAMPLES){											//The averageVoltage per sample is then averaged across multiple samples to get a a more accurate result	
     e9e:	88 37       	cpi	r24, 0x78	; 120
     ea0:	71 f5       	brne	.+92     	; 0xefe <main+0x204>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
			for(int k = 0;k < NUMBER_OF_SAMPLES;k++){
				voltageAverageFinal += voltageAverageArray[k];
     ea6:	fc 01       	movw	r30, r24
     ea8:	ee 0f       	add	r30, r30
     eaa:	ff 1f       	adc	r31, r31
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	e0 5b       	subi	r30, 0xB0	; 176
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	40 81       	ld	r20, Z
     eb6:	51 81       	ldd	r21, Z+1	; 0x01
     eb8:	62 81       	ldd	r22, Z+2	; 0x02
     eba:	73 81       	ldd	r23, Z+3	; 0x03
     ebc:	24 0e       	add	r2, r20
     ebe:	35 1e       	adc	r3, r21
		voltageAverageArray[voltageAverageIndex] = averageVoltage;							
		voltageAverageIndex++;
				
		/*******************Calculate Average Voltage and Current*******************/		
		if(voltageAverageIndex==NUMBER_OF_SAMPLES){											//The averageVoltage per sample is then averaged across multiple samples to get a a more accurate result	
			for(int k = 0;k < NUMBER_OF_SAMPLES;k++){
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	88 37       	cpi	r24, 0x78	; 120
     ec4:	91 05       	cpc	r25, r1
     ec6:	79 f7       	brne	.-34     	; 0xea6 <main+0x1ac>
				voltageAverageFinal += voltageAverageArray[k];
			}
			voltageAverageFinal /= NUMBER_OF_SAMPLES;										//This the average voltage across multiple samples taken 
     ec8:	91 01       	movw	r18, r2
     eca:	a9 e8       	ldi	r26, 0x89	; 137
     ecc:	b8 e8       	ldi	r27, 0x88	; 136
     ece:	0e 94 83 08 	call	0x1106	; 0x1106 <__umulhisi3>
     ed2:	1c 01       	movw	r2, r24
     ed4:	00 24       	eor	r0, r0
     ed6:	22 0c       	add	r2, r2
     ed8:	33 1c       	adc	r3, r3
     eda:	00 1c       	adc	r0, r0
     edc:	22 0c       	add	r2, r2
     ede:	33 1c       	adc	r3, r3
     ee0:	00 1c       	adc	r0, r0
     ee2:	23 2c       	mov	r2, r3
     ee4:	30 2c       	mov	r3, r0
			currentAverageFinal = (voltageAverageFinal*100)/415;							//From average voltage, average current through the coil is calculated using Ohms law			
     ee6:	e4 e6       	ldi	r30, 0x64	; 100
     ee8:	e2 9d       	mul	r30, r2
     eea:	c0 01       	movw	r24, r0
     eec:	e3 9d       	mul	r30, r3
     eee:	90 0d       	add	r25, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	6f e9       	ldi	r22, 0x9F	; 159
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	0e 94 39 08 	call	0x1072	; 0x1072 <__udivmodhi4>
     efa:	69 83       	std	Y+1, r22	; 0x01
			voltageAverageIndex = 0;
     efc:	1a 82       	std	Y+2, r1	; 0x02
		}
				
		/*******************Power Calculation*******************/	
		uint32_t powerTotal = 0;												
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){											//This for-loop calculates the average power dissipated over the coil
     efe:	00 e0       	ldi	r16, 0x00	; 0
     f00:	10 e0       	ldi	r17, 0x00	; 0
			currentAverageFinal = (voltageAverageFinal*100)/415;							//From average voltage, average current through the coil is calculated using Ohms law			
			voltageAverageIndex = 0;
		}
				
		/*******************Power Calculation*******************/	
		uint32_t powerTotal = 0;												
     f02:	c1 2c       	mov	r12, r1
     f04:	d1 2c       	mov	r13, r1
     f06:	76 01       	movw	r14, r12
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){											//This for-loop calculates the average power dissipated over the coil
			powerArray[j] = (voltageAcrossTheCoil[j] *voltageAcrossTheCoil[j])/415;
     f08:	f8 01       	movw	r30, r16
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	ee 0f       	add	r30, r30
     f10:	ff 1f       	adc	r31, r31
     f12:	e0 51       	subi	r30, 0x10	; 16
     f14:	f9 4f       	sbci	r31, 0xF9	; 249
     f16:	20 81       	ld	r18, Z
     f18:	31 81       	ldd	r19, Z+1	; 0x01
     f1a:	42 81       	ldd	r20, Z+2	; 0x02
     f1c:	53 81       	ldd	r21, Z+3	; 0x03
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
			powerTotal += powerArray[j];
     f26:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsi3>
     f2a:	a3 01       	movw	r20, r6
     f2c:	92 01       	movw	r18, r4
     f2e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
     f32:	c2 0e       	add	r12, r18
     f34:	d3 1e       	adc	r13, r19
     f36:	e4 1e       	adc	r14, r20
     f38:	f5 1e       	adc	r15, r21
			voltageAverageIndex = 0;
		}
				
		/*******************Power Calculation*******************/	
		uint32_t powerTotal = 0;												
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){											//This for-loop calculates the average power dissipated over the coil
     f3a:	0f 5f       	subi	r16, 0xFF	; 255
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	08 37       	cpi	r16, 0x78	; 120
     f40:	11 05       	cpc	r17, r1
     f42:	11 f7       	brne	.-60     	; 0xf08 <main+0x20e>
		}
		
		averagePower = powerTotal / NUMBER_OF_SAMPLES;										
					
		/*******************Receive Message Protocol*******************/
		if(messageReceived){
     f44:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <messageReceived>
     f48:	88 23       	and	r24, r24
     f4a:	09 f4       	brne	.+2      	; 0xf4e <main+0x254>
     f4c:	79 c0       	rjmp	.+242    	; 0x1040 <main+0x346>
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
     f4e:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <pumpingEffortArray+0x2>
     f52:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <pumpingEffortArray+0x1>
     f56:	ef e1       	ldi	r30, 0x1F	; 31
     f58:	f1 e0       	ldi	r31, 0x01	; 1
     f5a:	80 81       	ld	r24, Z
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 62 06 	call	0xcc4	; 0xcc4 <concatenate>
     f66:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pumpingEffort>
				
			for(int i = 0; i < 38; i++){
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
				pumpingEffortArray[i] = 0;
     f6e:	fc 01       	movw	r30, r24
     f70:	e1 5e       	subi	r30, 0xE1	; 225
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
     f74:	10 82       	st	Z, r1
					
		/*******************Receive Message Protocol*******************/
		if(messageReceived){
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	86 32       	cpi	r24, 0x26	; 38
     f7a:	91 05       	cpc	r25, r1
     f7c:	c1 f7       	brne	.-16     	; 0xf6e <main+0x274>
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
     f7e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     f82:	e8 e0       	ldi	r30, 0x08	; 8
     f84:	f1 e0       	ldi	r31, 0x01	; 1
     f86:	80 81       	ld	r24, Z
int concatenate(int a, int b, int c){
	return ((a-48)*100 + (b-48)*10 + (c-48));
}

bool checkForError(unsigned char a, unsigned char b){
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
     f88:	85 36       	cpi	r24, 0x65	; 101
     f8a:	29 f4       	brne	.+10     	; 0xf96 <main+0x29c>
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	97 37       	cpi	r25, 0x77	; 119
     f90:	19 f0       	breq	.+6      	; 0xf98 <main+0x29e>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <main+0x29e>
		return true;
		}else{
		return false;
     f96:	80 e0       	ldi	r24, 0x00	; 0
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
     f98:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <clearErrorFlag>
			if(clearErrorFlag){
     f9c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <clearErrorFlag>
     fa0:	88 23       	and	r24, r24
     fa2:	21 f0       	breq	.+8      	; 0xfac <main+0x2b2>
				cmprCollide = false;
     fa4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				cmprJammed = false;;
     fa8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <cmprJammed>
			}
			if(lowPowerMode){
     fac:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     fb0:	88 23       	and	r24, r24
     fb2:	99 f0       	breq	.+38     	; 0xfda <main+0x2e0>
				operatingFrequency = frequency*2/10;
     fb4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <frequency>
     fb8:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <frequency+0x1>
     fbc:	22 0f       	add	r18, r18
     fbe:	33 1f       	adc	r19, r19
     fc0:	ad ec       	ldi	r26, 0xCD	; 205
     fc2:	bc ec       	ldi	r27, 0xCC	; 204
     fc4:	0e 94 83 08 	call	0x1106	; 0x1106 <__umulhisi3>
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	96 95       	lsr	r25
     fce:	87 95       	ror	r24
     fd0:	96 95       	lsr	r25
     fd2:	87 95       	ror	r24
     fd4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <operatingFrequency>
     fd8:	10 c0       	rjmp	.+32     	; 0xffa <main+0x300>
			}else{
				operatingFrequency = frequency/10;
     fda:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <frequency>
     fde:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <frequency+0x1>
     fe2:	ad ec       	ldi	r26, 0xCD	; 205
     fe4:	bc ec       	ldi	r27, 0xCC	; 204
     fe6:	0e 94 83 08 	call	0x1106	; 0x1106 <__umulhisi3>
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	96 95       	lsr	r25
     ff0:	87 95       	ror	r24
     ff2:	96 95       	lsr	r25
     ff4:	87 95       	ror	r24
     ff6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <operatingFrequency>
			}
			UART_SendJson(averagePower,operatingFrequency,voltageAverageFinal,currentAverageFinal,cmprJammed,cmprCollide, pumpingEffort,pumpingEffort);
     ffa:	80 90 4c 01 	lds	r8, 0x014C	; 0x80014c <pumpingEffort>
     ffe:	a0 90 4c 01 	lds	r10, 0x014C	; 0x80014c <pumpingEffort>
    1002:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
    1006:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <cmprJammed>
    100a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <operatingFrequency>
    100e:	fb 83       	std	Y+3, r31	; 0x03
    1010:	c7 01       	movw	r24, r14
    1012:	b6 01       	movw	r22, r12
    1014:	28 e7       	ldi	r18, 0x78	; 120
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
    1020:	82 2f       	mov	r24, r18
    1022:	c0 2e       	mov	r12, r16
    1024:	e1 2e       	mov	r14, r17
    1026:	09 81       	ldd	r16, Y+1	; 0x01
    1028:	91 01       	movw	r18, r2
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	6b 81       	ldd	r22, Y+3	; 0x03
    1030:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_SendJson>
			messageReceived = false;
    1034:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <messageReceived>
			numberOfCharactersReceived = 0;
    1038:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <numberOfCharactersReceived+0x1>
    103c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <numberOfCharactersReceived>
		}
		UART_InterpretPumpingEffort();														
    1040:	0e 94 26 01 	call	0x24c	; 0x24c <UART_InterpretPumpingEffort>
    }
    1044:	7b ce       	rjmp	.-778    	; 0xd3c <main+0x42>
	UART_Init(UBRR_VALUE);
	ADC_Init();
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	ba 01       	movw	r22, r20
    1050:	a6 ce       	rjmp	.-692    	; 0xd9e <main+0xa4>

00001052 <__mulsi3>:
    1052:	db 01       	movw	r26, r22
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	0e 94 92 08 	call	0x1124	; 0x1124 <__muluhisi3>
    105c:	bf 91       	pop	r27
    105e:	af 91       	pop	r26
    1060:	a2 9f       	mul	r26, r18
    1062:	80 0d       	add	r24, r0
    1064:	91 1d       	adc	r25, r1
    1066:	a3 9f       	mul	r26, r19
    1068:	90 0d       	add	r25, r0
    106a:	b2 9f       	mul	r27, r18
    106c:	90 0d       	add	r25, r0
    106e:	11 24       	eor	r1, r1
    1070:	08 95       	ret

00001072 <__udivmodhi4>:
    1072:	aa 1b       	sub	r26, r26
    1074:	bb 1b       	sub	r27, r27
    1076:	51 e1       	ldi	r21, 0x11	; 17
    1078:	07 c0       	rjmp	.+14     	; 0x1088 <__udivmodhi4_ep>

0000107a <__udivmodhi4_loop>:
    107a:	aa 1f       	adc	r26, r26
    107c:	bb 1f       	adc	r27, r27
    107e:	a6 17       	cp	r26, r22
    1080:	b7 07       	cpc	r27, r23
    1082:	10 f0       	brcs	.+4      	; 0x1088 <__udivmodhi4_ep>
    1084:	a6 1b       	sub	r26, r22
    1086:	b7 0b       	sbc	r27, r23

00001088 <__udivmodhi4_ep>:
    1088:	88 1f       	adc	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	5a 95       	dec	r21
    108e:	a9 f7       	brne	.-22     	; 0x107a <__udivmodhi4_loop>
    1090:	80 95       	com	r24
    1092:	90 95       	com	r25
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	08 95       	ret

0000109a <__divmodhi4>:
    109a:	97 fb       	bst	r25, 7
    109c:	07 2e       	mov	r0, r23
    109e:	16 f4       	brtc	.+4      	; 0x10a4 <__divmodhi4+0xa>
    10a0:	00 94       	com	r0
    10a2:	07 d0       	rcall	.+14     	; 0x10b2 <__divmodhi4_neg1>
    10a4:	77 fd       	sbrc	r23, 7
    10a6:	09 d0       	rcall	.+18     	; 0x10ba <__divmodhi4_neg2>
    10a8:	0e 94 39 08 	call	0x1072	; 0x1072 <__udivmodhi4>
    10ac:	07 fc       	sbrc	r0, 7
    10ae:	05 d0       	rcall	.+10     	; 0x10ba <__divmodhi4_neg2>
    10b0:	3e f4       	brtc	.+14     	; 0x10c0 <__divmodhi4_exit>

000010b2 <__divmodhi4_neg1>:
    10b2:	90 95       	com	r25
    10b4:	81 95       	neg	r24
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	08 95       	ret

000010ba <__divmodhi4_neg2>:
    10ba:	70 95       	com	r23
    10bc:	61 95       	neg	r22
    10be:	7f 4f       	sbci	r23, 0xFF	; 255

000010c0 <__divmodhi4_exit>:
    10c0:	08 95       	ret

000010c2 <__udivmodsi4>:
    10c2:	a1 e2       	ldi	r26, 0x21	; 33
    10c4:	1a 2e       	mov	r1, r26
    10c6:	aa 1b       	sub	r26, r26
    10c8:	bb 1b       	sub	r27, r27
    10ca:	fd 01       	movw	r30, r26
    10cc:	0d c0       	rjmp	.+26     	; 0x10e8 <__udivmodsi4_ep>

000010ce <__udivmodsi4_loop>:
    10ce:	aa 1f       	adc	r26, r26
    10d0:	bb 1f       	adc	r27, r27
    10d2:	ee 1f       	adc	r30, r30
    10d4:	ff 1f       	adc	r31, r31
    10d6:	a2 17       	cp	r26, r18
    10d8:	b3 07       	cpc	r27, r19
    10da:	e4 07       	cpc	r30, r20
    10dc:	f5 07       	cpc	r31, r21
    10de:	20 f0       	brcs	.+8      	; 0x10e8 <__udivmodsi4_ep>
    10e0:	a2 1b       	sub	r26, r18
    10e2:	b3 0b       	sbc	r27, r19
    10e4:	e4 0b       	sbc	r30, r20
    10e6:	f5 0b       	sbc	r31, r21

000010e8 <__udivmodsi4_ep>:
    10e8:	66 1f       	adc	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	1a 94       	dec	r1
    10f2:	69 f7       	brne	.-38     	; 0x10ce <__udivmodsi4_loop>
    10f4:	60 95       	com	r22
    10f6:	70 95       	com	r23
    10f8:	80 95       	com	r24
    10fa:	90 95       	com	r25
    10fc:	9b 01       	movw	r18, r22
    10fe:	ac 01       	movw	r20, r24
    1100:	bd 01       	movw	r22, r26
    1102:	cf 01       	movw	r24, r30
    1104:	08 95       	ret

00001106 <__umulhisi3>:
    1106:	a2 9f       	mul	r26, r18
    1108:	b0 01       	movw	r22, r0
    110a:	b3 9f       	mul	r27, r19
    110c:	c0 01       	movw	r24, r0
    110e:	a3 9f       	mul	r26, r19
    1110:	70 0d       	add	r23, r0
    1112:	81 1d       	adc	r24, r1
    1114:	11 24       	eor	r1, r1
    1116:	91 1d       	adc	r25, r1
    1118:	b2 9f       	mul	r27, r18
    111a:	70 0d       	add	r23, r0
    111c:	81 1d       	adc	r24, r1
    111e:	11 24       	eor	r1, r1
    1120:	91 1d       	adc	r25, r1
    1122:	08 95       	ret

00001124 <__muluhisi3>:
    1124:	0e 94 83 08 	call	0x1106	; 0x1106 <__umulhisi3>
    1128:	a5 9f       	mul	r26, r21
    112a:	90 0d       	add	r25, r0
    112c:	b4 9f       	mul	r27, r20
    112e:	90 0d       	add	r25, r0
    1130:	a4 9f       	mul	r26, r20
    1132:	80 0d       	add	r24, r0
    1134:	91 1d       	adc	r25, r1
    1136:	11 24       	eor	r1, r1
    1138:	08 95       	ret

0000113a <_exit>:
    113a:	f8 94       	cli

0000113c <__stop_program>:
    113c:	ff cf       	rjmp	.-2      	; 0x113c <__stop_program>
