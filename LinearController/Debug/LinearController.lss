
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004f0  00000584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  0000058c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac1  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090a  00000000  00000000  0000218d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad0  00000000  00000000  00002a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f9  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058b  00000000  00000000  00003d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_11>
  30:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <main>
  9e:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8b 60       	ori	r24, 0x0B	; 11
  ae:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
  b0:	ef e6       	ldi	r30, 0x6F	; 111
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
  c4:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  c8:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  cc:	08 95       	ret

000000ce <UART_Init>:

//uart intializer
//initializes UART transmitter
void UART_Init(unsigned int BAUD_RATE){
	
	UBRR0H |= (BAUD_RATE>>8); //sets the baud rate to 9600bps
  ce:	e5 ec       	ldi	r30, 0xC5	; 197
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	20 81       	ld	r18, Z
  d4:	92 2b       	or	r25, r18
  d6:	90 83       	st	Z, r25
	UBRR0L |= (BAUD_RATE);
  d8:	e4 ec       	ldi	r30, 0xC4	; 196
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	89 2b       	or	r24, r25
  e0:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0)|(1<RXEN0); //enables UART transmitter
  e2:	e1 ec       	ldi	r30, 0xC1	; 193
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	89 60       	ori	r24, 0x09	; 9
  ea:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //sets character size to 8 data bits
  ec:	e2 ec       	ldi	r30, 0xC2	; 194
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	86 60       	ori	r24, 0x06	; 6
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <UART_Transmit>:


////uart transmit
////polling uart
void UART_Transmit(uint8_t myValue){
	while (!((1<<UDRE0)&&(UCSR0A))); //wait until the transmit register is ready
  f8:	e0 ec       	ldi	r30, 0xC0	; 192
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	99 23       	and	r25, r25
 100:	e9 f3       	breq	.-6      	; 0xfc <UART_Transmit+0x4>
	UDR0 = myValue;//once ready, store next value for transmission
 102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 106:	08 95       	ret

00000108 <UART_Receive>:
}

//uart recieve 
//interrupt config
uint8_t UART_Receive(){
	uint8_t pumpingEffort = UDR0;
 108:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return pumpingEffort;
}
 10c:	08 95       	ret

0000010e <UART_InterpretPumpingEffort>:

void UART_InterpretPumpingEffort(){
	pumpingEffort = 1; //mock pumping effort
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <pumpingEffort>
	if(pumpingEffort==0){ //turn off mode 
 114:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 118:	81 11       	cpse	r24, r1
 11a:	06 c0       	rjmp	.+12     	; 0x128 <UART_InterpretPumpingEffort+0x1a>
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
 11c:	e4 e6       	ldi	r30, 0x64	; 100
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8f 6e       	ori	r24, 0xEF	; 239
 124:	80 83       	st	Z, r24
 126:	19 c0       	rjmp	.+50     	; 0x15a <UART_InterpretPumpingEffort+0x4c>
		power_all_disable(); //disables all modules on the microcontroller 
		//power_usart_enable(); //enable UART for communication to see when to turn back on
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){
 128:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 12c:	88 23       	and	r24, r24
 12e:	41 f0       	breq	.+16     	; 0x140 <UART_InterpretPumpingEffort+0x32>
 130:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 134:	83 3b       	cpi	r24, 0xB3	; 179
 136:	20 f4       	brcc	.+8      	; 0x140 <UART_InterpretPumpingEffort+0x32>
		//70% of values - care about efficiency and meeting pumpingEffort
		//efficiency actions turn two switches off
		//disable all unused modules
		//dutyCycle = (PROPORTIONALITY_CONSTANT* MAX_LOW_POWER * (pumpingEffort/178))/(10000*1000);	//10000 and 1000 are because we didnt use floats [integer overflow error here]
		lowPowerMode = true;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lowPowerMode>
 13e:	0d c0       	rjmp	.+26     	; 0x15a <UART_InterpretPumpingEffort+0x4c>
						 
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){
 140:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 144:	83 3b       	cpi	r24, 0xB3	; 179
 146:	38 f0       	brcs	.+14     	; 0x156 <UART_InterpretPumpingEffort+0x48>
 148:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 14c:	8f 3f       	cpi	r24, 0xFF	; 255
 14e:	19 f0       	breq	.+6      	; 0x156 <UART_InterpretPumpingEffort+0x48>
		//30% of values - go ham fam
		lowPowerMode = false;
 150:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lowPowerMode>
 154:	02 c0       	rjmp	.+4      	; 0x15a <UART_InterpretPumpingEffort+0x4c>
	}else{ //255 lose your mind
		//change duty cycle and pwm to max out the motor
		lowPowerMode = false;
 156:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lowPowerMode>
	}
	changePumpingEffort = false;
 15a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 15e:	08 95       	ret

00000160 <MFCmodulator>:
	//temp conversion variables. Used to split 3 digit numbers as only one digit can be sent at a time
	uint8_t firstDigit = 0;
	uint8_t secondDigit = 0;
	uint8_t thirdDigit = 0;
	
	UART_Transmit(13); //carriage return
 160:	8d e0       	ldi	r24, 0x0D	; 13
 162:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(123); //{
 166:	8b e7       	ldi	r24, 0x7B	; 123
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 16c:	8d e0       	ldi	r24, 0x0D	; 13
 16e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	//LCC Identifier 
	UART_Transmit(34); //"
 172:	82 e2       	ldi	r24, 0x22	; 34
 174:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(51);//3
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 17e:	82 e2       	ldi	r24, 0x22	; 34
 180:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58);//:
 184:	8a e3       	ldi	r24, 0x3A	; 58
 186:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(2);
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>

	//MFC 
	UART_Transmit(123); //{
 190:	8b e7       	ldi	r24, 0x7B	; 123
 192:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //new line
 196:	8d e0       	ldi	r24, 0x0D	; 13
 198:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	
	//MFC letter setup
	UART_Transmit(34); //'
 19c:	82 e2       	ldi	r24, 0x22	; 34
 19e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(109);//m
 1a2:	8d e6       	ldi	r24, 0x6D	; 109
 1a4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(102);//f
 1a8:	86 e6       	ldi	r24, 0x66	; 102
 1aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(99);//c
 1ae:	83 e6       	ldi	r24, 0x63	; 99
 1b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(34);//"
 1b4:	82 e2       	ldi	r24, 0x22	; 34
 1b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(58);//:
 1ba:	8a e3       	ldi	r24, 0x3A	; 58
 1bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
	UART_Transmit(13); //carriage return
 1c0:	8d e0       	ldi	r24, 0x0D	; 13
 1c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Transmit>
 1c6:	08 95       	ret

000001c8 <__vector_12>:
}

uint8_t ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 1da:	81 11       	cpse	r24, r1
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <__vector_12+0x1e>
 1de:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lowPowerMode>
 1e2:	88 23       	and	r24, r24
 1e4:	51 f0       	breq	.+20     	; 0x1fa <__vector_12+0x32>
 1e6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 1ea:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 1ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 1f2:	89 17       	cp	r24, r25
 1f4:	58 f0       	brcs	.+22     	; 0x20c <__vector_12+0x44>
 1f6:	29 98       	cbi	0x05, 1	; 5
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <__vector_12+0x44>
 1fa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 1fe:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 202:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 206:	89 17       	cp	r24, r25
 208:	08 f0       	brcs	.+2      	; 0x20c <__vector_12+0x44>
 20a:	5e 98       	cbi	0x0b, 6	; 11
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_18>:
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
 23c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Receive>
 240:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <pumpingEffort>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <ConvertTimerValueToDutyCycle>:
 26c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 270:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 274:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 278:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 27c:	ad e7       	ldi	r26, 0x7D	; 125
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	0e 94 57 02 	call	0x4ae	; 0x4ae <__muluhisi3>
 284:	24 e6       	ldi	r18, 0x64	; 100
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	0e 94 26 02 	call	0x44c	; 0x44c <__udivmodsi4>
 290:	82 2f       	mov	r24, r18
 292:	08 95       	ret

00000294 <CalculateDeadTime>:
 294:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frequency>
 298:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <noOfWaves>
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	84 ef       	ldi	r24, 0xF4	; 244
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 12 02 	call	0x424	; 0x424 <__divmodhi4>
 2a6:	62 1b       	sub	r22, r18
 2a8:	71 09       	sbc	r23, r1
 2aa:	8d e7       	ldi	r24, 0x7D	; 125
 2ac:	28 2f       	mov	r18, r24
 2ae:	26 9f       	mul	r18, r22
 2b0:	c0 01       	movw	r24, r0
 2b2:	27 9f       	mul	r18, r23
 2b4:	90 0d       	add	r25, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	08 95       	ret

000002ba <__vector_11>:
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
 2dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 2e0:	81 11       	cpse	r24, r1
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <__vector_11+0x32>
 2e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lowPowerMode>
 2e8:	88 23       	and	r24, r24
 2ea:	c1 f1       	breq	.+112    	; 0x35c <__vector_11+0xa2>
 2ec:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 2f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 2f4:	89 17       	cp	r24, r25
 2f6:	68 f0       	brcs	.+26     	; 0x312 <__vector_11+0x58>
 2f8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 2fc:	81 11       	cpse	r24, r1
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_11+0x58>
 300:	85 b1       	in	r24, 0x05	; 5
 302:	86 60       	ori	r24, 0x06	; 6
 304:	85 b9       	out	0x05, r24	; 5
 306:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <count>
 310:	58 c0       	rjmp	.+176    	; 0x3c2 <__vector_11+0x108>
 312:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 316:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 31a:	89 17       	cp	r24, r25
 31c:	a0 f4       	brcc	.+40     	; 0x346 <__vector_11+0x8c>
 31e:	29 98       	cbi	0x05, 1	; 5
 320:	2a 98       	cbi	0x05, 2	; 5
 322:	0e 94 4a 01 	call	0x294	; 0x294 <CalculateDeadTime>
 326:	6f ef       	ldi	r22, 0xFF	; 255
 328:	7f ef       	ldi	r23, 0xFF	; 255
 32a:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 32e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lowPowerMode>
 332:	81 11       	cpse	r24, r1
 334:	02 c0       	rjmp	.+4      	; 0x33a <__vector_11+0x80>
 336:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isLHS>
 33a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count>
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isDead>
 344:	3e c0       	rjmp	.+124    	; 0x3c2 <__vector_11+0x108>
 346:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <isDead>
 34a:	0e 94 36 01 	call	0x26c	; 0x26c <ConvertTimerValueToDutyCycle>
 34e:	68 2f       	mov	r22, r24
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	8d e7       	ldi	r24, 0x7D	; 125
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 35a:	33 c0       	rjmp	.+102    	; 0x3c2 <__vector_11+0x108>
 35c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 364:	89 17       	cp	r24, r25
 366:	68 f0       	brcs	.+26     	; 0x382 <__vector_11+0xc8>
 368:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 36c:	81 11       	cpse	r24, r1
 36e:	09 c0       	rjmp	.+18     	; 0x382 <__vector_11+0xc8>
 370:	8b b1       	in	r24, 0x0b	; 11
 372:	80 66       	ori	r24, 0x60	; 96
 374:	8b b9       	out	0x0b, r24	; 11
 376:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <count>
 380:	20 c0       	rjmp	.+64     	; 0x3c2 <__vector_11+0x108>
 382:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 386:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 38a:	89 17       	cp	r24, r25
 38c:	80 f4       	brcc	.+32     	; 0x3ae <__vector_11+0xf4>
 38e:	5e 98       	cbi	0x0b, 6	; 11
 390:	5d 98       	cbi	0x0b, 5	; 11
 392:	0e 94 4a 01 	call	0x294	; 0x294 <CalculateDeadTime>
 396:	6f ef       	ldi	r22, 0xFF	; 255
 398:	7f ef       	ldi	r23, 0xFF	; 255
 39a:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isLHS>
 3a4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count>
 3a8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isDead>
 3ac:	0a c0       	rjmp	.+20     	; 0x3c2 <__vector_11+0x108>
 3ae:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <isDead>
 3b2:	0e 94 36 01 	call	0x26c	; 0x26c <ConvertTimerValueToDutyCycle>
 3b6:	68 2f       	mov	r22, r24
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	8d e7       	ldi	r24, 0x7D	; 125
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <main>:


int main(void)
{	
	//clock_prescale_set(clock_div_2);
    sei();
 3e4:	78 94       	sei
	UART_Init(UBRR_VALUE);
 3e6:	87 e6       	ldi	r24, 0x67	; 103
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 67 00 	call	0xce	; 0xce <UART_Init>
	//ADC_Init();
	PWM_Init();
 3ee:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 3f2:	84 b1       	in	r24, 0x04	; 4
 3f4:	86 60       	ori	r24, 0x06	; 6
 3f6:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 3f8:	8a b1       	in	r24, 0x0a	; 10
 3fa:	80 66       	ori	r24, 0x60	; 96
 3fc:	8a b9       	out	0x0a, r24	; 10

	
	errorArray[0] = 'J';
 3fe:	ed e0       	ldi	r30, 0x0D	; 13
 400:	f1 e0       	ldi	r31, 0x01	; 1
 402:	8a e4       	ldi	r24, 0x4A	; 74
 404:	80 83       	st	Z, r24
	errorArray[1] = 'C';
 406:	83 e4       	ldi	r24, 0x43	; 67
 408:	81 83       	std	Z+1, r24	; 0x01
	MFCmodulator(120,123);
 40a:	6b e7       	ldi	r22, 0x7B	; 123
 40c:	88 e7       	ldi	r24, 0x78	; 120
 40e:	0e 94 b0 00 	call	0x160	; 0x160 <MFCmodulator>
	//PARAMmodulator(12,15,1232,20);
	
    while (1) 
    {
		
		if(changePumpingEffort){
 412:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 416:	88 23       	and	r24, r24
 418:	e1 f3       	breq	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			 UART_InterpretPumpingEffort();
 41a:	0e 94 87 00 	call	0x10e	; 0x10e <UART_InterpretPumpingEffort>
			 ConvertTimerValueToDutyCycle();
 41e:	0e 94 36 01 	call	0x26c	; 0x26c <ConvertTimerValueToDutyCycle>
 422:	f7 cf       	rjmp	.-18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

00000424 <__divmodhi4>:
 424:	97 fb       	bst	r25, 7
 426:	07 2e       	mov	r0, r23
 428:	16 f4       	brtc	.+4      	; 0x42e <__divmodhi4+0xa>
 42a:	00 94       	com	r0
 42c:	07 d0       	rcall	.+14     	; 0x43c <__divmodhi4_neg1>
 42e:	77 fd       	sbrc	r23, 7
 430:	09 d0       	rcall	.+18     	; 0x444 <__divmodhi4_neg2>
 432:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodhi4>
 436:	07 fc       	sbrc	r0, 7
 438:	05 d0       	rcall	.+10     	; 0x444 <__divmodhi4_neg2>
 43a:	3e f4       	brtc	.+14     	; 0x44a <__divmodhi4_exit>

0000043c <__divmodhi4_neg1>:
 43c:	90 95       	com	r25
 43e:	81 95       	neg	r24
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	08 95       	ret

00000444 <__divmodhi4_neg2>:
 444:	70 95       	com	r23
 446:	61 95       	neg	r22
 448:	7f 4f       	sbci	r23, 0xFF	; 255

0000044a <__divmodhi4_exit>:
 44a:	08 95       	ret

0000044c <__udivmodsi4>:
 44c:	a1 e2       	ldi	r26, 0x21	; 33
 44e:	1a 2e       	mov	r1, r26
 450:	aa 1b       	sub	r26, r26
 452:	bb 1b       	sub	r27, r27
 454:	fd 01       	movw	r30, r26
 456:	0d c0       	rjmp	.+26     	; 0x472 <__udivmodsi4_ep>

00000458 <__udivmodsi4_loop>:
 458:	aa 1f       	adc	r26, r26
 45a:	bb 1f       	adc	r27, r27
 45c:	ee 1f       	adc	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	a2 17       	cp	r26, r18
 462:	b3 07       	cpc	r27, r19
 464:	e4 07       	cpc	r30, r20
 466:	f5 07       	cpc	r31, r21
 468:	20 f0       	brcs	.+8      	; 0x472 <__udivmodsi4_ep>
 46a:	a2 1b       	sub	r26, r18
 46c:	b3 0b       	sbc	r27, r19
 46e:	e4 0b       	sbc	r30, r20
 470:	f5 0b       	sbc	r31, r21

00000472 <__udivmodsi4_ep>:
 472:	66 1f       	adc	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	1a 94       	dec	r1
 47c:	69 f7       	brne	.-38     	; 0x458 <__udivmodsi4_loop>
 47e:	60 95       	com	r22
 480:	70 95       	com	r23
 482:	80 95       	com	r24
 484:	90 95       	com	r25
 486:	9b 01       	movw	r18, r22
 488:	ac 01       	movw	r20, r24
 48a:	bd 01       	movw	r22, r26
 48c:	cf 01       	movw	r24, r30
 48e:	08 95       	ret

00000490 <__umulhisi3>:
 490:	a2 9f       	mul	r26, r18
 492:	b0 01       	movw	r22, r0
 494:	b3 9f       	mul	r27, r19
 496:	c0 01       	movw	r24, r0
 498:	a3 9f       	mul	r26, r19
 49a:	70 0d       	add	r23, r0
 49c:	81 1d       	adc	r24, r1
 49e:	11 24       	eor	r1, r1
 4a0:	91 1d       	adc	r25, r1
 4a2:	b2 9f       	mul	r27, r18
 4a4:	70 0d       	add	r23, r0
 4a6:	81 1d       	adc	r24, r1
 4a8:	11 24       	eor	r1, r1
 4aa:	91 1d       	adc	r25, r1
 4ac:	08 95       	ret

000004ae <__muluhisi3>:
 4ae:	0e 94 48 02 	call	0x490	; 0x490 <__umulhisi3>
 4b2:	a5 9f       	mul	r26, r21
 4b4:	90 0d       	add	r25, r0
 4b6:	b4 9f       	mul	r27, r20
 4b8:	90 0d       	add	r25, r0
 4ba:	a4 9f       	mul	r26, r20
 4bc:	80 0d       	add	r24, r0
 4be:	91 1d       	adc	r25, r1
 4c0:	11 24       	eor	r1, r1
 4c2:	08 95       	ret

000004c4 <__udivmodhi4>:
 4c4:	aa 1b       	sub	r26, r26
 4c6:	bb 1b       	sub	r27, r27
 4c8:	51 e1       	ldi	r21, 0x11	; 17
 4ca:	07 c0       	rjmp	.+14     	; 0x4da <__udivmodhi4_ep>

000004cc <__udivmodhi4_loop>:
 4cc:	aa 1f       	adc	r26, r26
 4ce:	bb 1f       	adc	r27, r27
 4d0:	a6 17       	cp	r26, r22
 4d2:	b7 07       	cpc	r27, r23
 4d4:	10 f0       	brcs	.+4      	; 0x4da <__udivmodhi4_ep>
 4d6:	a6 1b       	sub	r26, r22
 4d8:	b7 0b       	sbc	r27, r23

000004da <__udivmodhi4_ep>:
 4da:	88 1f       	adc	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	5a 95       	dec	r21
 4e0:	a9 f7       	brne	.-22     	; 0x4cc <__udivmodhi4_loop>
 4e2:	80 95       	com	r24
 4e4:	90 95       	com	r25
 4e6:	bc 01       	movw	r22, r24
 4e8:	cd 01       	movw	r24, r26
 4ea:	08 95       	ret

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
