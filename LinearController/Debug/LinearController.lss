
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000011fc  00001290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d1  00800116  00800116  000012a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000259b  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b16  00000000  00000000  000039fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001018  00000000  00000000  00004511  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  0000552c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ef  00000000  00000000  000058d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dca  00000000  00000000  000061bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00006f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__vector_11>
      30:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ef       	ldi	r30, 0xFC	; 252
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 31       	cpi	r26, 0x16	; 22
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	28 e0       	ldi	r18, 0x08	; 8
      8c:	a6 e1       	ldi	r26, 0x16	; 22
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 3e       	cpi	r26, 0xE7	; 231
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 92 06 	call	0xd24	; 0xd24 <main>
      9e:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  
#include "adc.h"

void ADC_Init(){
	// selection channel is set to AREF
	ADMUX &= ~(1<<REFS1);
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	8f 77       	andi	r24, 0x7F	; 127
      ae:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS0);
      b0:	80 81       	ld	r24, Z
      b2:	8f 7b       	andi	r24, 0xBF	; 191
      b4:	80 83       	st	Z, r24
	//Turns on the ADC and sets prescaler to 32
	//enable ADC
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	
      b6:	ea e7       	ldi	r30, 0x7A	; 122
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	87 68       	ori	r24, 0x87	; 135
      be:	80 83       	st	Z, r24
      c0:	08 95       	ret

000000c2 <ADC_Read>:
}

//polling ADC 
uint32_t ADC_Read(){
	while(!(ADCSRA &&(1<<ADIF)));
      c2:	ea e7       	ldi	r30, 0x7A	; 122
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	80 81       	ld	r24, Z
      c8:	88 23       	and	r24, r24
      ca:	e9 f3       	breq	.-6      	; 0xc6 <ADC_Read+0x4>
	return ADC;
      cc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      d0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
}
      d8:	08 95       	ret

000000da <ADC_Calculate>:

//note: do not use float as ATMEGA328P does not have a floating point unit. It uses integers to perform float operations thus use integers and multiply them by 1000 to
//get millivolt(mV) accuracy 
uint32_t ADC_Calculate(){
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
	uint32_t  adcValue = ADC_Read();
      de:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
      e2:	9b 01       	movw	r18, r22
      e4:	ac 01       	movw	r20, r24
	uint32_t measuredVoltage = ((adcValue*1000)/1024) * 5;
	return measuredVoltage;
      e6:	a8 ee       	ldi	r26, 0xE8	; 232
      e8:	b3 e0       	ldi	r27, 0x03	; 3
      ea:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__muluhisi3>
      ee:	dc 01       	movw	r26, r24
      f0:	cb 01       	movw	r24, r22
      f2:	07 2e       	mov	r0, r23
      f4:	7a e0       	ldi	r23, 0x0A	; 10
      f6:	b6 95       	lsr	r27
      f8:	a7 95       	ror	r26
      fa:	97 95       	ror	r25
      fc:	87 95       	ror	r24
      fe:	7a 95       	dec	r23
     100:	d1 f7       	brne	.-12     	; 0xf6 <ADC_Calculate+0x1c>
     102:	70 2d       	mov	r23, r0
     104:	8c 01       	movw	r16, r24
     106:	9d 01       	movw	r18, r26
     108:	00 0f       	add	r16, r16
     10a:	11 1f       	adc	r17, r17
     10c:	22 1f       	adc	r18, r18
     10e:	33 1f       	adc	r19, r19
     110:	00 0f       	add	r16, r16
     112:	11 1f       	adc	r17, r17
     114:	22 1f       	adc	r18, r18
     116:	33 1f       	adc	r19, r19
     118:	bc 01       	movw	r22, r24
     11a:	cd 01       	movw	r24, r26
     11c:	60 0f       	add	r22, r16
     11e:	71 1f       	adc	r23, r17
     120:	82 1f       	adc	r24, r18
     122:	93 1f       	adc	r25, r19
}
     124:	1f 91       	pop	r17
     126:	0f 91       	pop	r16
     128:	08 95       	ret

0000012a <ADC_LHSVoltage>:

uint32_t ADC_LHSVoltage(){
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
     12a:	ec e7       	ldi	r30, 0x7C	; 124
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 7f       	andi	r24, 0xF0	; 240
     132:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     134:	ea e7       	ldi	r30, 0x7A	; 122
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	80 64       	ori	r24, 0x40	; 64
     13c:	80 83       	st	Z, r24
	uint32_t lhsVoltage = ADC_Calculate(); //calculates measured voltage 
     13e:	0e 94 6d 00 	call	0xda	; 0xda <ADC_Calculate>
     142:	9b 01       	movw	r18, r22
     144:	ac 01       	movw	r20, r24
	return (lhsVoltage*27/100); //return a 4 digit number that is the LHS voltage
     146:	ab e1       	ldi	r26, 0x1B	; 27
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__muluhisi3>
     14e:	24 e6       	ldi	r18, 0x64	; 100
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
}
     15a:	ca 01       	movw	r24, r20
     15c:	b9 01       	movw	r22, r18
     15e:	08 95       	ret

00000160 <ADC_RHSVoltage>:

uint32_t ADC_RHSVoltage(){
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1));
     160:	ec e7       	ldi	r30, 0x7C	; 124
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	81 7f       	andi	r24, 0xF1	; 241
     168:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX0);
     16a:	80 81       	ld	r24, Z
     16c:	81 60       	ori	r24, 0x01	; 1
     16e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     170:	ea e7       	ldi	r30, 0x7A	; 122
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	80 64       	ori	r24, 0x40	; 64
     178:	80 83       	st	Z, r24
	uint32_t rhsVoltage = ADC_Calculate();
     17a:	0e 94 6d 00 	call	0xda	; 0xda <ADC_Calculate>
     17e:	9b 01       	movw	r18, r22
     180:	ac 01       	movw	r20, r24
	return (rhsVoltage*27/100);
     182:	ab e1       	ldi	r26, 0x1B	; 27
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__muluhisi3>
     18a:	24 e6       	ldi	r18, 0x64	; 100
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
}
     196:	ca 01       	movw	r24, r20
     198:	b9 01       	movw	r22, r18
     19a:	08 95       	ret

0000019c <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
     19c:	e1 e8       	ldi	r30, 0x81	; 129
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	8b 60       	ori	r24, 0x0B	; 11
     1a4:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
     1a6:	ef e6       	ldi	r30, 0x6F	; 111
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	86 60       	ori	r24, 0x06	; 6
     1ae:	80 83       	st	Z, r24
     1b0:	08 95       	ret

000001b2 <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
     1b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
     1ba:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     1be:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     1c2:	08 95       	ret

000001c4 <UART_Init>:
#define MAX_VOLTAGE 13

//uart intializer
void UART_Init(unsigned int BAUD_RATE){
	
	UBRR0H = BAUD_RATE >>8;
     1c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_RATE;
     1c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0);
     1cc:	e1 ec       	ldi	r30, 0xC1	; 193
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 e9       	ldi	r24, 0x90	; 144
     1d2:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0)|(1<<TXCIE0);
     1d4:	80 81       	ld	r24, Z
     1d6:	88 64       	ori	r24, 0x48	; 72
     1d8:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     1da:	86 e0       	ldi	r24, 0x06	; 6
     1dc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     1e0:	08 95       	ret

000001e2 <UART_Transmit>:
}

//
void UART_Transmit(uint8_t myValue){
	//disable receive
	UCSR0B &= ~(1 << RXEN0);
     1e2:	e1 ec       	ldi	r30, 0xC1	; 193
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	90 81       	ld	r25, Z
     1e8:	9f 7e       	andi	r25, 0xEF	; 239
     1ea:	90 83       	st	Z, r25
	UCSR0B &= ~(1 << RXCIE0);
     1ec:	90 81       	ld	r25, Z
     1ee:	9f 77       	andi	r25, 0x7F	; 127
     1f0:	90 83       	st	Z, r25
	while (!((1<<UDRE0)&&(UCSR0A))); //wait until the transmit register is ready
     1f2:	e0 ec       	ldi	r30, 0xC0	; 192
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	90 81       	ld	r25, Z
     1f8:	99 23       	and	r25, r25
     1fa:	e9 f3       	breq	.-6      	; 0x1f6 <UART_Transmit+0x14>
	UDR0 = myValue;//once ready, store next value for transmission
     1fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     200:	08 95       	ret

00000202 <UART_InterpretPumpingEffort>:

//only changes dutycycle
void UART_InterpretPumpingEffort(){
	uint32_t voltageEquivalentValue;
	//pumpingEffort = 179; //mock pumping effort
	if(pumpingEffort==255){ //255 lose your mind
     202:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <pumpingEffort>
     206:	8f 3f       	cpi	r24, 0xFF	; 255
     208:	49 f4       	brne	.+18     	; 0x21c <UART_InterpretPumpingEffort+0x1a>
		//power_all_enable();
		//change duty cycle and pwm to max out the motors
		
		dutyCycle = 99;
     20a:	83 e6       	ldi	r24, 0x63	; 99
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <dutyCycle+0x1>
     212:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <dutyCycle>
		lowPowerMode = false;
     216:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lowPowerMode>
     21a:	55 c0       	rjmp	.+170    	; 0x2c6 <UART_InterpretPumpingEffort+0xc4>
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){
     21c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <pumpingEffort>
     220:	88 23       	and	r24, r24
     222:	31 f1       	breq	.+76     	; 0x270 <UART_InterpretPumpingEffort+0x6e>
     224:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <pumpingEffort>
     228:	83 3b       	cpi	r24, 0xB3	; 179
     22a:	10 f5       	brcc	.+68     	; 0x270 <UART_InterpretPumpingEffort+0x6e>
		//power_all_enable();
		//70% of values - care about efficiency and meeting pumpingEffort
		//efficiency actions turn two switches off
		//disable all unused modules
		if(!lowPowerMode){
     22c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     230:	81 11       	cpse	r24, r1
     232:	0a c0       	rjmp	.+20     	; 0x248 <UART_InterpretPumpingEffort+0x46>
			frequency /= 2;
     234:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <frequency>
     238:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <frequency+0x1>
     23c:	96 95       	lsr	r25
     23e:	87 95       	ror	r24
     240:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <frequency+0x1>
     244:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <frequency>
		}
		lowPowerMode = true; //turn off two switches push from one direction
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <lowPowerMode>
		dutyCycle = (30*pumpingEffort + 1300)/100;
     24e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <pumpingEffort>
     252:	2e e1       	ldi	r18, 0x1E	; 30
     254:	82 9f       	mul	r24, r18
     256:	c0 01       	movw	r24, r0
     258:	11 24       	eor	r1, r1
     25a:	8c 5e       	subi	r24, 0xEC	; 236
     25c:	9a 4f       	sbci	r25, 0xFA	; 250
     25e:	64 e6       	ldi	r22, 0x64	; 100
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	0e 94 ac 08 	call	0x1158	; 0x1158 <__divmodhi4>
     266:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <dutyCycle+0x1>
     26a:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <dutyCycle>
     26e:	2b c0       	rjmp	.+86     	; 0x2c6 <UART_InterpretPumpingEffort+0xc4>
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){
     270:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <pumpingEffort>
     274:	83 3b       	cpi	r24, 0xB3	; 179
     276:	18 f1       	brcs	.+70     	; 0x2be <UART_InterpretPumpingEffort+0xbc>
     278:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <pumpingEffort>
     27c:	8f 3f       	cpi	r24, 0xFF	; 255
     27e:	f9 f0       	breq	.+62     	; 0x2be <UART_InterpretPumpingEffort+0xbc>
		//power_all_enable();
		//30% of values - go ham fam
		if(lowPowerMode){
     280:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     284:	88 23       	and	r24, r24
     286:	51 f0       	breq	.+20     	; 0x29c <UART_InterpretPumpingEffort+0x9a>
			frequency *= 2;
     288:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <frequency>
     28c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <frequency+0x1>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <frequency+0x1>
     298:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <frequency>
		}
		lowPowerMode = false;
     29c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lowPowerMode>
		dutyCycle = 37*pumpingEffort/100;
     2a0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <pumpingEffort>
     2a4:	25 e2       	ldi	r18, 0x25	; 37
     2a6:	82 9f       	mul	r24, r18
     2a8:	c0 01       	movw	r24, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	64 e6       	ldi	r22, 0x64	; 100
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	0e 94 ac 08 	call	0x1158	; 0x1158 <__divmodhi4>
     2b4:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <dutyCycle+0x1>
     2b8:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <dutyCycle>
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <UART_InterpretPumpingEffort+0xc4>
	}else{ 
		//turn off mode
		//power_all_disable(); //disables all modules on the microcontroller
		//power_usart0_enable();
		dutyCycle = 0;
     2be:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <dutyCycle+0x1>
     2c2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <dutyCycle>
	}
	changePumpingEffort	 = false;
     2c6:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <changePumpingEffort>
     2ca:	08 95       	ret

000002cc <MFCmodulator>:
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);

}


void MFCmodulator(uint8_t requiredValue, uint8_t currentValue){
     2cc:	df 92       	push	r13
     2ce:	ef 92       	push	r14
     2d0:	ff 92       	push	r15
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	18 2f       	mov	r17, r24
     2dc:	d6 2f       	mov	r29, r22
	//temp conversion variables. Used to split 3 digit numbers as only one digit can be sent at a time
	uint8_t firstDigit = 0;
	uint8_t secondDigit = 0;
	uint8_t thirdDigit = 0;
	
	UART_Transmit(13); //carriage return
     2de:	8d e0       	ldi	r24, 0x0D	; 13
     2e0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(123); //{
     2e4:	8b e7       	ldi	r24, 0x7B	; 123
     2e6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(10); //line feed 
     2ea:	8a e0       	ldi	r24, 0x0A	; 10
     2ec:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(13); //carriage return
     2f0:	8d e0       	ldi	r24, 0x0D	; 13
     2f2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	
	//LCC Identifier 
	UART_Transmit(34); //"
     2f6:	82 e2       	ldi	r24, 0x22	; 34
     2f8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(51);//3
     2fc:	83 e3       	ldi	r24, 0x33	; 51
     2fe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     302:	82 e2       	ldi	r24, 0x22	; 34
     304:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58);//:
     308:	8a e3       	ldi	r24, 0x3A	; 58
     30a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>

	//MFC 
	UART_Transmit(10); //Line feed
     30e:	8a e0       	ldi	r24, 0x0A	; 10
     310:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(13); //carriage return
     314:	8d e0       	ldi	r24, 0x0D	; 13
     316:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(123); //{
     31a:	8b e7       	ldi	r24, 0x7B	; 123
     31c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(10); //Line feed
     320:	8a e0       	ldi	r24, 0x0A	; 10
     322:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(13); //carriage return
     326:	8d e0       	ldi	r24, 0x0D	; 13
     328:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	
	
	//MFC letter setup
	UART_Transmit(34); //'
     32c:	82 e2       	ldi	r24, 0x22	; 34
     32e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(109);//m
     332:	8d e6       	ldi	r24, 0x6D	; 109
     334:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(102);//f
     338:	86 e6       	ldi	r24, 0x66	; 102
     33a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(99);//c
     33e:	83 e6       	ldi	r24, 0x63	; 99
     340:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     344:	82 e2       	ldi	r24, 0x22	; 34
     346:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58);//:
     34a:	8a e3       	ldi	r24, 0x3A	; 58
     34c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	 

	//MFC Values 
	UART_Transmit(123); //{
     350:	8b e7       	ldi	r24, 0x7B	; 123
     352:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34); //"
     356:	82 e2       	ldi	r24, 0x22	; 34
     358:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(114);//r
     35c:	82 e7       	ldi	r24, 0x72	; 114
     35e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(101);//e
     362:	85 e6       	ldi	r24, 0x65	; 101
     364:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(113);//q
     368:	81 e7       	ldi	r24, 0x71	; 113
     36a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     36e:	82 e2       	ldi	r24, 0x22	; 34
     370:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58);//:
     374:	8a e3       	ldi	r24, 0x3A	; 58
     376:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     37a:	82 e2       	ldi	r24, 0x22	; 34
     37c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	
	//required value transmission
	firstDigit = requiredValue/100;
     380:	c9 e2       	ldi	r28, 0x29	; 41
     382:	1c 9f       	mul	r17, r28
     384:	21 2d       	mov	r18, r1
     386:	11 24       	eor	r1, r1
     388:	22 95       	swap	r18
     38a:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (requiredValue-(firstDigit*100))/10;
     38c:	0c e9       	ldi	r16, 0x9C	; 156
     38e:	02 03       	mulsu	r16, r18
     390:	c0 01       	movw	r24, r0
     392:	11 24       	eor	r1, r1
     394:	81 0f       	add	r24, r17
     396:	91 1d       	adc	r25, r1
     398:	0f 2e       	mov	r0, r31
     39a:	fa e0       	ldi	r31, 0x0A	; 10
     39c:	ef 2e       	mov	r14, r31
     39e:	f1 2c       	mov	r15, r1
     3a0:	f0 2d       	mov	r31, r0
     3a2:	b7 01       	movw	r22, r14
     3a4:	0e 94 ac 08 	call	0x1158	; 0x1158 <__divmodhi4>
     3a8:	d6 2e       	mov	r13, r22
	thirdDigit = requiredValue - (firstDigit*100) - (secondDigit*10);
     3aa:	20 9f       	mul	r18, r16
     3ac:	10 0d       	add	r17, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	96 2f       	mov	r25, r22
     3b2:	99 0f       	add	r25, r25
     3b4:	89 2f       	mov	r24, r25
     3b6:	88 0f       	add	r24, r24
     3b8:	88 0f       	add	r24, r24
     3ba:	89 0f       	add	r24, r25
     3bc:	18 1b       	sub	r17, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     3be:	82 2f       	mov	r24, r18
     3c0:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     3c4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit)); 
     3c8:	8d 2d       	mov	r24, r13
     3ca:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     3ce:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     3d2:	81 2f       	mov	r24, r17
     3d4:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     3d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     3dc:	82 e2       	ldi	r24, 0x22	; 34
     3de:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(44);//,
     3e2:	8c e2       	ldi	r24, 0x2C	; 44
     3e4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	

	UART_Transmit(34);//"
     3e8:	82 e2       	ldi	r24, 0x22	; 34
     3ea:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(99);//c
     3ee:	83 e6       	ldi	r24, 0x63	; 99
     3f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(117);//u
     3f4:	85 e7       	ldi	r24, 0x75	; 117
     3f6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(114);//r
     3fa:	82 e7       	ldi	r24, 0x72	; 114
     3fc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     400:	82 e2       	ldi	r24, 0x22	; 34
     402:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58);//:
     406:	8a e3       	ldi	r24, 0x3A	; 58
     408:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     40c:	82 e2       	ldi	r24, 0x22	; 34
     40e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	//current value transmission
	firstDigit = currentValue/100;
     412:	dc 9f       	mul	r29, r28
     414:	21 2d       	mov	r18, r1
     416:	11 24       	eor	r1, r1
     418:	22 95       	swap	r18
     41a:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (currentValue-(firstDigit*100))/10;
     41c:	02 03       	mulsu	r16, r18
     41e:	c0 01       	movw	r24, r0
     420:	11 24       	eor	r1, r1
     422:	8d 0f       	add	r24, r29
     424:	91 1d       	adc	r25, r1
     426:	b7 01       	movw	r22, r14
     428:	0e 94 ac 08 	call	0x1158	; 0x1158 <__divmodhi4>
     42c:	c6 2f       	mov	r28, r22
	thirdDigit = currentValue - (firstDigit*100) - (secondDigit*10);
     42e:	20 9f       	mul	r18, r16
     430:	d0 0d       	add	r29, r0
     432:	11 24       	eor	r1, r1
     434:	96 2f       	mov	r25, r22
     436:	99 0f       	add	r25, r25
     438:	89 2f       	mov	r24, r25
     43a:	88 0f       	add	r24, r24
     43c:	88 0f       	add	r24, r24
     43e:	89 0f       	add	r24, r25
     440:	d8 1b       	sub	r29, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     442:	82 2f       	mov	r24, r18
     444:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     448:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     44c:	8c 2f       	mov	r24, r28
     44e:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     452:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     456:	8d 2f       	mov	r24, r29
     458:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     45c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	
	UART_Transmit(34);//"
     460:	82 e2       	ldi	r24, 0x22	; 34
     462:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(125);//}
     466:	8d e7       	ldi	r24, 0x7D	; 125
     468:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(44);//,
     46c:	8c e2       	ldi	r24, 0x2C	; 44
     46e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(10); //Line feed
     472:	8a e0       	ldi	r24, 0x0A	; 10
     474:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(13); //carriage return
     478:	8d e0       	ldi	r24, 0x0D	; 13
     47a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	 
	
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	ff 90       	pop	r15
     488:	ef 90       	pop	r14
     48a:	df 90       	pop	r13
     48c:	08 95       	ret

0000048e <VERmodulator>:

void VERmodulator(){
	UART_Transmit(34); //"
     48e:	82 e2       	ldi	r24, 0x22	; 34
     490:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(118);//v
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(101);//e
     49a:	85 e6       	ldi	r24, 0x65	; 101
     49c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(114);//r
     4a0:	82 e7       	ldi	r24, 0x72	; 114
     4a2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     4a6:	82 e2       	ldi	r24, 0x22	; 34
     4a8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58);//:
     4ac:	8a e3       	ldi	r24, 0x3A	; 58
     4ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     4b2:	82 e2       	ldi	r24, 0x22	; 34
     4b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(49); //1
     4b8:	81 e3       	ldi	r24, 0x31	; 49
     4ba:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(46);//.
     4be:	8e e2       	ldi	r24, 0x2E	; 46
     4c0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(50);//2
     4c4:	82 e3       	ldi	r24, 0x32	; 50
     4c6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(46);//.
     4ca:	8e e2       	ldi	r24, 0x2E	; 46
     4cc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(51);//3
     4d0:	83 e3       	ldi	r24, 0x33	; 51
     4d2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     4d6:	82 e2       	ldi	r24, 0x22	; 34
     4d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(44); //,
     4dc:	8c e2       	ldi	r24, 0x2C	; 44
     4de:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(10); //Line feed 
     4e2:	8a e0       	ldi	r24, 0x0A	; 10
     4e4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(13); //carriage return
     4e8:	8d e0       	ldi	r24, 0x0D	; 13
     4ea:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
     4ee:	08 95       	ret

000004f0 <PARAMmodulator>:
	 
}

void PARAMmodulator(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current){
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	d8 2f       	mov	r29, r24
     50a:	96 2e       	mov	r9, r22
     50c:	69 01       	movw	r12, r18
     50e:	7a 01       	movw	r14, r20
	uint8_t firstDigit; 
	uint8_t secondDigit;
	uint8_t thirdDigit;
	uint8_t fourthDigit;
	UART_Transmit(34);//"
     510:	82 e2       	ldi	r24, 0x22	; 34
     512:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(112);//p
     516:	80 e7       	ldi	r24, 0x70	; 112
     518:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(97);//a
     51c:	81 e6       	ldi	r24, 0x61	; 97
     51e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(114);//r
     522:	82 e7       	ldi	r24, 0x72	; 114
     524:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(97);//a
     528:	81 e6       	ldi	r24, 0x61	; 97
     52a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(109);//m
     52e:	8d e6       	ldi	r24, 0x6D	; 109
     530:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     534:	82 e2       	ldi	r24, 0x22	; 34
     536:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58);//:
     53a:	8a e3       	ldi	r24, 0x3A	; 58
     53c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(123);//{
     540:	8b e7       	ldi	r24, 0x7B	; 123
     542:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	
	//parameters
	
	UART_Transmit(34); //"
     546:	82 e2       	ldi	r24, 0x22	; 34
     548:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(112); //p
     54c:	80 e7       	ldi	r24, 0x70	; 112
     54e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(119); //w
     552:	87 e7       	ldi	r24, 0x77	; 119
     554:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(114);//r 
     558:	82 e7       	ldi	r24, 0x72	; 114
     55a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34); //"
     55e:	82 e2       	ldi	r24, 0x22	; 34
     560:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58); //:
     564:	8a e3       	ldi	r24, 0x3A	; 58
     566:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     56a:	82 e2       	ldi	r24, 0x22	; 34
     56c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	
	//power parameters 
	firstDigit = averagePower/100;
     570:	c9 e2       	ldi	r28, 0x29	; 41
     572:	dc 9f       	mul	r29, r28
     574:	21 2d       	mov	r18, r1
     576:	11 24       	eor	r1, r1
     578:	22 95       	swap	r18
     57a:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (averagePower-(firstDigit*100))/10;
     57c:	1c e9       	ldi	r17, 0x9C	; 156
     57e:	12 03       	mulsu	r17, r18
     580:	c0 01       	movw	r24, r0
     582:	11 24       	eor	r1, r1
     584:	8d 0f       	add	r24, r29
     586:	91 1d       	adc	r25, r1
     588:	0f 2e       	mov	r0, r31
     58a:	fa e0       	ldi	r31, 0x0A	; 10
     58c:	af 2e       	mov	r10, r31
     58e:	b1 2c       	mov	r11, r1
     590:	f0 2d       	mov	r31, r0
     592:	b5 01       	movw	r22, r10
     594:	0e 94 ac 08 	call	0x1158	; 0x1158 <__divmodhi4>
     598:	86 2e       	mov	r8, r22
	thirdDigit = averagePower - (firstDigit*100) - (secondDigit*10);
     59a:	21 9f       	mul	r18, r17
     59c:	d0 0d       	add	r29, r0
     59e:	11 24       	eor	r1, r1
     5a0:	96 2f       	mov	r25, r22
     5a2:	99 0f       	add	r25, r25
     5a4:	89 2f       	mov	r24, r25
     5a6:	88 0f       	add	r24, r24
     5a8:	88 0f       	add	r24, r24
     5aa:	89 0f       	add	r24, r25
     5ac:	d8 1b       	sub	r29, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     5ae:	82 2f       	mov	r24, r18
     5b0:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     5b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     5b8:	88 2d       	mov	r24, r8
     5ba:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     5be:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(46); //decimal point
     5c2:	8e e2       	ldi	r24, 0x2E	; 46
     5c4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     5c8:	8d 2f       	mov	r24, r29
     5ca:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     5ce:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(87); //W
     5d2:	87 e5       	ldi	r24, 0x57	; 87
     5d4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34); //"
     5d8:	82 e2       	ldi	r24, 0x22	; 34
     5da:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(44); //,
     5de:	8c e2       	ldi	r24, 0x2C	; 44
     5e0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	 
	 
	
	//frequency
	UART_Transmit(34); //"
     5e4:	82 e2       	ldi	r24, 0x22	; 34
     5e6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(102);//f
     5ea:	86 e6       	ldi	r24, 0x66	; 102
     5ec:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(114);//r
     5f0:	82 e7       	ldi	r24, 0x72	; 114
     5f2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(101);//e
     5f6:	85 e6       	ldi	r24, 0x65	; 101
     5f8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(113);//q
     5fc:	81 e7       	ldi	r24, 0x71	; 113
     5fe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     602:	82 e2       	ldi	r24, 0x22	; 34
     604:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58);//:
     608:	8a e3       	ldi	r24, 0x3A	; 58
     60a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     60e:	82 e2       	ldi	r24, 0x22	; 34
     610:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	firstDigit = operatingFrequency/10;
     614:	8d ec       	ldi	r24, 0xCD	; 205
     616:	98 9e       	mul	r9, r24
     618:	81 2d       	mov	r24, r1
     61a:	11 24       	eor	r1, r1
     61c:	86 95       	lsr	r24
     61e:	86 95       	lsr	r24
     620:	86 95       	lsr	r24
	secondDigit = operatingFrequency-(firstDigit*10);
     622:	28 2f       	mov	r18, r24
     624:	22 0f       	add	r18, r18
     626:	92 2f       	mov	r25, r18
     628:	99 0f       	add	r25, r25
     62a:	99 0f       	add	r25, r25
     62c:	92 0f       	add	r25, r18
     62e:	99 1a       	sub	r9, r25
	UART_Transmit(ASCIIConversion(firstDigit));
     630:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     634:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     638:	89 2d       	mov	r24, r9
     63a:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     63e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(72); //H
     642:	88 e4       	ldi	r24, 0x48	; 72
     644:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(122);//z
     648:	8a e7       	ldi	r24, 0x7A	; 122
     64a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     64e:	82 e2       	ldi	r24, 0x22	; 34
     650:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(44);//,
     654:	8c e2       	ldi	r24, 0x2C	; 44
     656:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	
	//current 

	UART_Transmit(34); //"
     65a:	82 e2       	ldi	r24, 0x22	; 34
     65c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(99); //c
     660:	83 e6       	ldi	r24, 0x63	; 99
     662:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(117); //u
     666:	85 e7       	ldi	r24, 0x75	; 117
     668:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(114);//r
     66c:	82 e7       	ldi	r24, 0x72	; 114
     66e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(114);//r
     672:	82 e7       	ldi	r24, 0x72	; 114
     674:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34); //"
     678:	82 e2       	ldi	r24, 0x22	; 34
     67a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58); //:
     67e:	8a e3       	ldi	r24, 0x3A	; 58
     680:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34);//"
     684:	82 e2       	ldi	r24, 0x22	; 34
     686:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	firstDigit = current/100;
     68a:	0c 9f       	mul	r16, r28
     68c:	21 2d       	mov	r18, r1
     68e:	11 24       	eor	r1, r1
     690:	22 95       	swap	r18
     692:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (current-(firstDigit*100))/10;
     694:	12 03       	mulsu	r17, r18
     696:	c0 01       	movw	r24, r0
     698:	11 24       	eor	r1, r1
     69a:	80 0f       	add	r24, r16
     69c:	91 1d       	adc	r25, r1
     69e:	b5 01       	movw	r22, r10
     6a0:	0e 94 ac 08 	call	0x1158	; 0x1158 <__divmodhi4>
     6a4:	c6 2f       	mov	r28, r22
	thirdDigit = current - (firstDigit*100) - (secondDigit*10);
     6a6:	21 9f       	mul	r18, r17
     6a8:	00 0d       	add	r16, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	96 2f       	mov	r25, r22
     6ae:	99 0f       	add	r25, r25
     6b0:	89 2f       	mov	r24, r25
     6b2:	88 0f       	add	r24, r24
     6b4:	88 0f       	add	r24, r24
     6b6:	89 0f       	add	r24, r25
     6b8:	08 1b       	sub	r16, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     6ba:	82 2f       	mov	r24, r18
     6bc:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     6c0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     6c4:	8c 2f       	mov	r24, r28
     6c6:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     6ca:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     6ce:	80 2f       	mov	r24, r16
     6d0:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     6d4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(109); //m
     6d8:	8d e6       	ldi	r24, 0x6D	; 109
     6da:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(65); //A
     6de:	81 e4       	ldi	r24, 0x41	; 65
     6e0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34); //"
     6e4:	82 e2       	ldi	r24, 0x22	; 34
     6e6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(44); //,
     6ea:	8c e2       	ldi	r24, 0x2C	; 44
     6ec:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	
	//applied voltage
	 
	UART_Transmit(34); //"
     6f0:	82 e2       	ldi	r24, 0x22	; 34
     6f2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(118); //v
     6f6:	86 e7       	ldi	r24, 0x76	; 118
     6f8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(111); //o
     6fc:	8f e6       	ldi	r24, 0x6F	; 111
     6fe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(108); //l
     702:	8c e6       	ldi	r24, 0x6C	; 108
     704:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(116); //t
     708:	84 e7       	ldi	r24, 0x74	; 116
     70a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34); //"
     70e:	82 e2       	ldi	r24, 0x22	; 34
     710:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(58); //:
     714:	8a e3       	ldi	r24, 0x3A	; 58
     716:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34); //"
     71a:	82 e2       	ldi	r24, 0x22	; 34
     71c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	firstDigit = appliedVoltage/1000;
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	28 ee       	ldi	r18, 0xE8	; 232
     726:	33 e0       	ldi	r19, 0x03	; 3
     728:	40 e0       	ldi	r20, 0x00	; 0
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
     730:	d2 2f       	mov	r29, r18
	secondDigit = (appliedVoltage-(firstDigit*1000))/100;
     732:	28 ee       	ldi	r18, 0xE8	; 232
     734:	33 e0       	ldi	r19, 0x03	; 3
     736:	d2 9f       	mul	r29, r18
     738:	c0 01       	movw	r24, r0
     73a:	d3 9f       	mul	r29, r19
     73c:	90 0d       	add	r25, r0
     73e:	11 24       	eor	r1, r1
     740:	09 2e       	mov	r0, r25
     742:	00 0c       	add	r0, r0
     744:	aa 0b       	sbc	r26, r26
     746:	bb 0b       	sbc	r27, r27
     748:	46 01       	movw	r8, r12
     74a:	57 01       	movw	r10, r14
     74c:	88 1a       	sub	r8, r24
     74e:	99 0a       	sbc	r9, r25
     750:	aa 0a       	sbc	r10, r26
     752:	bb 0a       	sbc	r11, r27
     754:	c5 01       	movw	r24, r10
     756:	b4 01       	movw	r22, r8
     758:	24 e6       	ldi	r18, 0x64	; 100
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
     764:	c2 2f       	mov	r28, r18
	thirdDigit = (appliedVoltage - (firstDigit*1000) - (secondDigit*100))/10;
     766:	14 e6       	ldi	r17, 0x64	; 100
     768:	12 9f       	mul	r17, r18
     76a:	c0 01       	movw	r24, r0
     76c:	11 24       	eor	r1, r1
     76e:	09 2e       	mov	r0, r25
     770:	00 0c       	add	r0, r0
     772:	aa 0b       	sbc	r26, r26
     774:	bb 0b       	sbc	r27, r27
     776:	a5 01       	movw	r20, r10
     778:	94 01       	movw	r18, r8
     77a:	28 1b       	sub	r18, r24
     77c:	39 0b       	sbc	r19, r25
     77e:	4a 0b       	sbc	r20, r26
     780:	5b 0b       	sbc	r21, r27
     782:	ca 01       	movw	r24, r20
     784:	b9 01       	movw	r22, r18
     786:	2a e0       	ldi	r18, 0x0A	; 10
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
     792:	02 2f       	mov	r16, r18
	fourthDigit = appliedVoltage -(firstDigit*1000) - (secondDigit*100) - (thirdDigit*10);
     794:	38 e1       	ldi	r19, 0x18	; 24
     796:	d3 9f       	mul	r29, r19
     798:	c0 0c       	add	r12, r0
     79a:	11 24       	eor	r1, r1
     79c:	1c 9f       	mul	r17, r28
     79e:	c0 18       	sub	r12, r0
     7a0:	11 24       	eor	r1, r1
     7a2:	90 2f       	mov	r25, r16
     7a4:	99 0f       	add	r25, r25
     7a6:	89 2f       	mov	r24, r25
     7a8:	88 0f       	add	r24, r24
     7aa:	88 0f       	add	r24, r24
     7ac:	89 0f       	add	r24, r25
     7ae:	c8 1a       	sub	r12, r24
	UART_Transmit(ASCIIConversion(firstDigit));
     7b0:	8d 2f       	mov	r24, r29
     7b2:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     7b6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
     7ba:	8c 2f       	mov	r24, r28
     7bc:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     7c0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(46); //decimal point
     7c4:	8e e2       	ldi	r24, 0x2E	; 46
     7c6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
     7ca:	80 2f       	mov	r24, r16
     7cc:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     7d0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(ASCIIConversion(fourthDigit));
     7d4:	8c 2d       	mov	r24, r12
     7d6:	0e 94 90 06 	call	0xd20	; 0xd20 <ASCIIConversion>
     7da:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(86); //V
     7de:	86 e5       	ldi	r24, 0x56	; 86
     7e0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(34); //"
     7e4:	82 e2       	ldi	r24, 0x22	; 34
     7e6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	
	 
	UART_Transmit(125); //}
     7ea:	8d e7       	ldi	r24, 0x7D	; 125
     7ec:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(44);//,
     7f0:	8c e2       	ldi	r24, 0x2C	; 44
     7f2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(10); //line feed
     7f6:	8a e0       	ldi	r24, 0x0A	; 10
     7f8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(13); //carriage return
     7fc:	8d e0       	ldi	r24, 0x0D	; 13
     7fe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	 
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	bf 90       	pop	r11
     814:	af 90       	pop	r10
     816:	9f 90       	pop	r9
     818:	8f 90       	pop	r8
     81a:	08 95       	ret

0000081c <ERRORmodulator>:

void ERRORmodulator(bool jamErrorFlag, bool collisionErrorFlag){  
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	d8 2f       	mov	r29, r24
     822:	c6 2f       	mov	r28, r22
	//error clear tells us whether we need to clear the error array
	if(clearErrorFlag){
     824:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <clearErrorFlag>
     828:	88 23       	and	r24, r24
     82a:	51 f1       	breq	.+84     	; 0x880 <ERRORmodulator+0x64>
		UART_Transmit(34); //"
     82c:	82 e2       	ldi	r24, 0x22	; 34
     82e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(99); //c
     832:	83 e6       	ldi	r24, 0x63	; 99
     834:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(108); //l
     838:	8c e6       	ldi	r24, 0x6C	; 108
     83a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(114); //r
     83e:	82 e7       	ldi	r24, 0x72	; 114
     840:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(34); //"
     844:	82 e2       	ldi	r24, 0x22	; 34
     846:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(58); //:
     84a:	8a e3       	ldi	r24, 0x3A	; 58
     84c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(34); //"
     850:	82 e2       	ldi	r24, 0x22	; 34
     852:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(101); //e
     856:	85 e6       	ldi	r24, 0x65	; 101
     858:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(119); //w
     85c:	87 e7       	ldi	r24, 0x77	; 119
     85e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(34); //"
     862:	82 e2       	ldi	r24, 0x22	; 34
     864:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(44); //,
     868:	8c e2       	ldi	r24, 0x2C	; 44
     86a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(10); //line feed
     86e:	8a e0       	ldi	r24, 0x0A	; 10
     870:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(13); //carriage return
     874:	8d e0       	ldi	r24, 0x0D	; 13
     876:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		clearErrorFlag = false;
     87a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <clearErrorFlag>
     87e:	36 c0       	rjmp	.+108    	; 0x8ec <ERRORmodulator+0xd0>
	}else{
		UART_Transmit(10); //line feed
     880:	8a e0       	ldi	r24, 0x0A	; 10
     882:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		UART_Transmit(13); //carriage return
     886:	8d e0       	ldi	r24, 0x0D	; 13
     888:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
		
		if(collisionErrorFlag || jamErrorFlag) {
     88c:	c1 11       	cpse	r28, r1
     88e:	7c c0       	rjmp	.+248    	; 0x988 <__stack+0x89>
     890:	d1 11       	cpse	r29, r1
     892:	45 c0       	rjmp	.+138    	; 0x91e <__stack+0x1f>
     894:	25 c0       	rjmp	.+74     	; 0x8e0 <ERRORmodulator+0xc4>
					UART_Transmit(44); //,
				}
			}

			if(collisionErrorFlag){ //compressor colliding
				UART_Transmit(34); //"
     896:	82 e2       	ldi	r24, 0x22	; 34
     898:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(99); //c
     89c:	83 e6       	ldi	r24, 0x63	; 99
     89e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(111); //o
     8a2:	8f e6       	ldi	r24, 0x6F	; 111
     8a4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(108); //l
     8a8:	8c e6       	ldi	r24, 0x6C	; 108
     8aa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(108); //l
     8ae:	8c e6       	ldi	r24, 0x6C	; 108
     8b0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(105); //i
     8b4:	89 e6       	ldi	r24, 0x69	; 105
     8b6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(115); //s
     8ba:	83 e7       	ldi	r24, 0x73	; 115
     8bc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(105); //i
     8c0:	89 e6       	ldi	r24, 0x69	; 105
     8c2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(111); //o
     8c6:	8f e6       	ldi	r24, 0x6F	; 111
     8c8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(110); //n
     8cc:	8e e6       	ldi	r24, 0x6E	; 110
     8ce:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(34); //"
     8d2:	82 e2       	ldi	r24, 0x22	; 34
     8d4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			}
			
			
			UART_Transmit(93); //[
     8d8:	8d e5       	ldi	r24, 0x5D	; 93
     8da:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
     8de:	06 c0       	rjmp	.+12     	; 0x8ec <ERRORmodulator+0xd0>
			
			}else{ //no errors present
			UART_Transmit(10); //line feed
     8e0:	8a e0       	ldi	r24, 0x0A	; 10
     8e2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(13); //carriage return
     8e6:	8d e0       	ldi	r24, 0x0D	; 13
     8e8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	}
	
	
	//print final curly brackets
	
	UART_Transmit(10); //line feed
     8ec:	8a e0       	ldi	r24, 0x0A	; 10
     8ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(13); //carriage return
     8f2:	8d e0       	ldi	r24, 0x0D	; 13
     8f4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(125); // }
     8f8:	8d e7       	ldi	r24, 0x7D	; 125
     8fa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(10); //line feed
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(13); //carriage return
     904:	8d e0       	ldi	r24, 0x0D	; 13
     906:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(125); // }
     90a:	8d e7       	ldi	r24, 0x7D	; 125
     90c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(10); //line feed
     910:	8a e0       	ldi	r24, 0x0A	; 10
     912:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
	UART_Transmit(13); //carriage return
     916:	8d e0       	ldi	r24, 0x0D	; 13
     918:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>


     91c:	4b c0       	rjmp	.+150    	; 0x9b4 <__stack+0xb5>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
     91e:	82 e2       	ldi	r24, 0x22	; 34
     920:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(101); //e
     924:	85 e6       	ldi	r24, 0x65	; 101
     926:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(119); //w
     92a:	87 e7       	ldi	r24, 0x77	; 119
     92c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(34); // "
     930:	82 e2       	ldi	r24, 0x22	; 34
     932:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(58); //:
     936:	8a e3       	ldi	r24, 0x3A	; 58
     938:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(91); //[
     93c:	8b e5       	ldi	r24, 0x5B	; 91
     93e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
     942:	82 e2       	ldi	r24, 0x22	; 34
     944:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(106); //j
     948:	8a e6       	ldi	r24, 0x6A	; 106
     94a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(97); //a
     94e:	81 e6       	ldi	r24, 0x61	; 97
     950:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(109); //m
     954:	8d e6       	ldi	r24, 0x6D	; 109
     956:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(34); //"
     95a:	82 e2       	ldi	r24, 0x22	; 34
     95c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
     960:	bb cf       	rjmp	.-138    	; 0x8d8 <ERRORmodulator+0xbc>
			UART_Transmit(58); //:
			UART_Transmit(91); //[
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
     962:	82 e2       	ldi	r24, 0x22	; 34
     964:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(106); //j
     968:	8a e6       	ldi	r24, 0x6A	; 106
     96a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(97); //a
     96e:	81 e6       	ldi	r24, 0x61	; 97
     970:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(109); //m
     974:	8d e6       	ldi	r24, 0x6D	; 109
     976:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				UART_Transmit(34); //"
     97a:	82 e2       	ldi	r24, 0x22	; 34
     97c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
				if(jamErrorFlag && collisionErrorFlag){
					UART_Transmit(44); //,
     980:	8c e2       	ldi	r24, 0x2C	; 44
     982:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
     986:	87 cf       	rjmp	.-242    	; 0x896 <ERRORmodulator+0x7a>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
     988:	82 e2       	ldi	r24, 0x22	; 34
     98a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(101); //e
     98e:	85 e6       	ldi	r24, 0x65	; 101
     990:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(119); //w
     994:	87 e7       	ldi	r24, 0x77	; 119
     996:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(34); // "
     99a:	82 e2       	ldi	r24, 0x22	; 34
     99c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(58); //:
     9a0:	8a e3       	ldi	r24, 0x3A	; 58
     9a2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			UART_Transmit(91); //[
     9a6:	8b e5       	ldi	r24, 0x5B	; 91
     9a8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
     9ac:	dd 23       	and	r29, r29
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	72 cf       	rjmp	.-284    	; 0x896 <ERRORmodulator+0x7a>
     9b2:	d7 cf       	rjmp	.-82     	; 0x962 <__stack+0x63>
	UART_Transmit(125); // }
	UART_Transmit(10); //line feed
	UART_Transmit(13); //carriage return


     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <UART_SendJson>:
	}
	changePumpingEffort	 = false;
}


void UART_SendJson(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current,bool jamErrorFlag, bool collisionErrorFlag, uint8_t requiredValue, uint8_t currentValue){
     9ba:	4f 92       	push	r4
     9bc:	5f 92       	push	r5
     9be:	6f 92       	push	r6
     9c0:	7f 92       	push	r7
     9c2:	8f 92       	push	r8
     9c4:	af 92       	push	r10
     9c6:	cf 92       	push	r12
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	18 2f       	mov	r17, r24
     9da:	f6 2e       	mov	r15, r22
     9dc:	29 01       	movw	r4, r18
     9de:	3a 01       	movw	r6, r20
     9e0:	8a 2d       	mov	r24, r10
     9e2:	68 2d       	mov	r22, r8
	MFCmodulator(requiredValue,currentValue);
     9e4:	0e 94 66 01 	call	0x2cc	; 0x2cc <MFCmodulator>
	VERmodulator();
     9e8:	0e 94 47 02 	call	0x48e	; 0x48e <VERmodulator>
	PARAMmodulator(averagePower,operatingFrequency,appliedVoltage,current);
     9ec:	a3 01       	movw	r20, r6
     9ee:	92 01       	movw	r18, r4
     9f0:	6f 2d       	mov	r22, r15
     9f2:	81 2f       	mov	r24, r17
     9f4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <PARAMmodulator>
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);
     9f8:	6c 2d       	mov	r22, r12
     9fa:	8e 2d       	mov	r24, r14
     9fc:	0e 94 0e 04 	call	0x81c	; 0x81c <ERRORmodulator>

}
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	cf 90       	pop	r12
     a0e:	af 90       	pop	r10
     a10:	8f 90       	pop	r8
     a12:	7f 90       	pop	r7
     a14:	6f 90       	pop	r6
     a16:	5f 90       	pop	r5
     a18:	4f 90       	pop	r4
     a1a:	08 95       	ret

00000a1c <usart_putchar_printf>:
	}
}

void safetyShutdown(){
	if(cmprJammed){
		pumpingEffort = 0; //stop the coil if an error has occurred
     a1c:	cf 93       	push	r28
     a1e:	c8 2f       	mov	r28, r24
     a20:	8a 30       	cpi	r24, 0x0A	; 10
     a22:	19 f4       	brne	.+6      	; 0xa2a <usart_putchar_printf+0xe>
     a24:	8d e0       	ldi	r24, 0x0D	; 13
     a26:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
     a2a:	8c 2f       	mov	r24, r28
     a2c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Transmit>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <concatenate>:
     a38:	c0 97       	sbiw	r24, 0x30	; 48
     a3a:	e4 e6       	ldi	r30, 0x64	; 100
     a3c:	e8 9f       	mul	r30, r24
     a3e:	90 01       	movw	r18, r0
     a40:	e9 9f       	mul	r30, r25
     a42:	30 0d       	add	r19, r0
     a44:	11 24       	eor	r1, r1
     a46:	60 53       	subi	r22, 0x30	; 48
     a48:	71 09       	sbc	r23, r1
     a4a:	cb 01       	movw	r24, r22
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	66 0f       	add	r22, r22
     a52:	77 1f       	adc	r23, r23
     a54:	66 0f       	add	r22, r22
     a56:	77 1f       	adc	r23, r23
     a58:	66 0f       	add	r22, r22
     a5a:	77 1f       	adc	r23, r23
     a5c:	68 0f       	add	r22, r24
     a5e:	79 1f       	adc	r23, r25
     a60:	62 0f       	add	r22, r18
     a62:	73 1f       	adc	r23, r19
     a64:	ca 01       	movw	r24, r20
     a66:	c0 97       	sbiw	r24, 0x30	; 48
     a68:	86 0f       	add	r24, r22
     a6a:	97 1f       	adc	r25, r23
     a6c:	08 95       	ret

00000a6e <__vector_18>:
     a6e:	1f 92       	push	r1
     a70:	0f 92       	push	r0
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	0f 92       	push	r0
     a76:	11 24       	eor	r1, r1
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
     a80:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a84:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <received>
     a88:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_count>
     a8c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <rx_count+0x1>
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <rx_count+0x1>
     a96:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_count>
     a9a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_count>
     a9e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <rx_count+0x1>
     aa2:	45 97       	sbiw	r24, 0x15	; 21
     aa4:	4c f0       	brlt	.+18     	; 0xab8 <__vector_18+0x4a>
     aa6:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <rx_count>
     aaa:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <rx_count+0x1>
     aae:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <received>
     ab2:	e9 5e       	subi	r30, 0xE9	; 233
     ab4:	fe 4f       	sbci	r31, 0xFE	; 254
     ab6:	80 83       	st	Z, r24
     ab8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_count>
     abc:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <rx_count+0x1>
     ac0:	82 97       	sbiw	r24, 0x22	; 34
     ac2:	4c f0       	brlt	.+18     	; 0xad6 <__vector_18+0x68>
     ac4:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <rx_count>
     ac8:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <rx_count+0x1>
     acc:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <received>
     ad0:	ec 50       	subi	r30, 0x0C	; 12
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	80 83       	st	Z, r24
     ad6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_count>
     ada:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <rx_count+0x1>
     ade:	86 97       	sbiw	r24, 0x26	; 38
     ae0:	7c f0       	brlt	.+30     	; 0xb00 <__vector_18+0x92>
     ae2:	e1 ec       	ldi	r30, 0xC1	; 193
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	8f 77       	andi	r24, 0x7F	; 127
     aea:	80 83       	st	Z, r24
     aec:	80 81       	ld	r24, Z
     aee:	8f 7e       	andi	r24, 0xEF	; 239
     af0:	80 83       	st	Z, r24
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <finished>
     af8:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_count+0x1>
     afc:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_count>
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <__vector_20>:
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	8f 93       	push	r24
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
     b22:	e1 ec       	ldi	r30, 0xC1	; 193
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	80 61       	ori	r24, 0x10	; 16
     b2a:	80 83       	st	Z, r24
     b2c:	80 81       	ld	r24, Z
     b2e:	80 68       	ori	r24, 0x80	; 128
     b30:	80 83       	st	Z, r24
     b32:	ff 91       	pop	r31
     b34:	ef 91       	pop	r30
     b36:	8f 91       	pop	r24
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <__vector_12>:
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <isLHS>
     b54:	81 11       	cpse	r24, r1
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <__vector_12+0x1e>
     b58:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     b5c:	88 23       	and	r24, r24
     b5e:	51 f0       	breq	.+20     	; 0xb74 <__vector_12+0x32>
     b60:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <isDead>
     b64:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <count>
     b68:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     b6c:	89 17       	cp	r24, r25
     b6e:	58 f0       	brcs	.+22     	; 0xb86 <__vector_12+0x44>
     b70:	2a 98       	cbi	0x05, 2	; 5
     b72:	09 c0       	rjmp	.+18     	; 0xb86 <__vector_12+0x44>
     b74:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <isDead>
     b78:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <count>
     b7c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     b80:	89 17       	cp	r24, r25
     b82:	08 f0       	brcs	.+2      	; 0xb86 <__vector_12+0x44>
     b84:	29 98       	cbi	0x05, 1	; 5
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <ConvertTimerValueToDutyCycle>:
	}
}

uint8_t ConvertTimerValueToDutyCycle(){
	return ((dutyCycle*125)/100);
     b94:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <dutyCycle>
     b98:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <dutyCycle+0x1>
     b9c:	4d e7       	ldi	r20, 0x7D	; 125
     b9e:	48 9f       	mul	r20, r24
     ba0:	90 01       	movw	r18, r0
     ba2:	49 9f       	mul	r20, r25
     ba4:	30 0d       	add	r19, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	36 95       	lsr	r19
     baa:	27 95       	ror	r18
     bac:	36 95       	lsr	r19
     bae:	27 95       	ror	r18
     bb0:	ab e7       	ldi	r26, 0x7B	; 123
     bb2:	b4 e1       	ldi	r27, 0x14	; 20
     bb4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__umulhisi3>
     bb8:	96 95       	lsr	r25
     bba:	87 95       	ror	r24
}
     bbc:	08 95       	ret

00000bbe <CalculateDeadTime>:

uint16_t CalculateDeadTime(){
	return (((5000/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; //in ms
     bbe:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <frequency>
     bc2:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <frequency+0x1>
     bc6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <noOfWaves>
     bca:	88 e8       	ldi	r24, 0x88	; 136
     bcc:	93 e1       	ldi	r25, 0x13	; 19
     bce:	0e 94 98 08 	call	0x1130	; 0x1130 <__udivmodhi4>
     bd2:	62 1b       	sub	r22, r18
     bd4:	71 09       	sbc	r23, r1
}
     bd6:	8d e7       	ldi	r24, 0x7D	; 125
     bd8:	28 2f       	mov	r18, r24
     bda:	26 9f       	mul	r18, r22
     bdc:	c0 01       	movw	r24, r0
     bde:	27 9f       	mul	r18, r23
     be0:	90 0d       	add	r25, r0
     be2:	11 24       	eor	r1, r1
     be4:	08 95       	ret

00000be6 <__vector_11>:
	UCSR0B |= (1<<RXEN0);
	UCSR0B |= (1<<RXCIE0);
}


ISR(TIMER1_COMPA_vect){
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
	if(isLHS || lowPowerMode){	//LHS MOTION
     c08:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <isLHS>
     c0c:	81 11       	cpse	r24, r1
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <__vector_11+0x32>
     c10:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     c14:	88 23       	and	r24, r24
     c16:	e1 f1       	breq	.+120    	; 0xc90 <__vector_11+0xaa>
		if((count <= noOfWaves) && (!isDead)){//PRODUCING X NUMBER OF PWM OSCILLATIONS
     c18:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <count>
     c1c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     c20:	89 17       	cp	r24, r25
     c22:	78 f0       	brcs	.+30     	; 0xc42 <__vector_11+0x5c>
     c24:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <isDead>
     c28:	81 11       	cpse	r24, r1
     c2a:	0b c0       	rjmp	.+22     	; 0xc42 <__vector_11+0x5c>
			pumpingIsOccurring = true;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <pumpingIsOccurring>
			PORTB |= (1<< PB2); //turn RHS ON
     c32:	2a 9a       	sbi	0x05, 2	; 5
			PORTD |= (1<<PD5);
     c34:	5d 9a       	sbi	0x0b, 5	; 11
			count++;
     c36:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <count>
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <count>
     c40:	5e c0       	rjmp	.+188    	; 0xcfe <__vector_11+0x118>
		}
		else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
     c42:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <count>
     c46:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     c4a:	89 17       	cp	r24, r25
     c4c:	b0 f4       	brcc	.+44     	; 0xc7a <__vector_11+0x94>
			pumpingIsOccurring = false;
     c4e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <pumpingIsOccurring>
			PORTD &= ~(1<<PD5); //turn pmos off
     c52:	5d 98       	cbi	0x0b, 5	; 11
			PORTB &= ~(1<<PB2);//turn nmos off
     c54:	2a 98       	cbi	0x05, 2	; 5
			PWM_Change(CalculateDeadTime(),65535);
     c56:	0e 94 df 05 	call	0xbbe	; 0xbbe <CalculateDeadTime>
     c5a:	6f ef       	ldi	r22, 0xFF	; 255
     c5c:	7f ef       	ldi	r23, 0xFF	; 255
     c5e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Change>
			if(!lowPowerMode){
     c62:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
     c66:	81 11       	cpse	r24, r1
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <__vector_11+0x88>
				isLHS = false;
     c6a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <isLHS>
			}
			count = 0;
     c6e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <count>
			isDead = true; //deadzone begins
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <isDead>
     c78:	42 c0       	rjmp	.+132    	; 0xcfe <__vector_11+0x118>
		}
		else{	//end of deadzone, set the pwm frequency back to normal
			isDead = false;
     c7a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <isDead>
			PWM_Change(125,ConvertTimerValueToDutyCycle());
     c7e:	0e 94 ca 05 	call	0xb94	; 0xb94 <ConvertTimerValueToDutyCycle>
     c82:	68 2f       	mov	r22, r24
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	8d e7       	ldi	r24, 0x7D	; 125
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Change>
     c8e:	37 c0       	rjmp	.+110    	; 0xcfe <__vector_11+0x118>
		}
	}
	else{//RHS MOTION
		if((count <= noOfWaves) && (!isDead)){
     c90:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <count>
     c94:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     c98:	89 17       	cp	r24, r25
     c9a:	78 f0       	brcs	.+30     	; 0xcba <__vector_11+0xd4>
     c9c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <isDead>
     ca0:	81 11       	cpse	r24, r1
     ca2:	0b c0       	rjmp	.+22     	; 0xcba <__vector_11+0xd4>
			pumpingIsOccurring = true;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <pumpingIsOccurring>
			PORTD |= (1<< PD6); //NMOS and PMOS on
     caa:	5e 9a       	sbi	0x0b, 6	; 11
			PORTB |= (1<<PB1);
     cac:	29 9a       	sbi	0x05, 1	; 5
			count++;
     cae:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <count>
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <count>
     cb8:	22 c0       	rjmp	.+68     	; 0xcfe <__vector_11+0x118>
		}
		else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
     cba:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <count>
     cbe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
     cc2:	89 17       	cp	r24, r25
     cc4:	90 f4       	brcc	.+36     	; 0xcea <__vector_11+0x104>
			pumpingIsOccurring = false;
     cc6:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <pumpingIsOccurring>
			PORTD &= ~(1<< PD6);
     cca:	5e 98       	cbi	0x0b, 6	; 11
			PORTB &= ~(1<<PB1);
     ccc:	29 98       	cbi	0x05, 1	; 5
			PWM_Change(CalculateDeadTime(),65535); //apply deadzone
     cce:	0e 94 df 05 	call	0xbbe	; 0xbbe <CalculateDeadTime>
     cd2:	6f ef       	ldi	r22, 0xFF	; 255
     cd4:	7f ef       	ldi	r23, 0xFF	; 255
     cd6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Change>
			isLHS = true;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <isLHS>
			count = 0;
     ce0:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <count>
			isDead = true; //deadzone begins
     ce4:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <isDead>
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <__vector_11+0x118>
		}
		else{	//end of deadzone, set the pwm frequency back to normal
			isDead = false;
     cea:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <isDead>
			PWM_Change(125,ConvertTimerValueToDutyCycle());
     cee:	0e 94 ca 05 	call	0xb94	; 0xb94 <ConvertTimerValueToDutyCycle>
     cf2:	68 2f       	mov	r22, r24
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	8d e7       	ldi	r24, 0x7D	; 125
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Change>
		}
		
	}
}
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <ASCIIConversion>:
}

uint8_t ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
     d20:	80 5d       	subi	r24, 0xD0	; 208
     d22:	08 95       	ret

00000d24 <main>:

int main(void)
{	
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	c6 5e       	subi	r28, 0xE6	; 230
     d2e:	d1 40       	sbci	r29, 0x01	; 1
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
	stdout= &mystdout;//printf
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	90 93 e4 08 	sts	0x08E4, r25	; 0x8008e4 <__iob+0x3>
     d42:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <__iob+0x2>

    sei();
     d46:	78 94       	sei
	UART_Init(UBRR_VALUE);
     d48:	83 e3       	ldi	r24, 0x33	; 51
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Init>
	ADC_Init();
     d50:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
     d54:	0e 94 ce 00 	call	0x19c	; 0x19c <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
     d58:	84 b1       	in	r24, 0x04	; 4
     d5a:	86 60       	ori	r24, 0x06	; 6
     d5c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
     d5e:	8a b1       	in	r24, 0x0a	; 10
     d60:	80 66       	ori	r24, 0x60	; 96
     d62:	8a b9       	out	0x0a, r24	; 10
	uint8_t voltageRMSArrayIndex = 0;
	uint16_t voltageRMSFinal = 0;
	uint32_t currentRMSFinal = 0;
	uint16_t currentRMSAggregate = 0;
     d64:	d1 2c       	mov	r13, r1
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
	DDRD |= (1<<PD5)|(1<<PD6);
	uint8_t voltageRMSArrayIndex = 0;
	uint16_t voltageRMSFinal = 0;
     d66:	21 2c       	mov	r2, r1
     d68:	31 2c       	mov	r3, r1
	PWM_Init();
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
	DDRD |= (1<<PD5)|(1<<PD6);
	uint8_t voltageRMSArrayIndex = 0;
     d6a:	f1 2c       	mov	r15, r1
		voltageLHSIndex = 0;
		uint32_t rmsVoltage = 0;
		uint32_t currentSum = 0;
		uint32_t rmsCurrent = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};
     d6c:	ce 01       	movw	r24, r28
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	cf 51       	subi	r28, 0x1F	; 31
     d72:	de 4f       	sbci	r29, 0xFE	; 254
     d74:	99 83       	std	Y+1, r25	; 0x01
     d76:	88 83       	st	Y, r24
     d78:	c1 5e       	subi	r28, 0xE1	; 225
     d7a:	d1 40       	sbci	r29, 0x01	; 1
     d7c:	fe 01       	movw	r30, r28
     d7e:	e3 52       	subi	r30, 0x23	; 35
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	cd 51       	subi	r28, 0x1D	; 29
     d84:	de 4f       	sbci	r29, 0xFE	; 254
     d86:	f9 83       	std	Y+1, r31	; 0x01
     d88:	e8 83       	st	Y, r30
     d8a:	c3 5e       	subi	r28, 0xE3	; 227
     d8c:	d1 40       	sbci	r29, 0x01	; 1
int concatenate(int a, int b, int c){
	return ((a-48)*100 + (b-48)*10 + (c-48));
}

bool checkForError(unsigned char a, unsigned char b){
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
     d8e:	1f 2d       	mov	r17, r15
     d90:	9d 2c       	mov	r9, r13

    while (1) 
    {	
		
		/********Declare Local Variables**********/
		voltageLHSIndex = 0;
     d92:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <voltageLHSIndex>
		uint32_t rmsVoltage = 0;
		uint32_t currentSum = 0;
		uint32_t rmsCurrent = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};
     d96:	cf 51       	subi	r28, 0x1F	; 31
     d98:	de 4f       	sbci	r29, 0xFE	; 254
     d9a:	e8 81       	ld	r30, Y
     d9c:	f9 81       	ldd	r31, Y+1	; 0x01
     d9e:	c1 5e       	subi	r28, 0xE1	; 225
     da0:	d1 40       	sbci	r29, 0x01	; 1
     da2:	80 ee       	ldi	r24, 0xE0	; 224
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	11 92       	st	Z+, r1
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	e9 f7       	brne	.-6      	; 0xda6 <main+0x82>

		/****************Voltage and Current****************/
		//get voltage and current values
		//if(pumpingIsOccurring){
			while(voltageLHSIndex < NUMBER_OF_SAMPLES){
     dac:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <voltageLHSIndex>
     db0:	88 37       	cpi	r24, 0x78	; 120
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <main+0x92>
     db4:	a6 c1       	rjmp	.+844    	; 0x1102 <main+0x3de>
     db6:	f1 2e       	mov	r15, r17
				voltageLHS[voltageLHSIndex] = ADC_LHSVoltage();
     db8:	00 91 2b 01 	lds	r16, 0x012B	; 0x80012b <voltageLHSIndex>
     dbc:	10 e0       	ldi	r17, 0x00	; 0
     dbe:	0e 94 95 00 	call	0x12a	; 0x12a <ADC_LHSVoltage>
     dc2:	00 0f       	add	r16, r16
     dc4:	11 1f       	adc	r17, r17
     dc6:	00 0f       	add	r16, r16
     dc8:	11 1f       	adc	r17, r17
     dca:	f8 01       	movw	r30, r16
     dcc:	e2 5c       	subi	r30, 0xC2	; 194
     dce:	fc 4f       	sbci	r31, 0xFC	; 252
     dd0:	60 83       	st	Z, r22
     dd2:	71 83       	std	Z+1, r23	; 0x01
     dd4:	82 83       	std	Z+2, r24	; 0x02
     dd6:	93 83       	std	Z+3, r25	; 0x03
				voltageRHS[voltageLHSIndex] = ADC_RHSVoltage();
     dd8:	00 91 2b 01 	lds	r16, 0x012B	; 0x80012b <voltageLHSIndex>
     ddc:	10 e0       	ldi	r17, 0x00	; 0
     dde:	0e 94 b0 00 	call	0x160	; 0x160 <ADC_RHSVoltage>
     de2:	00 0f       	add	r16, r16
     de4:	11 1f       	adc	r17, r17
     de6:	00 0f       	add	r16, r16
     de8:	11 1f       	adc	r17, r17
     dea:	f8 01       	movw	r30, r16
     dec:	e2 5a       	subi	r30, 0xA2	; 162
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	60 83       	st	Z, r22
     df2:	71 83       	std	Z+1, r23	; 0x01
     df4:	82 83       	std	Z+2, r24	; 0x02
     df6:	93 83       	std	Z+3, r25	; 0x03
				//current[voltageLHSIndex] = ADC_Current();
				voltageLHSIndex++;
     df8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <voltageLHSIndex>
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <voltageLHSIndex>
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};

		/****************Voltage and Current****************/
		//get voltage and current values
		//if(pumpingIsOccurring){
			while(voltageLHSIndex < NUMBER_OF_SAMPLES){
     e02:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <voltageLHSIndex>
     e06:	88 37       	cpi	r24, 0x78	; 120
     e08:	b8 f2       	brcs	.-82     	; 0xdb8 <main+0x94>
     e0a:	1f 2d       	mov	r17, r15
     e0c:	7a c1       	rjmp	.+756    	; 0x1102 <main+0x3de>
			}
		//}
				
		////get voltage across the coil
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){
			if(lowPowerMode){
     e0e:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <lowPowerMode>
     e12:	22 23       	and	r18, r18
     e14:	a1 f0       	breq	.+40     	; 0xe3e <main+0x11a>
				voltageAcrossTheCoil[i] = voltageRHS[i];
     e16:	9c 01       	movw	r18, r24
     e18:	22 0f       	add	r18, r18
     e1a:	33 1f       	adc	r19, r19
     e1c:	22 0f       	add	r18, r18
     e1e:	33 1f       	adc	r19, r19
     e20:	f9 01       	movw	r30, r18
     e22:	e2 5a       	subi	r30, 0xA2	; 162
     e24:	fe 4f       	sbci	r31, 0xFE	; 254
     e26:	c0 80       	ld	r12, Z
     e28:	d1 80       	ldd	r13, Z+1	; 0x01
     e2a:	e2 80       	ldd	r14, Z+2	; 0x02
     e2c:	f3 80       	ldd	r15, Z+3	; 0x03
     e2e:	f9 01       	movw	r30, r18
     e30:	e0 50       	subi	r30, 0x00	; 0
     e32:	f9 4f       	sbci	r31, 0xF9	; 249
     e34:	c0 82       	st	Z, r12
     e36:	d1 82       	std	Z+1, r13	; 0x01
     e38:	e2 82       	std	Z+2, r14	; 0x02
     e3a:	f3 82       	std	Z+3, r15	; 0x03
     e3c:	55 c0       	rjmp	.+170    	; 0xee8 <main+0x1c4>
			}else{
				if(voltageLHS[i]>voltageRHS[i]){
     e3e:	9c 01       	movw	r18, r24
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	f9 01       	movw	r30, r18
     e4a:	e2 5c       	subi	r30, 0xC2	; 194
     e4c:	fc 4f       	sbci	r31, 0xFC	; 252
     e4e:	c0 80       	ld	r12, Z
     e50:	d1 80       	ldd	r13, Z+1	; 0x01
     e52:	e2 80       	ldd	r14, Z+2	; 0x02
     e54:	f3 80       	ldd	r15, Z+3	; 0x03
     e56:	f9 01       	movw	r30, r18
     e58:	e2 5a       	subi	r30, 0xA2	; 162
     e5a:	fe 4f       	sbci	r31, 0xFE	; 254
     e5c:	00 81       	ld	r16, Z
     e5e:	11 81       	ldd	r17, Z+1	; 0x01
     e60:	22 81       	ldd	r18, Z+2	; 0x02
     e62:	33 81       	ldd	r19, Z+3	; 0x03
     e64:	0c 15       	cp	r16, r12
     e66:	1d 05       	cpc	r17, r13
     e68:	2e 05       	cpc	r18, r14
     e6a:	3f 05       	cpc	r19, r15
     e6c:	f8 f4       	brcc	.+62     	; 0xeac <main+0x188>
					voltageAcrossTheCoil[i] = voltageLHS[i]-voltageRHS[i];
     e6e:	9c 01       	movw	r18, r24
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	f9 01       	movw	r30, r18
     e7a:	e2 5c       	subi	r30, 0xC2	; 194
     e7c:	fc 4f       	sbci	r31, 0xFC	; 252
     e7e:	c0 80       	ld	r12, Z
     e80:	d1 80       	ldd	r13, Z+1	; 0x01
     e82:	e2 80       	ldd	r14, Z+2	; 0x02
     e84:	f3 80       	ldd	r15, Z+3	; 0x03
     e86:	f9 01       	movw	r30, r18
     e88:	e2 5a       	subi	r30, 0xA2	; 162
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	40 80       	ld	r4, Z
     e8e:	51 80       	ldd	r5, Z+1	; 0x01
     e90:	62 80       	ldd	r6, Z+2	; 0x02
     e92:	73 80       	ldd	r7, Z+3	; 0x03
     e94:	c4 18       	sub	r12, r4
     e96:	d5 08       	sbc	r13, r5
     e98:	e6 08       	sbc	r14, r6
     e9a:	f7 08       	sbc	r15, r7
     e9c:	f9 01       	movw	r30, r18
     e9e:	e0 50       	subi	r30, 0x00	; 0
     ea0:	f9 4f       	sbci	r31, 0xF9	; 249
     ea2:	c0 82       	st	Z, r12
     ea4:	d1 82       	std	Z+1, r13	; 0x01
     ea6:	e2 82       	std	Z+2, r14	; 0x02
     ea8:	f3 82       	std	Z+3, r15	; 0x03
     eaa:	1e c0       	rjmp	.+60     	; 0xee8 <main+0x1c4>
					}else{
					voltageAcrossTheCoil[i] = voltageRHS[i]-voltageLHS[i];
     eac:	9c 01       	movw	r18, r24
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	f9 01       	movw	r30, r18
     eb8:	e2 5a       	subi	r30, 0xA2	; 162
     eba:	fe 4f       	sbci	r31, 0xFE	; 254
     ebc:	c0 80       	ld	r12, Z
     ebe:	d1 80       	ldd	r13, Z+1	; 0x01
     ec0:	e2 80       	ldd	r14, Z+2	; 0x02
     ec2:	f3 80       	ldd	r15, Z+3	; 0x03
     ec4:	f9 01       	movw	r30, r18
     ec6:	e2 5c       	subi	r30, 0xC2	; 194
     ec8:	fc 4f       	sbci	r31, 0xFC	; 252
     eca:	40 80       	ld	r4, Z
     ecc:	51 80       	ldd	r5, Z+1	; 0x01
     ece:	62 80       	ldd	r6, Z+2	; 0x02
     ed0:	73 80       	ldd	r7, Z+3	; 0x03
     ed2:	c4 18       	sub	r12, r4
     ed4:	d5 08       	sbc	r13, r5
     ed6:	e6 08       	sbc	r14, r6
     ed8:	f7 08       	sbc	r15, r7
     eda:	f9 01       	movw	r30, r18
     edc:	e0 50       	subi	r30, 0x00	; 0
     ede:	f9 4f       	sbci	r31, 0xF9	; 249
     ee0:	c0 82       	st	Z, r12
     ee2:	d1 82       	std	Z+1, r13	; 0x01
     ee4:	e2 82       	std	Z+2, r14	; 0x02
     ee6:	f3 82       	std	Z+3, r15	; 0x03
				}
			}
					
			//voltageSum += voltageAcrossTheCoil[i]*voltageAcrossTheCoil[i];
			voltageSum += voltageAcrossTheCoil[i];
     ee8:	fc 01       	movw	r30, r24
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	e0 50       	subi	r30, 0x00	; 0
     ef4:	f9 4f       	sbci	r31, 0xF9	; 249
     ef6:	00 81       	ld	r16, Z
     ef8:	11 81       	ldd	r17, Z+1	; 0x01
     efa:	22 81       	ldd	r18, Z+2	; 0x02
     efc:	33 81       	ldd	r19, Z+3	; 0x03
     efe:	40 0f       	add	r20, r16
     f00:	51 1f       	adc	r21, r17
     f02:	62 1f       	adc	r22, r18
     f04:	73 1f       	adc	r23, r19
				voltageLHSIndex++;
			}
		//}
				
		////get voltage across the coil
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	88 37       	cpi	r24, 0x78	; 120
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <main+0x1ec>
     f0e:	7f cf       	rjmp	.-258    	; 0xe0e <main+0xea>
     f10:	1a 2f       	mov	r17, r26
			voltageSum += voltageAcrossTheCoil[i];
			
		}
				
		//calculate rms voltage and current
		rmsVoltage = voltageSum / NUMBER_OF_SAMPLES;
     f12:	cb 01       	movw	r24, r22
     f14:	ba 01       	movw	r22, r20
     f16:	28 e7       	ldi	r18, 0x78	; 120
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
		//rmsVoltage = sqrt(rmsVoltage);
	

				
		
		voltageRMSArray[voltageRMSArrayIndex] = rmsVoltage;
     f22:	e1 2f       	mov	r30, r17
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	e2 5e       	subi	r30, 0xE2	; 226
     f30:	fa 4f       	sbci	r31, 0xFA	; 250
     f32:	20 83       	st	Z, r18
     f34:	31 83       	std	Z+1, r19	; 0x01
     f36:	42 83       	std	Z+2, r20	; 0x02
     f38:	53 83       	std	Z+3, r21	; 0x03
		voltageRMSArrayIndex++;
     f3a:	1f 5f       	subi	r17, 0xFF	; 255
				
				
		if(voltageRMSArrayIndex==NUMBER_OF_SAMPLES){
     f3c:	18 37       	cpi	r17, 0x78	; 120
     f3e:	71 f5       	brne	.+92     	; 0xf9c <main+0x278>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
			for(int k = 0;k < NUMBER_OF_SAMPLES;k++){
				voltageRMSFinal += voltageRMSArray[k];
     f44:	fc 01       	movw	r30, r24
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	e2 5e       	subi	r30, 0xE2	; 226
     f50:	fa 4f       	sbci	r31, 0xFA	; 250
     f52:	40 81       	ld	r20, Z
     f54:	51 81       	ldd	r21, Z+1	; 0x01
     f56:	62 81       	ldd	r22, Z+2	; 0x02
     f58:	73 81       	ldd	r23, Z+3	; 0x03
     f5a:	24 0e       	add	r2, r20
     f5c:	35 1e       	adc	r3, r21
		voltageRMSArray[voltageRMSArrayIndex] = rmsVoltage;
		voltageRMSArrayIndex++;
				
				
		if(voltageRMSArrayIndex==NUMBER_OF_SAMPLES){
			for(int k = 0;k < NUMBER_OF_SAMPLES;k++){
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	88 37       	cpi	r24, 0x78	; 120
     f62:	91 05       	cpc	r25, r1
     f64:	79 f7       	brne	.-34     	; 0xf44 <main+0x220>
				voltageRMSFinal += voltageRMSArray[k];
				
			}
			voltageRMSFinal /= NUMBER_OF_SAMPLES;
     f66:	91 01       	movw	r18, r2
     f68:	a9 e8       	ldi	r26, 0x89	; 137
     f6a:	b8 e8       	ldi	r27, 0x88	; 136
     f6c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__umulhisi3>
     f70:	1c 01       	movw	r2, r24
     f72:	00 24       	eor	r0, r0
     f74:	22 0c       	add	r2, r2
     f76:	33 1c       	adc	r3, r3
     f78:	00 1c       	adc	r0, r0
     f7a:	22 0c       	add	r2, r2
     f7c:	33 1c       	adc	r3, r3
     f7e:	00 1c       	adc	r0, r0
     f80:	23 2c       	mov	r2, r3
     f82:	30 2c       	mov	r3, r0
			currentRMSAggregate = (voltageRMSFinal*100)/415;
     f84:	e4 e6       	ldi	r30, 0x64	; 100
     f86:	e2 9d       	mul	r30, r2
     f88:	c0 01       	movw	r24, r0
     f8a:	e3 9d       	mul	r30, r3
     f8c:	90 0d       	add	r25, r0
     f8e:	11 24       	eor	r1, r1
     f90:	6f e9       	ldi	r22, 0x9F	; 159
     f92:	71 e0       	ldi	r23, 0x01	; 1
     f94:	0e 94 98 08 	call	0x1130	; 0x1130 <__udivmodhi4>
     f98:	96 2e       	mov	r9, r22
			voltageRMSArrayIndex = 0;
     f9a:	10 e0       	ldi	r17, 0x00	; 0
     f9c:	ce 01       	movw	r24, r28
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	5c 01       	movw	r10, r24
     fa2:	6c 01       	movw	r12, r24
		}
				
		/*******************Power*******************/
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
     fa4:	e1 2c       	mov	r14, r1
     fa6:	f1 2c       	mov	r15, r1
			powerArray[j] = (voltageAcrossTheCoil[j] *voltageAcrossTheCoil[j])/415;
     fa8:	f7 01       	movw	r30, r14
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	e0 50       	subi	r30, 0x00	; 0
     fb4:	f9 4f       	sbci	r31, 0xF9	; 249
     fb6:	20 81       	ld	r18, Z
     fb8:	31 81       	ldd	r19, Z+1	; 0x01
     fba:	42 81       	ldd	r20, Z+2	; 0x02
     fbc:	53 81       	ldd	r21, Z+3	; 0x03
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	0e 94 88 08 	call	0x1110	; 0x1110 <__mulsi3>
     fca:	2f e9       	ldi	r18, 0x9F	; 159
     fcc:	31 e0       	ldi	r19, 0x01	; 1
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
     fd6:	f6 01       	movw	r30, r12
     fd8:	21 93       	st	Z+, r18
     fda:	31 93       	st	Z+, r19
     fdc:	41 93       	st	Z+, r20
     fde:	51 93       	st	Z+, r21
     fe0:	6f 01       	movw	r12, r30
			currentRMSAggregate = (voltageRMSFinal*100)/415;
			voltageRMSArrayIndex = 0;
		}
				
		/*******************Power*******************/
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
     fe2:	ff ef       	ldi	r31, 0xFF	; 255
     fe4:	ef 1a       	sub	r14, r31
     fe6:	ff 0a       	sbc	r15, r31
     fe8:	28 e7       	ldi	r18, 0x78	; 120
     fea:	e2 16       	cp	r14, r18
     fec:	f1 04       	cpc	r15, r1
     fee:	e1 f6       	brne	.-72     	; 0xfa8 <main+0x284>
     ff0:	c1 2c       	mov	r12, r1
     ff2:	d1 2c       	mov	r13, r1
     ff4:	76 01       	movw	r14, r12
			powerArray[j] = (voltageAcrossTheCoil[j] *voltageAcrossTheCoil[j])/415;
		}
		uint32_t powerTotal = 0;
		for (int i = 0; i < NUMBER_OF_SAMPLES-1; i++) {
			powerTotal += (powerArray[i] + powerArray[i+1])/2;	//trapezoidal approx
     ff6:	f5 01       	movw	r30, r10
     ff8:	41 91       	ld	r20, Z+
     ffa:	51 91       	ld	r21, Z+
     ffc:	61 91       	ld	r22, Z+
     ffe:	71 91       	ld	r23, Z+
    1000:	5f 01       	movw	r10, r30
    1002:	80 81       	ld	r24, Z
    1004:	91 81       	ldd	r25, Z+1	; 0x01
    1006:	a2 81       	ldd	r26, Z+2	; 0x02
    1008:	b3 81       	ldd	r27, Z+3	; 0x03
    100a:	84 0f       	add	r24, r20
    100c:	95 1f       	adc	r25, r21
    100e:	a6 1f       	adc	r26, r22
    1010:	b7 1f       	adc	r27, r23
    1012:	b6 95       	lsr	r27
    1014:	a7 95       	ror	r26
    1016:	97 95       	ror	r25
    1018:	87 95       	ror	r24
    101a:	c8 0e       	add	r12, r24
    101c:	d9 1e       	adc	r13, r25
    101e:	ea 1e       	adc	r14, r26
    1020:	fb 1e       	adc	r15, r27
		/*******************Power*******************/
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
			powerArray[j] = (voltageAcrossTheCoil[j] *voltageAcrossTheCoil[j])/415;
		}
		uint32_t powerTotal = 0;
		for (int i = 0; i < NUMBER_OF_SAMPLES-1; i++) {
    1022:	cd 51       	subi	r28, 0x1D	; 29
    1024:	de 4f       	sbci	r29, 0xFE	; 254
    1026:	88 81       	ld	r24, Y
    1028:	99 81       	ldd	r25, Y+1	; 0x01
    102a:	c3 5e       	subi	r28, 0xE3	; 227
    102c:	d1 40       	sbci	r29, 0x01	; 1
    102e:	8e 17       	cp	r24, r30
    1030:	9f 07       	cpc	r25, r31
    1032:	09 f7       	brne	.-62     	; 0xff6 <main+0x2d2>
			powerTotal += (powerArray[i] + powerArray[i+1])/2;	//trapezoidal approx
		}
				
		rmsPower = powerTotal / (NUMBER_OF_SAMPLES-1);
		//receive message code
		if(finished){
    1034:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <finished>
    1038:	88 23       	and	r24, r24
    103a:	09 f4       	brne	.+2      	; 0x103e <main+0x31a>
    103c:	5f c0       	rjmp	.+190    	; 0x10fc <main+0x3d8>
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
    103e:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <pumpingEffortArray+0x2>
    1042:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <pumpingEffortArray+0x1>
    1046:	ec e2       	ldi	r30, 0x2C	; 44
    1048:	f1 e0       	ldi	r31, 0x01	; 1
    104a:	80 81       	ld	r24, Z
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 1c 05 	call	0xa38	; 0xa38 <concatenate>
    1056:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <pumpingEffort>
				
			for(int i = 0; i < 38; i++){
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
				pumpingEffortArray[i] = 0;
    105e:	fc 01       	movw	r30, r24
    1060:	e4 5d       	subi	r30, 0xD4	; 212
    1062:	fe 4f       	sbci	r31, 0xFE	; 254
    1064:	10 82       	st	Z, r1
		rmsPower = powerTotal / (NUMBER_OF_SAMPLES-1);
		//receive message code
		if(finished){
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	86 32       	cpi	r24, 0x26	; 38
    106a:	91 05       	cpc	r25, r1
    106c:	c1 f7       	brne	.-16     	; 0x105e <main+0x33a>
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
    106e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
    1072:	e6 e1       	ldi	r30, 0x16	; 22
    1074:	f1 e0       	ldi	r31, 0x01	; 1
    1076:	80 81       	ld	r24, Z
int concatenate(int a, int b, int c){
	return ((a-48)*100 + (b-48)*10 + (c-48));
}

bool checkForError(unsigned char a, unsigned char b){
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
    1078:	85 36       	cpi	r24, 0x65	; 101
    107a:	29 f4       	brne	.+10     	; 0x1086 <main+0x362>
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	97 37       	cpi	r25, 0x77	; 119
    1080:	19 f0       	breq	.+6      	; 0x1088 <main+0x364>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <main+0x364>
		return true;
	}else{
		return false;
    1086:	80 e0       	ldi	r24, 0x00	; 0
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
    1088:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <clearErrorFlag>
			if(clearErrorFlag){
    108c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <clearErrorFlag>
    1090:	88 23       	and	r24, r24
    1092:	21 f0       	breq	.+8      	; 0x109c <main+0x378>
				cmprCollide = false;
    1094:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cmprCollide>
				cmprJammed = false;;
    1098:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cmprJammed>
			}
			UART_SendJson(rmsPower,frequency,voltageRMSFinal,currentRMSAggregate,cmprJammed,cmprCollide, pumpingEffort,pumpingEffort);
    109c:	80 90 5b 01 	lds	r8, 0x015B	; 0x80015b <pumpingEffort>
    10a0:	a0 90 5b 01 	lds	r10, 0x015B	; 0x80015b <pumpingEffort>
    10a4:	b0 90 0e 01 	lds	r11, 0x010E	; 0x80010e <cmprCollide>
    10a8:	00 91 0f 01 	lds	r16, 0x010F	; 0x80010f <cmprJammed>
    10ac:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <frequency>
    10b0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <frequency+0x1>
    10b4:	cb 51       	subi	r28, 0x1B	; 27
    10b6:	de 4f       	sbci	r29, 0xFE	; 254
    10b8:	99 83       	std	Y+1, r25	; 0x01
    10ba:	88 83       	st	Y, r24
    10bc:	c5 5e       	subi	r28, 0xE5	; 229
    10be:	d1 40       	sbci	r29, 0x01	; 1
    10c0:	21 01       	movw	r4, r2
    10c2:	61 2c       	mov	r6, r1
    10c4:	71 2c       	mov	r7, r1
    10c6:	c7 01       	movw	r24, r14
    10c8:	b6 01       	movw	r22, r12
    10ca:	27 e7       	ldi	r18, 0x77	; 119
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
    10d6:	82 2f       	mov	r24, r18
    10d8:	cb 2c       	mov	r12, r11
    10da:	e0 2e       	mov	r14, r16
    10dc:	09 2d       	mov	r16, r9
    10de:	a3 01       	movw	r20, r6
    10e0:	92 01       	movw	r18, r4
    10e2:	cb 51       	subi	r28, 0x1B	; 27
    10e4:	de 4f       	sbci	r29, 0xFE	; 254
    10e6:	68 81       	ld	r22, Y
    10e8:	c5 5e       	subi	r28, 0xE5	; 229
    10ea:	d1 40       	sbci	r29, 0x01	; 1
    10ec:	0e 94 dd 04 	call	0x9ba	; 0x9ba <UART_SendJson>
			finished = false;
    10f0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <finished>
			rx_count = 0;
    10f4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_count+0x1>
    10f8:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_count>
		}
	
		//change the pumping effort
		UART_InterpretPumpingEffort();
    10fc:	0e 94 01 01 	call	0x202	; 0x202 <UART_InterpretPumpingEffort>
			
    }
    1100:	48 ce       	rjmp	.-880    	; 0xd92 <main+0x6e>
	PWM_Init();
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
	DDRD |= (1<<PD5)|(1<<PD6);
	uint8_t voltageRMSArrayIndex = 0;
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	ba 01       	movw	r22, r20
    110c:	a1 2f       	mov	r26, r17
    110e:	7f ce       	rjmp	.-770    	; 0xe0e <main+0xea>

00001110 <__mulsi3>:
    1110:	db 01       	movw	r26, r22
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__muluhisi3>
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	a2 9f       	mul	r26, r18
    1120:	80 0d       	add	r24, r0
    1122:	91 1d       	adc	r25, r1
    1124:	a3 9f       	mul	r26, r19
    1126:	90 0d       	add	r25, r0
    1128:	b2 9f       	mul	r27, r18
    112a:	90 0d       	add	r25, r0
    112c:	11 24       	eor	r1, r1
    112e:	08 95       	ret

00001130 <__udivmodhi4>:
    1130:	aa 1b       	sub	r26, r26
    1132:	bb 1b       	sub	r27, r27
    1134:	51 e1       	ldi	r21, 0x11	; 17
    1136:	07 c0       	rjmp	.+14     	; 0x1146 <__udivmodhi4_ep>

00001138 <__udivmodhi4_loop>:
    1138:	aa 1f       	adc	r26, r26
    113a:	bb 1f       	adc	r27, r27
    113c:	a6 17       	cp	r26, r22
    113e:	b7 07       	cpc	r27, r23
    1140:	10 f0       	brcs	.+4      	; 0x1146 <__udivmodhi4_ep>
    1142:	a6 1b       	sub	r26, r22
    1144:	b7 0b       	sbc	r27, r23

00001146 <__udivmodhi4_ep>:
    1146:	88 1f       	adc	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	5a 95       	dec	r21
    114c:	a9 f7       	brne	.-22     	; 0x1138 <__udivmodhi4_loop>
    114e:	80 95       	com	r24
    1150:	90 95       	com	r25
    1152:	bc 01       	movw	r22, r24
    1154:	cd 01       	movw	r24, r26
    1156:	08 95       	ret

00001158 <__divmodhi4>:
    1158:	97 fb       	bst	r25, 7
    115a:	07 2e       	mov	r0, r23
    115c:	16 f4       	brtc	.+4      	; 0x1162 <__divmodhi4+0xa>
    115e:	00 94       	com	r0
    1160:	07 d0       	rcall	.+14     	; 0x1170 <__divmodhi4_neg1>
    1162:	77 fd       	sbrc	r23, 7
    1164:	09 d0       	rcall	.+18     	; 0x1178 <__divmodhi4_neg2>
    1166:	0e 94 98 08 	call	0x1130	; 0x1130 <__udivmodhi4>
    116a:	07 fc       	sbrc	r0, 7
    116c:	05 d0       	rcall	.+10     	; 0x1178 <__divmodhi4_neg2>
    116e:	3e f4       	brtc	.+14     	; 0x117e <__divmodhi4_exit>

00001170 <__divmodhi4_neg1>:
    1170:	90 95       	com	r25
    1172:	81 95       	neg	r24
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	08 95       	ret

00001178 <__divmodhi4_neg2>:
    1178:	70 95       	com	r23
    117a:	61 95       	neg	r22
    117c:	7f 4f       	sbci	r23, 0xFF	; 255

0000117e <__divmodhi4_exit>:
    117e:	08 95       	ret

00001180 <__udivmodsi4>:
    1180:	a1 e2       	ldi	r26, 0x21	; 33
    1182:	1a 2e       	mov	r1, r26
    1184:	aa 1b       	sub	r26, r26
    1186:	bb 1b       	sub	r27, r27
    1188:	fd 01       	movw	r30, r26
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <__udivmodsi4_ep>

0000118c <__udivmodsi4_loop>:
    118c:	aa 1f       	adc	r26, r26
    118e:	bb 1f       	adc	r27, r27
    1190:	ee 1f       	adc	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	a2 17       	cp	r26, r18
    1196:	b3 07       	cpc	r27, r19
    1198:	e4 07       	cpc	r30, r20
    119a:	f5 07       	cpc	r31, r21
    119c:	20 f0       	brcs	.+8      	; 0x11a6 <__udivmodsi4_ep>
    119e:	a2 1b       	sub	r26, r18
    11a0:	b3 0b       	sbc	r27, r19
    11a2:	e4 0b       	sbc	r30, r20
    11a4:	f5 0b       	sbc	r31, r21

000011a6 <__udivmodsi4_ep>:
    11a6:	66 1f       	adc	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	1a 94       	dec	r1
    11b0:	69 f7       	brne	.-38     	; 0x118c <__udivmodsi4_loop>
    11b2:	60 95       	com	r22
    11b4:	70 95       	com	r23
    11b6:	80 95       	com	r24
    11b8:	90 95       	com	r25
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	bd 01       	movw	r22, r26
    11c0:	cf 01       	movw	r24, r30
    11c2:	08 95       	ret

000011c4 <__umulhisi3>:
    11c4:	a2 9f       	mul	r26, r18
    11c6:	b0 01       	movw	r22, r0
    11c8:	b3 9f       	mul	r27, r19
    11ca:	c0 01       	movw	r24, r0
    11cc:	a3 9f       	mul	r26, r19
    11ce:	70 0d       	add	r23, r0
    11d0:	81 1d       	adc	r24, r1
    11d2:	11 24       	eor	r1, r1
    11d4:	91 1d       	adc	r25, r1
    11d6:	b2 9f       	mul	r27, r18
    11d8:	70 0d       	add	r23, r0
    11da:	81 1d       	adc	r24, r1
    11dc:	11 24       	eor	r1, r1
    11de:	91 1d       	adc	r25, r1
    11e0:	08 95       	ret

000011e2 <__muluhisi3>:
    11e2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__umulhisi3>
    11e6:	a5 9f       	mul	r26, r21
    11e8:	90 0d       	add	r25, r0
    11ea:	b4 9f       	mul	r27, r20
    11ec:	90 0d       	add	r25, r0
    11ee:	a4 9f       	mul	r26, r20
    11f0:	80 0d       	add	r24, r0
    11f2:	91 1d       	adc	r25, r1
    11f4:	11 24       	eor	r1, r1
    11f6:	08 95       	ret

000011f8 <_exit>:
    11f8:	f8 94       	cli

000011fa <__stop_program>:
    11fa:	ff cf       	rjmp	.-2      	; 0x11fa <__stop_program>
