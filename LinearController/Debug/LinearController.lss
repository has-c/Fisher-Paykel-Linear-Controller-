
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000e98  00000f2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000190  00800118  00800118  00000f44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002558  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b65  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001035  00000000  00000000  000041b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000051f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000958  00000000  00000000  00005580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc3  00000000  00000000  00005ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_11>
  30:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3a       	cpi	r26, 0xA8	; 168
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <main>
  9e:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	85 68       	ori	r24, 0x85	; 133
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <PWM_Init>:
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8b 60       	ori	r24, 0x0B	; 11
  ca:	80 83       	st	Z, r24
  cc:	ef e6       	ldi	r30, 0x6F	; 111
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <PWM_Change>:
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  e4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  e8:	08 95       	ret

000000ea <UART_Init>:
	}else{ //255 lose your mind
		//change duty cycle and pwm to max out the motors
		lowPowerMode = false;
		dutyCycle = 99;
	}
	changePumpingEffort	 = false;
  ea:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  f2:	e1 ec       	ldi	r30, 0xC1	; 193
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 e9       	ldi	r24, 0x90	; 144
  f8:	80 83       	st	Z, r24
  fa:	80 81       	ld	r24, Z
  fc:	88 64       	ori	r24, 0x48	; 72
  fe:	80 83       	st	Z, r24
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 106:	08 95       	ret

00000108 <UART_Transmit>:
 108:	e1 ec       	ldi	r30, 0xC1	; 193
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	9f 7e       	andi	r25, 0xEF	; 239
 110:	90 83       	st	Z, r25
 112:	90 81       	ld	r25, Z
 114:	9f 77       	andi	r25, 0x7F	; 127
 116:	90 83       	st	Z, r25
 118:	e0 ec       	ldi	r30, 0xC0	; 192
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	90 81       	ld	r25, Z
 11e:	99 23       	and	r25, r25
 120:	e9 f3       	breq	.-6      	; 0x11c <UART_Transmit+0x14>
 122:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 126:	08 95       	ret

00000128 <MFCmodulator>:
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);

}


void MFCmodulator(uint8_t requiredValue, uint8_t currentValue){
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	18 2f       	mov	r17, r24
 138:	d6 2f       	mov	r29, r22
	//temp conversion variables. Used to split 3 digit numbers as only one digit can be sent at a time
	uint8_t firstDigit = 0;
	uint8_t secondDigit = 0;
	uint8_t thirdDigit = 0;
	
	UART_Transmit(13); //carriage return
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(123); //{
 140:	8b e7       	ldi	r24, 0x7B	; 123
 142:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //line feed 
 146:	8a e0       	ldi	r24, 0x0A	; 10
 148:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
 14c:	8d e0       	ldi	r24, 0x0D	; 13
 14e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//LCC Identifier 
	UART_Transmit(34); //"
 152:	82 e2       	ldi	r24, 0x22	; 34
 154:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(51);//3
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 15e:	82 e2       	ldi	r24, 0x22	; 34
 160:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
 164:	8a e3       	ldi	r24, 0x3A	; 58
 166:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>

	//MFC 
	UART_Transmit(10); //Line feed
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(123); //{
 176:	8b e7       	ldi	r24, 0x7B	; 123
 178:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //Line feed
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
 182:	8d e0       	ldi	r24, 0x0D	; 13
 184:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	
	//MFC letter setup
	UART_Transmit(34); //'
 188:	82 e2       	ldi	r24, 0x22	; 34
 18a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(109);//m
 18e:	8d e6       	ldi	r24, 0x6D	; 109
 190:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(102);//f
 194:	86 e6       	ldi	r24, 0x66	; 102
 196:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(99);//c
 19a:	83 e6       	ldi	r24, 0x63	; 99
 19c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 1a0:	82 e2       	ldi	r24, 0x22	; 34
 1a2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
 1a6:	8a e3       	ldi	r24, 0x3A	; 58
 1a8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	 

	//MFC Values 
	UART_Transmit(123); //{
 1ac:	8b e7       	ldi	r24, 0x7B	; 123
 1ae:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
 1b2:	82 e2       	ldi	r24, 0x22	; 34
 1b4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
 1b8:	82 e7       	ldi	r24, 0x72	; 114
 1ba:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(101);//e
 1be:	85 e6       	ldi	r24, 0x65	; 101
 1c0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(113);//q
 1c4:	81 e7       	ldi	r24, 0x71	; 113
 1c6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 1ca:	82 e2       	ldi	r24, 0x22	; 34
 1cc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
 1d0:	8a e3       	ldi	r24, 0x3A	; 58
 1d2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 1d6:	82 e2       	ldi	r24, 0x22	; 34
 1d8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//required value transmission
	firstDigit = requiredValue/100;
 1dc:	c9 e2       	ldi	r28, 0x29	; 41
 1de:	1c 9f       	mul	r17, r28
 1e0:	21 2d       	mov	r18, r1
 1e2:	11 24       	eor	r1, r1
 1e4:	22 95       	swap	r18
 1e6:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (requiredValue-(firstDigit*100))/10;
 1e8:	0c e9       	ldi	r16, 0x9C	; 156
 1ea:	02 03       	mulsu	r16, r18
 1ec:	c0 01       	movw	r24, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	81 0f       	add	r24, r17
 1f2:	91 1d       	adc	r25, r1
 1f4:	0f 2e       	mov	r0, r31
 1f6:	fa e0       	ldi	r31, 0x0A	; 10
 1f8:	ef 2e       	mov	r14, r31
 1fa:	f1 2c       	mov	r15, r1
 1fc:	f0 2d       	mov	r31, r0
 1fe:	b7 01       	movw	r22, r14
 200:	0e 94 05 07 	call	0xe0a	; 0xe0a <__divmodhi4>
 204:	d6 2e       	mov	r13, r22
	thirdDigit = requiredValue - (firstDigit*100) - (secondDigit*10);
 206:	20 9f       	mul	r18, r16
 208:	10 0d       	add	r17, r0
 20a:	11 24       	eor	r1, r1
 20c:	96 2f       	mov	r25, r22
 20e:	99 0f       	add	r25, r25
 210:	89 2f       	mov	r24, r25
 212:	88 0f       	add	r24, r24
 214:	88 0f       	add	r24, r24
 216:	89 0f       	add	r24, r25
 218:	18 1b       	sub	r17, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 21a:	82 2f       	mov	r24, r18
 21c:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 220:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit)); 
 224:	8d 2d       	mov	r24, r13
 226:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 22a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 22e:	81 2f       	mov	r24, r17
 230:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 234:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 238:	82 e2       	ldi	r24, 0x22	; 34
 23a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44);//,
 23e:	8c e2       	ldi	r24, 0x2C	; 44
 240:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	

	UART_Transmit(34);//"
 244:	82 e2       	ldi	r24, 0x22	; 34
 246:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(99);//c
 24a:	83 e6       	ldi	r24, 0x63	; 99
 24c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(117);//u
 250:	85 e7       	ldi	r24, 0x75	; 117
 252:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
 256:	82 e7       	ldi	r24, 0x72	; 114
 258:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 25c:	82 e2       	ldi	r24, 0x22	; 34
 25e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
 262:	8a e3       	ldi	r24, 0x3A	; 58
 264:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 268:	82 e2       	ldi	r24, 0x22	; 34
 26a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	//current value transmission
	firstDigit = currentValue/100;
 26e:	dc 9f       	mul	r29, r28
 270:	21 2d       	mov	r18, r1
 272:	11 24       	eor	r1, r1
 274:	22 95       	swap	r18
 276:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (currentValue-(firstDigit*100))/10;
 278:	02 03       	mulsu	r16, r18
 27a:	c0 01       	movw	r24, r0
 27c:	11 24       	eor	r1, r1
 27e:	8d 0f       	add	r24, r29
 280:	91 1d       	adc	r25, r1
 282:	b7 01       	movw	r22, r14
 284:	0e 94 05 07 	call	0xe0a	; 0xe0a <__divmodhi4>
 288:	c6 2f       	mov	r28, r22
	thirdDigit = currentValue - (firstDigit*100) - (secondDigit*10);
 28a:	20 9f       	mul	r18, r16
 28c:	d0 0d       	add	r29, r0
 28e:	11 24       	eor	r1, r1
 290:	96 2f       	mov	r25, r22
 292:	99 0f       	add	r25, r25
 294:	89 2f       	mov	r24, r25
 296:	88 0f       	add	r24, r24
 298:	88 0f       	add	r24, r24
 29a:	89 0f       	add	r24, r25
 29c:	d8 1b       	sub	r29, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 29e:	82 2f       	mov	r24, r18
 2a0:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 2a4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 2a8:	8c 2f       	mov	r24, r28
 2aa:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 2ae:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 2b2:	8d 2f       	mov	r24, r29
 2b4:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 2b8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	UART_Transmit(34);//"
 2bc:	82 e2       	ldi	r24, 0x22	; 34
 2be:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(125);//}
 2c2:	8d e7       	ldi	r24, 0x7D	; 125
 2c4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44);//,
 2c8:	8c e2       	ldi	r24, 0x2C	; 44
 2ca:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //Line feed
 2ce:	8a e0       	ldi	r24, 0x0A	; 10
 2d0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
 2d4:	8d e0       	ldi	r24, 0x0D	; 13
 2d6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	 
	
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	08 95       	ret

000002ea <VERmodulator>:

void VERmodulator(){
	UART_Transmit(34); //"
 2ea:	82 e2       	ldi	r24, 0x22	; 34
 2ec:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(118);//v
 2f0:	86 e7       	ldi	r24, 0x76	; 118
 2f2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(101);//e
 2f6:	85 e6       	ldi	r24, 0x65	; 101
 2f8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
 2fc:	82 e7       	ldi	r24, 0x72	; 114
 2fe:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 302:	82 e2       	ldi	r24, 0x22	; 34
 304:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
 308:	8a e3       	ldi	r24, 0x3A	; 58
 30a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 30e:	82 e2       	ldi	r24, 0x22	; 34
 310:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(49); //1
 314:	81 e3       	ldi	r24, 0x31	; 49
 316:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(46);//.
 31a:	8e e2       	ldi	r24, 0x2E	; 46
 31c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(50);//2
 320:	82 e3       	ldi	r24, 0x32	; 50
 322:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(46);//.
 326:	8e e2       	ldi	r24, 0x2E	; 46
 328:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(51);//3
 32c:	83 e3       	ldi	r24, 0x33	; 51
 32e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 332:	82 e2       	ldi	r24, 0x22	; 34
 334:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44); //,
 338:	8c e2       	ldi	r24, 0x2C	; 44
 33a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //Line feed 
 33e:	8a e0       	ldi	r24, 0x0A	; 10
 340:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
 344:	8d e0       	ldi	r24, 0x0D	; 13
 346:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
 34a:	08 95       	ret

0000034c <PARAMmodulator>:
	 
}

void PARAMmodulator(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current){
 34c:	8f 92       	push	r8
 34e:	9f 92       	push	r9
 350:	af 92       	push	r10
 352:	bf 92       	push	r11
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	d8 2f       	mov	r29, r24
 366:	96 2e       	mov	r9, r22
 368:	69 01       	movw	r12, r18
 36a:	7a 01       	movw	r14, r20
	uint8_t firstDigit; 
	uint8_t secondDigit;
	uint8_t thirdDigit;
	uint8_t fourthDigit;
	UART_Transmit(34);//"
 36c:	82 e2       	ldi	r24, 0x22	; 34
 36e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(112);//p
 372:	80 e7       	ldi	r24, 0x70	; 112
 374:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(97);//a
 378:	81 e6       	ldi	r24, 0x61	; 97
 37a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
 37e:	82 e7       	ldi	r24, 0x72	; 114
 380:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(97);//a
 384:	81 e6       	ldi	r24, 0x61	; 97
 386:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(109);//m
 38a:	8d e6       	ldi	r24, 0x6D	; 109
 38c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 390:	82 e2       	ldi	r24, 0x22	; 34
 392:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
 396:	8a e3       	ldi	r24, 0x3A	; 58
 398:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(123);//{
 39c:	8b e7       	ldi	r24, 0x7B	; 123
 39e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//parameters
	
	UART_Transmit(34); //"
 3a2:	82 e2       	ldi	r24, 0x22	; 34
 3a4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(112); //p
 3a8:	80 e7       	ldi	r24, 0x70	; 112
 3aa:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(119); //w
 3ae:	87 e7       	ldi	r24, 0x77	; 119
 3b0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r 
 3b4:	82 e7       	ldi	r24, 0x72	; 114
 3b6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
 3ba:	82 e2       	ldi	r24, 0x22	; 34
 3bc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58); //:
 3c0:	8a e3       	ldi	r24, 0x3A	; 58
 3c2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 3c6:	82 e2       	ldi	r24, 0x22	; 34
 3c8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//power parameters 
	firstDigit = averagePower/100;
 3cc:	c9 e2       	ldi	r28, 0x29	; 41
 3ce:	dc 9f       	mul	r29, r28
 3d0:	21 2d       	mov	r18, r1
 3d2:	11 24       	eor	r1, r1
 3d4:	22 95       	swap	r18
 3d6:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (averagePower-(firstDigit*100))/10;
 3d8:	1c e9       	ldi	r17, 0x9C	; 156
 3da:	12 03       	mulsu	r17, r18
 3dc:	c0 01       	movw	r24, r0
 3de:	11 24       	eor	r1, r1
 3e0:	8d 0f       	add	r24, r29
 3e2:	91 1d       	adc	r25, r1
 3e4:	0f 2e       	mov	r0, r31
 3e6:	fa e0       	ldi	r31, 0x0A	; 10
 3e8:	af 2e       	mov	r10, r31
 3ea:	b1 2c       	mov	r11, r1
 3ec:	f0 2d       	mov	r31, r0
 3ee:	b5 01       	movw	r22, r10
 3f0:	0e 94 05 07 	call	0xe0a	; 0xe0a <__divmodhi4>
 3f4:	86 2e       	mov	r8, r22
	thirdDigit = averagePower - (firstDigit*100) - (secondDigit*10);
 3f6:	21 9f       	mul	r18, r17
 3f8:	d0 0d       	add	r29, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	96 2f       	mov	r25, r22
 3fe:	99 0f       	add	r25, r25
 400:	89 2f       	mov	r24, r25
 402:	88 0f       	add	r24, r24
 404:	88 0f       	add	r24, r24
 406:	89 0f       	add	r24, r25
 408:	d8 1b       	sub	r29, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 40a:	82 2f       	mov	r24, r18
 40c:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 410:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 414:	88 2d       	mov	r24, r8
 416:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 41a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(46); //decimal point
 41e:	8e e2       	ldi	r24, 0x2E	; 46
 420:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 424:	8d 2f       	mov	r24, r29
 426:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 42a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(87); //W
 42e:	87 e5       	ldi	r24, 0x57	; 87
 430:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
 434:	82 e2       	ldi	r24, 0x22	; 34
 436:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44); //,
 43a:	8c e2       	ldi	r24, 0x2C	; 44
 43c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	 
	 
	
	//frequency
	UART_Transmit(34); //"
 440:	82 e2       	ldi	r24, 0x22	; 34
 442:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(102);//f
 446:	86 e6       	ldi	r24, 0x66	; 102
 448:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
 44c:	82 e7       	ldi	r24, 0x72	; 114
 44e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(101);//e
 452:	85 e6       	ldi	r24, 0x65	; 101
 454:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(113);//q
 458:	81 e7       	ldi	r24, 0x71	; 113
 45a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 45e:	82 e2       	ldi	r24, 0x22	; 34
 460:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58);//:
 464:	8a e3       	ldi	r24, 0x3A	; 58
 466:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 46a:	82 e2       	ldi	r24, 0x22	; 34
 46c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	firstDigit = operatingFrequency/10;
 470:	8d ec       	ldi	r24, 0xCD	; 205
 472:	98 9e       	mul	r9, r24
 474:	81 2d       	mov	r24, r1
 476:	11 24       	eor	r1, r1
 478:	86 95       	lsr	r24
 47a:	86 95       	lsr	r24
 47c:	86 95       	lsr	r24
	secondDigit = operatingFrequency-(firstDigit*10);
 47e:	28 2f       	mov	r18, r24
 480:	22 0f       	add	r18, r18
 482:	92 2f       	mov	r25, r18
 484:	99 0f       	add	r25, r25
 486:	99 0f       	add	r25, r25
 488:	92 0f       	add	r25, r18
 48a:	99 1a       	sub	r9, r25
	UART_Transmit(ASCIIConversion(firstDigit));
 48c:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 490:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 494:	89 2d       	mov	r24, r9
 496:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 49a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(72); //H
 49e:	88 e4       	ldi	r24, 0x48	; 72
 4a0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(122);//z
 4a4:	8a e7       	ldi	r24, 0x7A	; 122
 4a6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 4aa:	82 e2       	ldi	r24, 0x22	; 34
 4ac:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44);//,
 4b0:	8c e2       	ldi	r24, 0x2C	; 44
 4b2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//current 

	UART_Transmit(34); //"
 4b6:	82 e2       	ldi	r24, 0x22	; 34
 4b8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(99); //c
 4bc:	83 e6       	ldi	r24, 0x63	; 99
 4be:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(117); //u
 4c2:	85 e7       	ldi	r24, 0x75	; 117
 4c4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
 4c8:	82 e7       	ldi	r24, 0x72	; 114
 4ca:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(114);//r
 4ce:	82 e7       	ldi	r24, 0x72	; 114
 4d0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
 4d4:	82 e2       	ldi	r24, 0x22	; 34
 4d6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58); //:
 4da:	8a e3       	ldi	r24, 0x3A	; 58
 4dc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34);//"
 4e0:	82 e2       	ldi	r24, 0x22	; 34
 4e2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	firstDigit = current/100;
 4e6:	0c 9f       	mul	r16, r28
 4e8:	21 2d       	mov	r18, r1
 4ea:	11 24       	eor	r1, r1
 4ec:	22 95       	swap	r18
 4ee:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (current-(firstDigit*100))/10;
 4f0:	12 03       	mulsu	r17, r18
 4f2:	c0 01       	movw	r24, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	80 0f       	add	r24, r16
 4f8:	91 1d       	adc	r25, r1
 4fa:	b5 01       	movw	r22, r10
 4fc:	0e 94 05 07 	call	0xe0a	; 0xe0a <__divmodhi4>
 500:	c6 2f       	mov	r28, r22
	thirdDigit = current - (firstDigit*100) - (secondDigit*10);
 502:	21 9f       	mul	r18, r17
 504:	00 0d       	add	r16, r0
 506:	11 24       	eor	r1, r1
 508:	96 2f       	mov	r25, r22
 50a:	99 0f       	add	r25, r25
 50c:	89 2f       	mov	r24, r25
 50e:	88 0f       	add	r24, r24
 510:	88 0f       	add	r24, r24
 512:	89 0f       	add	r24, r25
 514:	08 1b       	sub	r16, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 516:	82 2f       	mov	r24, r18
 518:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 51c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 520:	8c 2f       	mov	r24, r28
 522:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 526:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 52a:	80 2f       	mov	r24, r16
 52c:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 530:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(109); //m
 534:	8d e6       	ldi	r24, 0x6D	; 109
 536:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(65); //A
 53a:	81 e4       	ldi	r24, 0x41	; 65
 53c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
 540:	82 e2       	ldi	r24, 0x22	; 34
 542:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44); //,
 546:	8c e2       	ldi	r24, 0x2C	; 44
 548:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	//applied voltage
	 
	UART_Transmit(34); //"
 54c:	82 e2       	ldi	r24, 0x22	; 34
 54e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(118); //v
 552:	86 e7       	ldi	r24, 0x76	; 118
 554:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(111); //o
 558:	8f e6       	ldi	r24, 0x6F	; 111
 55a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(108); //l
 55e:	8c e6       	ldi	r24, 0x6C	; 108
 560:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(116); //t
 564:	84 e7       	ldi	r24, 0x74	; 116
 566:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
 56a:	82 e2       	ldi	r24, 0x22	; 34
 56c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(58); //:
 570:	8a e3       	ldi	r24, 0x3A	; 58
 572:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
 576:	82 e2       	ldi	r24, 0x22	; 34
 578:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	firstDigit = appliedVoltage/1000;
 57c:	c7 01       	movw	r24, r14
 57e:	b6 01       	movw	r22, r12
 580:	28 ee       	ldi	r18, 0xE8	; 232
 582:	33 e0       	ldi	r19, 0x03	; 3
 584:	40 e0       	ldi	r20, 0x00	; 0
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	0e 94 19 07 	call	0xe32	; 0xe32 <__udivmodsi4>
 58c:	d2 2f       	mov	r29, r18
	secondDigit = (appliedVoltage-(firstDigit*1000))/100;
 58e:	28 ee       	ldi	r18, 0xE8	; 232
 590:	33 e0       	ldi	r19, 0x03	; 3
 592:	d2 9f       	mul	r29, r18
 594:	c0 01       	movw	r24, r0
 596:	d3 9f       	mul	r29, r19
 598:	90 0d       	add	r25, r0
 59a:	11 24       	eor	r1, r1
 59c:	09 2e       	mov	r0, r25
 59e:	00 0c       	add	r0, r0
 5a0:	aa 0b       	sbc	r26, r26
 5a2:	bb 0b       	sbc	r27, r27
 5a4:	46 01       	movw	r8, r12
 5a6:	57 01       	movw	r10, r14
 5a8:	88 1a       	sub	r8, r24
 5aa:	99 0a       	sbc	r9, r25
 5ac:	aa 0a       	sbc	r10, r26
 5ae:	bb 0a       	sbc	r11, r27
 5b0:	c5 01       	movw	r24, r10
 5b2:	b4 01       	movw	r22, r8
 5b4:	24 e6       	ldi	r18, 0x64	; 100
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	0e 94 19 07 	call	0xe32	; 0xe32 <__udivmodsi4>
 5c0:	c2 2f       	mov	r28, r18
	thirdDigit = (appliedVoltage - (firstDigit*1000) - (secondDigit*100))/10;
 5c2:	14 e6       	ldi	r17, 0x64	; 100
 5c4:	12 9f       	mul	r17, r18
 5c6:	c0 01       	movw	r24, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	09 2e       	mov	r0, r25
 5cc:	00 0c       	add	r0, r0
 5ce:	aa 0b       	sbc	r26, r26
 5d0:	bb 0b       	sbc	r27, r27
 5d2:	a5 01       	movw	r20, r10
 5d4:	94 01       	movw	r18, r8
 5d6:	28 1b       	sub	r18, r24
 5d8:	39 0b       	sbc	r19, r25
 5da:	4a 0b       	sbc	r20, r26
 5dc:	5b 0b       	sbc	r21, r27
 5de:	ca 01       	movw	r24, r20
 5e0:	b9 01       	movw	r22, r18
 5e2:	2a e0       	ldi	r18, 0x0A	; 10
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	0e 94 19 07 	call	0xe32	; 0xe32 <__udivmodsi4>
 5ee:	02 2f       	mov	r16, r18
	fourthDigit = appliedVoltage -(firstDigit*1000) - (secondDigit*100) - (thirdDigit*10);
 5f0:	38 e1       	ldi	r19, 0x18	; 24
 5f2:	d3 9f       	mul	r29, r19
 5f4:	c0 0c       	add	r12, r0
 5f6:	11 24       	eor	r1, r1
 5f8:	1c 9f       	mul	r17, r28
 5fa:	c0 18       	sub	r12, r0
 5fc:	11 24       	eor	r1, r1
 5fe:	90 2f       	mov	r25, r16
 600:	99 0f       	add	r25, r25
 602:	89 2f       	mov	r24, r25
 604:	88 0f       	add	r24, r24
 606:	88 0f       	add	r24, r24
 608:	89 0f       	add	r24, r25
 60a:	c8 1a       	sub	r12, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 60c:	8d 2f       	mov	r24, r29
 60e:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 612:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 616:	8c 2f       	mov	r24, r28
 618:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 61c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(46); //decimal point
 620:	8e e2       	ldi	r24, 0x2E	; 46
 622:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 626:	80 2f       	mov	r24, r16
 628:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 62c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(ASCIIConversion(fourthDigit));
 630:	8c 2d       	mov	r24, r12
 632:	0e 94 b4 05 	call	0xb68	; 0xb68 <ASCIIConversion>
 636:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(86); //V
 63a:	86 e5       	ldi	r24, 0x56	; 86
 63c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(34); //"
 640:	82 e2       	ldi	r24, 0x22	; 34
 642:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	
	 
	UART_Transmit(125); //}
 646:	8d e7       	ldi	r24, 0x7D	; 125
 648:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(44);//,
 64c:	8c e2       	ldi	r24, 0x2C	; 44
 64e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //line feed
 652:	8a e0       	ldi	r24, 0x0A	; 10
 654:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
 658:	8d e0       	ldi	r24, 0x0D	; 13
 65a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	 
}
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	ff 90       	pop	r15
 668:	ef 90       	pop	r14
 66a:	df 90       	pop	r13
 66c:	cf 90       	pop	r12
 66e:	bf 90       	pop	r11
 670:	af 90       	pop	r10
 672:	9f 90       	pop	r9
 674:	8f 90       	pop	r8
 676:	08 95       	ret

00000678 <ERRORmodulator>:

void ERRORmodulator(bool jamErrorFlag, bool collisionErrorFlag){  
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	d8 2f       	mov	r29, r24
 67e:	c6 2f       	mov	r28, r22
	//error clear tells us whether we need to clear the error array
	if(clearErrorFlag){
 680:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <clearErrorFlag>
 684:	88 23       	and	r24, r24
 686:	51 f1       	breq	.+84     	; 0x6dc <ERRORmodulator+0x64>
		UART_Transmit(34); //"
 688:	82 e2       	ldi	r24, 0x22	; 34
 68a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(99); //c
 68e:	83 e6       	ldi	r24, 0x63	; 99
 690:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(108); //l
 694:	8c e6       	ldi	r24, 0x6C	; 108
 696:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(114); //r
 69a:	82 e7       	ldi	r24, 0x72	; 114
 69c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(34); //"
 6a0:	82 e2       	ldi	r24, 0x22	; 34
 6a2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(58); //:
 6a6:	8a e3       	ldi	r24, 0x3A	; 58
 6a8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(34); //"
 6ac:	82 e2       	ldi	r24, 0x22	; 34
 6ae:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(101); //e
 6b2:	85 e6       	ldi	r24, 0x65	; 101
 6b4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(119); //w
 6b8:	87 e7       	ldi	r24, 0x77	; 119
 6ba:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(34); //"
 6be:	82 e2       	ldi	r24, 0x22	; 34
 6c0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(44); //,
 6c4:	8c e2       	ldi	r24, 0x2C	; 44
 6c6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(10); //line feed
 6ca:	8a e0       	ldi	r24, 0x0A	; 10
 6cc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(13); //carriage return
 6d0:	8d e0       	ldi	r24, 0x0D	; 13
 6d2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		clearErrorFlag = false;
 6d6:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <clearErrorFlag>
 6da:	36 c0       	rjmp	.+108    	; 0x748 <ERRORmodulator+0xd0>
	}else{
		UART_Transmit(10); //line feed
 6dc:	8a e0       	ldi	r24, 0x0A	; 10
 6de:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		UART_Transmit(13); //carriage return
 6e2:	8d e0       	ldi	r24, 0x0D	; 13
 6e4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
		
		if(collisionErrorFlag || jamErrorFlag) {
 6e8:	c1 11       	cpse	r28, r1
 6ea:	7c c0       	rjmp	.+248    	; 0x7e4 <ERRORmodulator+0x16c>
 6ec:	d1 11       	cpse	r29, r1
 6ee:	45 c0       	rjmp	.+138    	; 0x77a <ERRORmodulator+0x102>
 6f0:	25 c0       	rjmp	.+74     	; 0x73c <ERRORmodulator+0xc4>
					UART_Transmit(44); //,
				}
			}

			if(collisionErrorFlag){ //compressor colliding
				UART_Transmit(34); //"
 6f2:	82 e2       	ldi	r24, 0x22	; 34
 6f4:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(99); //c
 6f8:	83 e6       	ldi	r24, 0x63	; 99
 6fa:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(111); //o
 6fe:	8f e6       	ldi	r24, 0x6F	; 111
 700:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(108); //l
 704:	8c e6       	ldi	r24, 0x6C	; 108
 706:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(108); //l
 70a:	8c e6       	ldi	r24, 0x6C	; 108
 70c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(105); //i
 710:	89 e6       	ldi	r24, 0x69	; 105
 712:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(115); //s
 716:	83 e7       	ldi	r24, 0x73	; 115
 718:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(105); //i
 71c:	89 e6       	ldi	r24, 0x69	; 105
 71e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(111); //o
 722:	8f e6       	ldi	r24, 0x6F	; 111
 724:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(110); //n
 728:	8e e6       	ldi	r24, 0x6E	; 110
 72a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(34); //"
 72e:	82 e2       	ldi	r24, 0x22	; 34
 730:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			}
			
			
			UART_Transmit(93); //[
 734:	8d e5       	ldi	r24, 0x5D	; 93
 736:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
 73a:	06 c0       	rjmp	.+12     	; 0x748 <ERRORmodulator+0xd0>
			
			}else{ //no errors present
			UART_Transmit(10); //line feed
 73c:	8a e0       	ldi	r24, 0x0A	; 10
 73e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(13); //carriage return
 742:	8d e0       	ldi	r24, 0x0D	; 13
 744:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	}
	
	
	//print final curly brackets
	
	UART_Transmit(10); //line feed
 748:	8a e0       	ldi	r24, 0x0A	; 10
 74a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
 74e:	8d e0       	ldi	r24, 0x0D	; 13
 750:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(125); // }
 754:	8d e7       	ldi	r24, 0x7D	; 125
 756:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //line feed
 75a:	8a e0       	ldi	r24, 0x0A	; 10
 75c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
 760:	8d e0       	ldi	r24, 0x0D	; 13
 762:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(125); // }
 766:	8d e7       	ldi	r24, 0x7D	; 125
 768:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(10); //line feed
 76c:	8a e0       	ldi	r24, 0x0A	; 10
 76e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
	UART_Transmit(13); //carriage return
 772:	8d e0       	ldi	r24, 0x0D	; 13
 774:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>


 778:	4b c0       	rjmp	.+150    	; 0x810 <ERRORmodulator+0x198>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
 77a:	82 e2       	ldi	r24, 0x22	; 34
 77c:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(101); //e
 780:	85 e6       	ldi	r24, 0x65	; 101
 782:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(119); //w
 786:	87 e7       	ldi	r24, 0x77	; 119
 788:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(34); // "
 78c:	82 e2       	ldi	r24, 0x22	; 34
 78e:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(58); //:
 792:	8a e3       	ldi	r24, 0x3A	; 58
 794:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(91); //[
 798:	8b e5       	ldi	r24, 0x5B	; 91
 79a:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
 79e:	82 e2       	ldi	r24, 0x22	; 34
 7a0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(106); //j
 7a4:	8a e6       	ldi	r24, 0x6A	; 106
 7a6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(97); //a
 7aa:	81 e6       	ldi	r24, 0x61	; 97
 7ac:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(109); //m
 7b0:	8d e6       	ldi	r24, 0x6D	; 109
 7b2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(34); //"
 7b6:	82 e2       	ldi	r24, 0x22	; 34
 7b8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
 7bc:	bb cf       	rjmp	.-138    	; 0x734 <ERRORmodulator+0xbc>
			UART_Transmit(58); //:
			UART_Transmit(91); //[
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
 7be:	82 e2       	ldi	r24, 0x22	; 34
 7c0:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(106); //j
 7c4:	8a e6       	ldi	r24, 0x6A	; 106
 7c6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(97); //a
 7ca:	81 e6       	ldi	r24, 0x61	; 97
 7cc:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(109); //m
 7d0:	8d e6       	ldi	r24, 0x6D	; 109
 7d2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				UART_Transmit(34); //"
 7d6:	82 e2       	ldi	r24, 0x22	; 34
 7d8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
				if(jamErrorFlag && collisionErrorFlag){
					UART_Transmit(44); //,
 7dc:	8c e2       	ldi	r24, 0x2C	; 44
 7de:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
 7e2:	87 cf       	rjmp	.-242    	; 0x6f2 <ERRORmodulator+0x7a>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
 7e4:	82 e2       	ldi	r24, 0x22	; 34
 7e6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(101); //e
 7ea:	85 e6       	ldi	r24, 0x65	; 101
 7ec:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(119); //w
 7f0:	87 e7       	ldi	r24, 0x77	; 119
 7f2:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(34); // "
 7f6:	82 e2       	ldi	r24, 0x22	; 34
 7f8:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(58); //:
 7fc:	8a e3       	ldi	r24, 0x3A	; 58
 7fe:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			UART_Transmit(91); //[
 802:	8b e5       	ldi	r24, 0x5B	; 91
 804:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
 808:	dd 23       	and	r29, r29
 80a:	09 f4       	brne	.+2      	; 0x80e <ERRORmodulator+0x196>
 80c:	72 cf       	rjmp	.-284    	; 0x6f2 <ERRORmodulator+0x7a>
 80e:	d7 cf       	rjmp	.-82     	; 0x7be <ERRORmodulator+0x146>
	UART_Transmit(125); // }
	UART_Transmit(10); //line feed
	UART_Transmit(13); //carriage return


 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	08 95       	ret

00000816 <UART_SendJson>:
	}
	changePumpingEffort	 = false;
}


void UART_SendJson(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current,bool jamErrorFlag, bool collisionErrorFlag, uint8_t requiredValue, uint8_t currentValue){
 816:	4f 92       	push	r4
 818:	5f 92       	push	r5
 81a:	6f 92       	push	r6
 81c:	7f 92       	push	r7
 81e:	8f 92       	push	r8
 820:	af 92       	push	r10
 822:	cf 92       	push	r12
 824:	ef 92       	push	r14
 826:	ff 92       	push	r15
 828:	0f 93       	push	r16
 82a:	1f 93       	push	r17
 82c:	cf 93       	push	r28
 82e:	df 93       	push	r29
 830:	cd b7       	in	r28, 0x3d	; 61
 832:	de b7       	in	r29, 0x3e	; 62
 834:	18 2f       	mov	r17, r24
 836:	f6 2e       	mov	r15, r22
 838:	29 01       	movw	r4, r18
 83a:	3a 01       	movw	r6, r20
 83c:	8a 2d       	mov	r24, r10
 83e:	68 2d       	mov	r22, r8
	MFCmodulator(requiredValue,currentValue);
 840:	0e 94 94 00 	call	0x128	; 0x128 <MFCmodulator>
	VERmodulator();
 844:	0e 94 75 01 	call	0x2ea	; 0x2ea <VERmodulator>
	PARAMmodulator(averagePower,operatingFrequency,appliedVoltage,current);
 848:	a3 01       	movw	r20, r6
 84a:	92 01       	movw	r18, r4
 84c:	6f 2d       	mov	r22, r15
 84e:	81 2f       	mov	r24, r17
 850:	0e 94 a6 01 	call	0x34c	; 0x34c <PARAMmodulator>
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);
 854:	6c 2d       	mov	r22, r12
 856:	8e 2d       	mov	r24, r14
 858:	0e 94 3c 03 	call	0x678	; 0x678 <ERRORmodulator>

}
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	1f 91       	pop	r17
 862:	0f 91       	pop	r16
 864:	ff 90       	pop	r15
 866:	ef 90       	pop	r14
 868:	cf 90       	pop	r12
 86a:	af 90       	pop	r10
 86c:	8f 90       	pop	r8
 86e:	7f 90       	pop	r7
 870:	6f 90       	pop	r6
 872:	5f 90       	pop	r5
 874:	4f 90       	pop	r4
 876:	08 95       	ret

00000878 <usart_putchar_printf>:
	}
}

void safetyShutdown(){
	if(cmprJammed){
		pumpingEffort = 0; //stop the coil if an error has occurred
 878:	cf 93       	push	r28
 87a:	c8 2f       	mov	r28, r24
 87c:	8a 30       	cpi	r24, 0x0A	; 10
 87e:	19 f4       	brne	.+6      	; 0x886 <usart_putchar_printf+0xe>
 880:	8d e0       	ldi	r24, 0x0D	; 13
 882:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
 886:	8c 2f       	mov	r24, r28
 888:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	cf 91       	pop	r28
 892:	08 95       	ret

00000894 <concatenate>:
 894:	c0 97       	sbiw	r24, 0x30	; 48
 896:	e4 e6       	ldi	r30, 0x64	; 100
 898:	e8 9f       	mul	r30, r24
 89a:	90 01       	movw	r18, r0
 89c:	e9 9f       	mul	r30, r25
 89e:	30 0d       	add	r19, r0
 8a0:	11 24       	eor	r1, r1
 8a2:	60 53       	subi	r22, 0x30	; 48
 8a4:	71 09       	sbc	r23, r1
 8a6:	cb 01       	movw	r24, r22
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	66 0f       	add	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	66 0f       	add	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	68 0f       	add	r22, r24
 8ba:	79 1f       	adc	r23, r25
 8bc:	62 0f       	add	r22, r18
 8be:	73 1f       	adc	r23, r19
 8c0:	ca 01       	movw	r24, r20
 8c2:	c0 97       	sbiw	r24, 0x30	; 48
 8c4:	86 0f       	add	r24, r22
 8c6:	97 1f       	adc	r25, r23
 8c8:	08 95       	ret

000008ca <__vector_18>:
 8ca:	1f 92       	push	r1
 8cc:	0f 92       	push	r0
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	0f 92       	push	r0
 8d2:	11 24       	eor	r1, r1
 8d4:	8f 93       	push	r24
 8d6:	9f 93       	push	r25
 8d8:	ef 93       	push	r30
 8da:	ff 93       	push	r31
 8dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 8e0:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <received>
 8e4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_count>
 8e8:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <rx_count+0x1>
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <rx_count+0x1>
 8f2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <rx_count>
 8f6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_count>
 8fa:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <rx_count+0x1>
 8fe:	45 97       	sbiw	r24, 0x15	; 21
 900:	4c f0       	brlt	.+18     	; 0x914 <__stack+0x15>
 902:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <rx_count>
 906:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <rx_count+0x1>
 90a:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <received>
 90e:	e3 5e       	subi	r30, 0xE3	; 227
 910:	fe 4f       	sbci	r31, 0xFE	; 254
 912:	80 83       	st	Z, r24
 914:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_count>
 918:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <rx_count+0x1>
 91c:	82 97       	sbiw	r24, 0x22	; 34
 91e:	4c f0       	brlt	.+18     	; 0x932 <__stack+0x33>
 920:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <rx_count>
 924:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <rx_count+0x1>
 928:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <received>
 92c:	ea 50       	subi	r30, 0x0A	; 10
 92e:	ff 4f       	sbci	r31, 0xFF	; 255
 930:	80 83       	st	Z, r24
 932:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_count>
 936:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <rx_count+0x1>
 93a:	86 97       	sbiw	r24, 0x26	; 38
 93c:	7c f0       	brlt	.+30     	; 0x95c <__stack+0x5d>
 93e:	e1 ec       	ldi	r30, 0xC1	; 193
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	8f 77       	andi	r24, 0x7F	; 127
 946:	80 83       	st	Z, r24
 948:	80 81       	ld	r24, Z
 94a:	8f 7e       	andi	r24, 0xEF	; 239
 94c:	80 83       	st	Z, r24
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <finished>
 954:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_count+0x1>
 958:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <rx_count>
 95c:	ff 91       	pop	r31
 95e:	ef 91       	pop	r30
 960:	9f 91       	pop	r25
 962:	8f 91       	pop	r24
 964:	0f 90       	pop	r0
 966:	0f be       	out	0x3f, r0	; 63
 968:	0f 90       	pop	r0
 96a:	1f 90       	pop	r1
 96c:	18 95       	reti

0000096e <__vector_20>:
 96e:	1f 92       	push	r1
 970:	0f 92       	push	r0
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	0f 92       	push	r0
 976:	11 24       	eor	r1, r1
 978:	8f 93       	push	r24
 97a:	ef 93       	push	r30
 97c:	ff 93       	push	r31
 97e:	e1 ec       	ldi	r30, 0xC1	; 193
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	80 61       	ori	r24, 0x10	; 16
 986:	80 83       	st	Z, r24
 988:	80 81       	ld	r24, Z
 98a:	80 68       	ori	r24, 0x80	; 128
 98c:	80 83       	st	Z, r24
 98e:	ff 91       	pop	r31
 990:	ef 91       	pop	r30
 992:	8f 91       	pop	r24
 994:	0f 90       	pop	r0
 996:	0f be       	out	0x3f, r0	; 63
 998:	0f 90       	pop	r0
 99a:	1f 90       	pop	r1
 99c:	18 95       	reti

0000099e <__vector_12>:
 99e:	1f 92       	push	r1
 9a0:	0f 92       	push	r0
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	0f 92       	push	r0
 9a6:	11 24       	eor	r1, r1
 9a8:	8f 93       	push	r24
 9aa:	9f 93       	push	r25
 9ac:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <isLHS>
 9b0:	81 11       	cpse	r24, r1
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__vector_12+0x1e>
 9b4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <lowPowerMode>
 9b8:	88 23       	and	r24, r24
 9ba:	51 f0       	breq	.+20     	; 0x9d0 <__vector_12+0x32>
 9bc:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <isDead>
 9c0:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
 9c4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 9c8:	89 17       	cp	r24, r25
 9ca:	58 f0       	brcs	.+22     	; 0x9e2 <__vector_12+0x44>
 9cc:	2a 98       	cbi	0x05, 2	; 5
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <__vector_12+0x44>
 9d0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <isDead>
 9d4:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
 9d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 9dc:	89 17       	cp	r24, r25
 9de:	08 f0       	brcs	.+2      	; 0x9e2 <__vector_12+0x44>
 9e0:	29 98       	cbi	0x05, 1	; 5
 9e2:	9f 91       	pop	r25
 9e4:	8f 91       	pop	r24
 9e6:	0f 90       	pop	r0
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	0f 90       	pop	r0
 9ec:	1f 90       	pop	r1
 9ee:	18 95       	reti

000009f0 <ConvertTimerValueToDutyCycle>:
	}
}

uint8_t ConvertTimerValueToDutyCycle(){
	return ((dutyCycle*125)/100);
 9f0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dutyCycle>
 9f4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <dutyCycle+0x1>
 9f8:	4d e7       	ldi	r20, 0x7D	; 125
 9fa:	48 9f       	mul	r20, r24
 9fc:	90 01       	movw	r18, r0
 9fe:	49 9f       	mul	r20, r25
 a00:	30 0d       	add	r19, r0
 a02:	11 24       	eor	r1, r1
 a04:	36 95       	lsr	r19
 a06:	27 95       	ror	r18
 a08:	36 95       	lsr	r19
 a0a:	27 95       	ror	r18
 a0c:	ab e7       	ldi	r26, 0x7B	; 123
 a0e:	b4 e1       	ldi	r27, 0x14	; 20
 a10:	0e 94 3b 07 	call	0xe76	; 0xe76 <__umulhisi3>
 a14:	96 95       	lsr	r25
 a16:	87 95       	ror	r24
}
 a18:	08 95       	ret

00000a1a <CalculateDeadTime>:

uint16_t CalculateDeadTime(){
	return (((5000/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; //in ms
 a1a:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <frequency>
 a1e:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <frequency+0x1>
 a22:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <noOfWaves>
 a26:	88 e8       	ldi	r24, 0x88	; 136
 a28:	93 e1       	ldi	r25, 0x13	; 19
 a2a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__udivmodhi4>
 a2e:	62 1b       	sub	r22, r18
 a30:	71 09       	sbc	r23, r1
}
 a32:	8d e7       	ldi	r24, 0x7D	; 125
 a34:	28 2f       	mov	r18, r24
 a36:	26 9f       	mul	r18, r22
 a38:	c0 01       	movw	r24, r0
 a3a:	27 9f       	mul	r18, r23
 a3c:	90 0d       	add	r25, r0
 a3e:	11 24       	eor	r1, r1
 a40:	08 95       	ret

00000a42 <__vector_11>:
	UCSR0B |= (1<<RXEN0);
	UCSR0B |= (1<<RXCIE0);
}


ISR(TIMER1_COMPA_vect){
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	2f 93       	push	r18
 a4e:	3f 93       	push	r19
 a50:	4f 93       	push	r20
 a52:	5f 93       	push	r21
 a54:	6f 93       	push	r22
 a56:	7f 93       	push	r23
 a58:	8f 93       	push	r24
 a5a:	9f 93       	push	r25
 a5c:	af 93       	push	r26
 a5e:	bf 93       	push	r27
 a60:	ef 93       	push	r30
 a62:	ff 93       	push	r31
	if(isLHS || lowPowerMode){	//LHS MOTION
 a64:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <isLHS>
 a68:	81 11       	cpse	r24, r1
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__vector_11+0x32>
 a6c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <lowPowerMode>
 a70:	88 23       	and	r24, r24
 a72:	b9 f1       	breq	.+110    	; 0xae2 <__vector_11+0xa0>
		if((count <= noOfWaves) && (!isDead)){//PRODUCING X NUMBER OF PWM OSCILLATIONS
 a74:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
 a78:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 a7c:	89 17       	cp	r24, r25
 a7e:	60 f0       	brcs	.+24     	; 0xa98 <__vector_11+0x56>
 a80:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <isDead>
 a84:	81 11       	cpse	r24, r1
 a86:	08 c0       	rjmp	.+16     	; 0xa98 <__vector_11+0x56>
			PORTB |= (1<< PB2); //turn RHS ON
 a88:	2a 9a       	sbi	0x05, 2	; 5
			PORTD |= (1<<PD5);
 a8a:	5d 9a       	sbi	0x0b, 5	; 11
			count++;
 a8c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <count>
 a90:	8f 5f       	subi	r24, 0xFF	; 255
 a92:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <count>
 a96:	57 c0       	rjmp	.+174    	; 0xb46 <__vector_11+0x104>
		}
		else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 a98:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
 a9c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 aa0:	89 17       	cp	r24, r25
 aa2:	a0 f4       	brcc	.+40     	; 0xacc <__vector_11+0x8a>
			PORTD &= ~(1<<PD5); //turn pmos off
 aa4:	5d 98       	cbi	0x0b, 5	; 11
			PORTB &= ~(1<<PB2);//turn nmos off
 aa6:	2a 98       	cbi	0x05, 2	; 5
			PWM_Change(CalculateDeadTime(),65535);
 aa8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <CalculateDeadTime>
 aac:	6f ef       	ldi	r22, 0xFF	; 255
 aae:	7f ef       	ldi	r23, 0xFF	; 255
 ab0:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
			if(!lowPowerMode){
 ab4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <lowPowerMode>
 ab8:	81 11       	cpse	r24, r1
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <__vector_11+0x7e>
				isLHS = false;
 abc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <isLHS>
			}
			count = 0;
 ac0:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <count>
			isDead = true; //deadzone begins
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <isDead>
 aca:	3d c0       	rjmp	.+122    	; 0xb46 <__vector_11+0x104>
		}
		else{	//end of deadzone, set the pwm frequency back to normal
			isDead = false;
 acc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <isDead>
			PWM_Change(125,ConvertTimerValueToDutyCycle());
 ad0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <ConvertTimerValueToDutyCycle>
 ad4:	68 2f       	mov	r22, r24
 ad6:	70 e0       	ldi	r23, 0x00	; 0
 ad8:	8d e7       	ldi	r24, 0x7D	; 125
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
 ae0:	32 c0       	rjmp	.+100    	; 0xb46 <__vector_11+0x104>
		}
	}
	else{//RHS MOTION
		if((count <= noOfWaves) && (!isDead)){
 ae2:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
 ae6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 aea:	89 17       	cp	r24, r25
 aec:	60 f0       	brcs	.+24     	; 0xb06 <__vector_11+0xc4>
 aee:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <isDead>
 af2:	81 11       	cpse	r24, r1
 af4:	08 c0       	rjmp	.+16     	; 0xb06 <__vector_11+0xc4>
			PORTD |= (1<< PD6); //NMOS and PMOS on
 af6:	5e 9a       	sbi	0x0b, 6	; 11
			PORTB |= (1<<PB1);
 af8:	29 9a       	sbi	0x05, 1	; 5
			count++;
 afa:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <count>
 afe:	8f 5f       	subi	r24, 0xFF	; 255
 b00:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <count>
 b04:	20 c0       	rjmp	.+64     	; 0xb46 <__vector_11+0x104>
		}
		else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 b06:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <count>
 b0a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <noOfWaves>
 b0e:	89 17       	cp	r24, r25
 b10:	80 f4       	brcc	.+32     	; 0xb32 <__vector_11+0xf0>
			PORTD &= ~(1<< PD6);
 b12:	5e 98       	cbi	0x0b, 6	; 11
			PORTB &= ~(1<<PB1);
 b14:	29 98       	cbi	0x05, 1	; 5
			PWM_Change(CalculateDeadTime(),65535); //apply deadzone
 b16:	0e 94 0d 05 	call	0xa1a	; 0xa1a <CalculateDeadTime>
 b1a:	6f ef       	ldi	r22, 0xFF	; 255
 b1c:	7f ef       	ldi	r23, 0xFF	; 255
 b1e:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
			isLHS = true;
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <isLHS>
			count = 0;
 b28:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <count>
			isDead = true; //deadzone begins
 b2c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <isDead>
 b30:	0a c0       	rjmp	.+20     	; 0xb46 <__vector_11+0x104>
		}
		else{	//end of deadzone, set the pwm frequency back to normal
			isDead = false;
 b32:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <isDead>
			PWM_Change(125,ConvertTimerValueToDutyCycle());
 b36:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <ConvertTimerValueToDutyCycle>
 b3a:	68 2f       	mov	r22, r24
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	8d e7       	ldi	r24, 0x7D	; 125
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
		}
		
	}
}
 b46:	ff 91       	pop	r31
 b48:	ef 91       	pop	r30
 b4a:	bf 91       	pop	r27
 b4c:	af 91       	pop	r26
 b4e:	9f 91       	pop	r25
 b50:	8f 91       	pop	r24
 b52:	7f 91       	pop	r23
 b54:	6f 91       	pop	r22
 b56:	5f 91       	pop	r21
 b58:	4f 91       	pop	r20
 b5a:	3f 91       	pop	r19
 b5c:	2f 91       	pop	r18
 b5e:	0f 90       	pop	r0
 b60:	0f be       	out	0x3f, r0	; 63
 b62:	0f 90       	pop	r0
 b64:	1f 90       	pop	r1
 b66:	18 95       	reti

00000b68 <ASCIIConversion>:
}

uint8_t ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
 b68:	80 5d       	subi	r24, 0xD0	; 208
 b6a:	08 95       	ret

00000b6c <main>:

int main(void)
{	
	stdout= &mystdout;//printf
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	91 e0       	ldi	r25, 0x01	; 1
 b70:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__iob+0x3>
 b74:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__iob+0x2>

    sei();
 b78:	78 94       	sei
	UART_Init(UBRR_VALUE);
 b7a:	83 e3       	ldi	r24, 0x33	; 51
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	0e 94 75 00 	call	0xea	; 0xea <UART_Init>
	ADC_Init();
 b82:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
 b86:	0e 94 61 00 	call	0xc2	; 0xc2 <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 b8a:	84 b1       	in	r24, 0x04	; 4
 b8c:	86 60       	ori	r24, 0x06	; 6
 b8e:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 b90:	8a b1       	in	r24, 0x0a	; 10
 b92:	80 66       	ori	r24, 0x60	; 96
 b94:	8a b9       	out	0x0a, r24	; 10
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};
		
		//receive message code
		if(finished){
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
 b96:	c2 e3       	ldi	r28, 0x32	; 50
 b98:	d1 e0       	ldi	r29, 0x01	; 1
			
			//UART_Transmit(pumpParam);
			for(int i = 0; i < 38; i++){
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
 b9a:	0f 2e       	mov	r0, r31
 b9c:	f8 e1       	ldi	r31, 0x18	; 24
 b9e:	2f 2e       	mov	r2, r31
 ba0:	f1 e0       	ldi	r31, 0x01	; 1
 ba2:	3f 2e       	mov	r3, r31
 ba4:	f0 2d       	mov	r31, r0
int concatenate(int a, int b, int c){
	return ((a-48)*100 + (b-48)*10 + (c-48));
}

bool checkForError(unsigned char a, unsigned char b){
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
 ba6:	11 e0       	ldi	r17, 0x01	; 1
		//}
		
		//mock arrays
		for(int i = 0; i < NUMBER_OF_SAMPLES;i++){
			voltageRHS[i] = 1132;
			voltageLHS[i] = 40;
 ba8:	0f 2e       	mov	r0, r31
 baa:	f8 e2       	ldi	r31, 0x28	; 40
 bac:	4f 2e       	mov	r4, r31
 bae:	51 2c       	mov	r5, r1
 bb0:	61 2c       	mov	r6, r1
 bb2:	71 2c       	mov	r7, r1
 bb4:	f0 2d       	mov	r31, r0


    while (1) 
    {	
		//reset index positions
		voltageLHSIndex = 0;
 bb6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <voltageLHSIndex>
		voltageRHSIndex = 0;
 bba:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <voltageRHSIndex>
		currentIndex = 0;
 bbe:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <currentIndex>
		uint32_t rmsCurrent = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};
		
		//receive message code
		if(finished){
 bc2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <finished>
 bc6:	88 23       	and	r24, r24
 bc8:	09 f4       	brne	.+2      	; 0xbcc <main+0x60>
 bca:	08 c1       	rjmp	.+528    	; 0xddc <main+0x270>
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
 bcc:	4a 81       	ldd	r20, Y+2	; 0x02
 bce:	69 81       	ldd	r22, Y+1	; 0x01
 bd0:	88 81       	ld	r24, Y
 bd2:	50 e0       	ldi	r21, 0x00	; 0
 bd4:	70 e0       	ldi	r23, 0x00	; 0
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	0e 94 4a 04 	call	0x894	; 0x894 <concatenate>
 bdc:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <pumpParam+0x1>
 be0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <pumpParam>
			
			//UART_Transmit(pumpParam);
			for(int i = 0; i < 38; i++){
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	90 e0       	ldi	r25, 0x00	; 0
				pumpingEffortArray[i] = 0;
 be8:	fc 01       	movw	r30, r24
 bea:	ee 5c       	subi	r30, 0xCE	; 206
 bec:	fe 4f       	sbci	r31, 0xFE	; 254
 bee:	10 82       	st	Z, r1
		//receive message code
		if(finished){
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
			
			//UART_Transmit(pumpParam);
			for(int i = 0; i < 38; i++){
 bf0:	01 96       	adiw	r24, 0x01	; 1
 bf2:	86 32       	cpi	r24, 0x26	; 38
 bf4:	91 05       	cpc	r25, r1
 bf6:	c1 f7       	brne	.-16     	; 0xbe8 <main+0x7c>
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
 bf8:	d1 01       	movw	r26, r2
 bfa:	11 96       	adiw	r26, 0x01	; 1
 bfc:	9c 91       	ld	r25, X
 bfe:	11 97       	sbiw	r26, 0x01	; 1
 c00:	8c 91       	ld	r24, X
int concatenate(int a, int b, int c){
	return ((a-48)*100 + (b-48)*10 + (c-48));
}

bool checkForError(unsigned char a, unsigned char b){
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
 c02:	85 36       	cpi	r24, 0x65	; 101
 c04:	29 f4       	brne	.+10     	; 0xc10 <main+0xa4>
 c06:	81 2f       	mov	r24, r17
 c08:	97 37       	cpi	r25, 0x77	; 119
 c0a:	19 f0       	breq	.+6      	; 0xc12 <main+0xa6>
 c0c:	80 e0       	ldi	r24, 0x00	; 0
 c0e:	01 c0       	rjmp	.+2      	; 0xc12 <main+0xa6>
		return true;
	}else{
		return false;
 c10:	80 e0       	ldi	r24, 0x00	; 0
			
			//UART_Transmit(pumpParam);
			for(int i = 0; i < 38; i++){
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
 c12:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <clearErrorFlag>
			if(clearErrorFlag){
 c16:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <clearErrorFlag>
 c1a:	88 23       	and	r24, r24
 c1c:	21 f0       	breq	.+8      	; 0xc26 <main+0xba>
				cmprCollide = false;
 c1e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cmprCollide>
				cmprJammed = false;;
 c22:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cmprJammed>
			}
			UART_SendJson(0,0,pumpParam,0,cmprJammed,cmprCollide, 102,101);
 c26:	c0 90 0e 01 	lds	r12, 0x010E	; 0x80010e <cmprCollide>
 c2a:	e0 90 0f 01 	lds	r14, 0x010F	; 0x80010f <cmprJammed>
 c2e:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <pumpParam>
 c32:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <pumpParam+0x1>
 c36:	03 2e       	mov	r0, r19
 c38:	00 0c       	add	r0, r0
 c3a:	44 0b       	sbc	r20, r20
 c3c:	55 0b       	sbc	r21, r21
 c3e:	0f 2e       	mov	r0, r31
 c40:	f5 e6       	ldi	r31, 0x65	; 101
 c42:	8f 2e       	mov	r8, r31
 c44:	f0 2d       	mov	r31, r0
 c46:	0f 2e       	mov	r0, r31
 c48:	f6 e6       	ldi	r31, 0x66	; 102
 c4a:	af 2e       	mov	r10, r31
 c4c:	f0 2d       	mov	r31, r0
 c4e:	00 e0       	ldi	r16, 0x00	; 0
 c50:	60 e0       	ldi	r22, 0x00	; 0
 c52:	80 e0       	ldi	r24, 0x00	; 0
 c54:	0e 94 0b 04 	call	0x816	; 0x816 <UART_SendJson>
			finished = false;
 c58:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <finished>
			rx_count = 0;
 c5c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_count+0x1>
 c60:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <rx_count>
 c64:	bb c0       	rjmp	.+374    	; 0xddc <main+0x270>
			//voltageLHSIndex++;
		//}
		
		//mock arrays
		for(int i = 0; i < NUMBER_OF_SAMPLES;i++){
			voltageRHS[i] = 1132;
 c66:	c9 01       	movw	r24, r18
 c68:	88 0f       	add	r24, r24
 c6a:	99 1f       	adc	r25, r25
 c6c:	88 0f       	add	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	fc 01       	movw	r30, r24
 c72:	e1 5a       	subi	r30, 0xA1	; 161
 c74:	fe 4f       	sbci	r31, 0xFE	; 254
 c76:	4c e6       	ldi	r20, 0x6C	; 108
 c78:	54 e0       	ldi	r21, 0x04	; 4
 c7a:	60 e0       	ldi	r22, 0x00	; 0
 c7c:	70 e0       	ldi	r23, 0x00	; 0
 c7e:	40 83       	st	Z, r20
 c80:	51 83       	std	Z+1, r21	; 0x01
 c82:	62 83       	std	Z+2, r22	; 0x02
 c84:	73 83       	std	Z+3, r23	; 0x03
			voltageLHS[i] = 40;
 c86:	fc 01       	movw	r30, r24
 c88:	e1 55       	subi	r30, 0x51	; 81
 c8a:	fe 4f       	sbci	r31, 0xFE	; 254
 c8c:	40 82       	st	Z, r4
 c8e:	51 82       	std	Z+1, r5	; 0x01
 c90:	62 82       	std	Z+2, r6	; 0x02
 c92:	73 82       	std	Z+3, r7	; 0x03
			current[i] = 930;
 c94:	fc 01       	movw	r30, r24
 c96:	e1 50       	subi	r30, 0x01	; 1
 c98:	fe 4f       	sbci	r31, 0xFE	; 254
 c9a:	62 ea       	ldi	r22, 0xA2	; 162
 c9c:	73 e0       	ldi	r23, 0x03	; 3
 c9e:	80 e0       	ldi	r24, 0x00	; 0
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	60 83       	st	Z, r22
 ca4:	71 83       	std	Z+1, r23	; 0x01
 ca6:	82 83       	std	Z+2, r24	; 0x02
 ca8:	93 83       	std	Z+3, r25	; 0x03
			//printf("%d\n",voltageLHS[voltageLHSIndex]);
			//voltageLHSIndex++;
		//}
		
		//mock arrays
		for(int i = 0; i < NUMBER_OF_SAMPLES;i++){
 caa:	2f 5f       	subi	r18, 0xFF	; 255
 cac:	3f 4f       	sbci	r19, 0xFF	; 255
 cae:	24 31       	cpi	r18, 0x14	; 20
 cb0:	31 05       	cpc	r19, r1
 cb2:	c9 f6       	brne	.-78     	; 0xc66 <main+0xfa>
 cb4:	80 e0       	ldi	r24, 0x00	; 0
 cb6:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		
		//get voltage across the coil
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){
			if(voltageLHS[i]>voltageRHS[i]){
 cb8:	9c 01       	movw	r18, r24
 cba:	22 0f       	add	r18, r18
 cbc:	33 1f       	adc	r19, r19
 cbe:	22 0f       	add	r18, r18
 cc0:	33 1f       	adc	r19, r19
 cc2:	f9 01       	movw	r30, r18
 cc4:	e1 55       	subi	r30, 0x51	; 81
 cc6:	fe 4f       	sbci	r31, 0xFE	; 254
 cc8:	40 81       	ld	r20, Z
 cca:	51 81       	ldd	r21, Z+1	; 0x01
 ccc:	62 81       	ldd	r22, Z+2	; 0x02
 cce:	73 81       	ldd	r23, Z+3	; 0x03
 cd0:	f9 01       	movw	r30, r18
 cd2:	e1 5a       	subi	r30, 0xA1	; 161
 cd4:	fe 4f       	sbci	r31, 0xFE	; 254
 cd6:	c0 80       	ld	r12, Z
 cd8:	d1 80       	ldd	r13, Z+1	; 0x01
 cda:	e2 80       	ldd	r14, Z+2	; 0x02
 cdc:	f3 80       	ldd	r15, Z+3	; 0x03
 cde:	c4 16       	cp	r12, r20
 ce0:	d5 06       	cpc	r13, r21
 ce2:	e6 06       	cpc	r14, r22
 ce4:	f7 06       	cpc	r15, r23
 ce6:	f8 f4       	brcc	.+62     	; 0xd26 <main+0x1ba>
				voltageAcrossTheCoil[i] = voltageLHS[i]-voltageRHS[i];
 ce8:	9c 01       	movw	r18, r24
 cea:	22 0f       	add	r18, r18
 cec:	33 1f       	adc	r19, r19
 cee:	22 0f       	add	r18, r18
 cf0:	33 1f       	adc	r19, r19
 cf2:	f9 01       	movw	r30, r18
 cf4:	e1 55       	subi	r30, 0x51	; 81
 cf6:	fe 4f       	sbci	r31, 0xFE	; 254
 cf8:	40 81       	ld	r20, Z
 cfa:	51 81       	ldd	r21, Z+1	; 0x01
 cfc:	62 81       	ldd	r22, Z+2	; 0x02
 cfe:	73 81       	ldd	r23, Z+3	; 0x03
 d00:	f9 01       	movw	r30, r18
 d02:	e1 5a       	subi	r30, 0xA1	; 161
 d04:	fe 4f       	sbci	r31, 0xFE	; 254
 d06:	c0 80       	ld	r12, Z
 d08:	d1 80       	ldd	r13, Z+1	; 0x01
 d0a:	e2 80       	ldd	r14, Z+2	; 0x02
 d0c:	f3 80       	ldd	r15, Z+3	; 0x03
 d0e:	4c 19       	sub	r20, r12
 d10:	5d 09       	sbc	r21, r13
 d12:	6e 09       	sbc	r22, r14
 d14:	7f 09       	sbc	r23, r15
 d16:	f9 01       	movw	r30, r18
 d18:	ef 5a       	subi	r30, 0xAF	; 175
 d1a:	fd 4f       	sbci	r31, 0xFD	; 253
 d1c:	40 83       	st	Z, r20
 d1e:	51 83       	std	Z+1, r21	; 0x01
 d20:	62 83       	std	Z+2, r22	; 0x02
 d22:	73 83       	std	Z+3, r23	; 0x03
 d24:	1e c0       	rjmp	.+60     	; 0xd62 <main+0x1f6>
			}else{
				voltageAcrossTheCoil[i] = voltageRHS[i]-voltageLHS[i];
 d26:	9c 01       	movw	r18, r24
 d28:	22 0f       	add	r18, r18
 d2a:	33 1f       	adc	r19, r19
 d2c:	22 0f       	add	r18, r18
 d2e:	33 1f       	adc	r19, r19
 d30:	f9 01       	movw	r30, r18
 d32:	e1 5a       	subi	r30, 0xA1	; 161
 d34:	fe 4f       	sbci	r31, 0xFE	; 254
 d36:	40 81       	ld	r20, Z
 d38:	51 81       	ldd	r21, Z+1	; 0x01
 d3a:	62 81       	ldd	r22, Z+2	; 0x02
 d3c:	73 81       	ldd	r23, Z+3	; 0x03
 d3e:	f9 01       	movw	r30, r18
 d40:	e1 55       	subi	r30, 0x51	; 81
 d42:	fe 4f       	sbci	r31, 0xFE	; 254
 d44:	c0 80       	ld	r12, Z
 d46:	d1 80       	ldd	r13, Z+1	; 0x01
 d48:	e2 80       	ldd	r14, Z+2	; 0x02
 d4a:	f3 80       	ldd	r15, Z+3	; 0x03
 d4c:	4c 19       	sub	r20, r12
 d4e:	5d 09       	sbc	r21, r13
 d50:	6e 09       	sbc	r22, r14
 d52:	7f 09       	sbc	r23, r15
 d54:	f9 01       	movw	r30, r18
 d56:	ef 5a       	subi	r30, 0xAF	; 175
 d58:	fd 4f       	sbci	r31, 0xFD	; 253
 d5a:	40 83       	st	Z, r20
 d5c:	51 83       	std	Z+1, r21	; 0x01
 d5e:	62 83       	std	Z+2, r22	; 0x02
 d60:	73 83       	std	Z+3, r23	; 0x03
			}
			voltageSum += voltageAcrossTheCoil[i]*voltageAcrossTheCoil[i];
 d62:	fc 01       	movw	r30, r24
 d64:	ee 0f       	add	r30, r30
 d66:	ff 1f       	adc	r31, r31
 d68:	ee 0f       	add	r30, r30
 d6a:	ff 1f       	adc	r31, r31
 d6c:	df 01       	movw	r26, r30
 d6e:	af 5a       	subi	r26, 0xAF	; 175
 d70:	bd 4f       	sbci	r27, 0xFD	; 253
 d72:	4d 91       	ld	r20, X+
 d74:	5d 91       	ld	r21, X+
 d76:	6d 91       	ld	r22, X+
 d78:	7c 91       	ld	r23, X
 d7a:	13 97       	sbiw	r26, 0x03	; 3
 d7c:	4d 91       	ld	r20, X+
 d7e:	5d 91       	ld	r21, X+
 d80:	6d 91       	ld	r22, X+
 d82:	7c 91       	ld	r23, X
			currentSum += current[i]*current[i];
 d84:	e1 50       	subi	r30, 0x01	; 1
 d86:	fe 4f       	sbci	r31, 0xFE	; 254
 d88:	40 81       	ld	r20, Z
 d8a:	51 81       	ldd	r21, Z+1	; 0x01
 d8c:	62 81       	ldd	r22, Z+2	; 0x02
 d8e:	73 81       	ldd	r23, Z+3	; 0x03
 d90:	40 81       	ld	r20, Z
 d92:	51 81       	ldd	r21, Z+1	; 0x01
 d94:	62 81       	ldd	r22, Z+2	; 0x02
 d96:	73 81       	ldd	r23, Z+3	; 0x03
			
		}
		
		
		//get voltage across the coil
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){
 d98:	01 96       	adiw	r24, 0x01	; 1
 d9a:	84 31       	cpi	r24, 0x14	; 20
 d9c:	91 05       	cpc	r25, r1
 d9e:	09 f0       	breq	.+2      	; 0xda2 <main+0x236>
 da0:	8b cf       	rjmp	.-234    	; 0xcb8 <main+0x14c>
 da2:	80 e0       	ldi	r24, 0x00	; 0
 da4:	90 e0       	ldi	r25, 0x00	; 0
		//printf("%d\n",rmsVoltage);
		//printf("%d\n",rmsCurrent);
		
		//calculate average power	
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
			powerArray[j] = (voltageAcrossTheCoil[j] * current[j]);
 da6:	fc 01       	movw	r30, r24
 da8:	ee 0f       	add	r30, r30
 daa:	ff 1f       	adc	r31, r31
 dac:	ee 0f       	add	r30, r30
 dae:	ff 1f       	adc	r31, r31
 db0:	df 01       	movw	r26, r30
 db2:	af 5a       	subi	r26, 0xAF	; 175
 db4:	bd 4f       	sbci	r27, 0xFD	; 253
 db6:	4d 91       	ld	r20, X+
 db8:	5d 91       	ld	r21, X+
 dba:	6d 91       	ld	r22, X+
 dbc:	7c 91       	ld	r23, X
 dbe:	e1 50       	subi	r30, 0x01	; 1
 dc0:	fe 4f       	sbci	r31, 0xFE	; 254
 dc2:	40 81       	ld	r20, Z
 dc4:	51 81       	ldd	r21, Z+1	; 0x01
 dc6:	62 81       	ldd	r22, Z+2	; 0x02
 dc8:	73 81       	ldd	r23, Z+3	; 0x03
		rmsCurrent = sqrt(rmsCurrent);
		//printf("%d\n",rmsVoltage);
		//printf("%d\n",rmsCurrent);
		
		//calculate average power	
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
 dca:	01 96       	adiw	r24, 0x01	; 1
 dcc:	84 31       	cpi	r24, 0x14	; 20
 dce:	91 05       	cpc	r25, r1
 dd0:	51 f7       	brne	.-44     	; 0xda6 <main+0x23a>
 dd2:	83 e1       	ldi	r24, 0x13	; 19
 dd4:	90 e0       	ldi	r25, 0x00	; 0
 dd6:	01 97       	sbiw	r24, 0x01	; 1
			powerArray[j] = (voltageAcrossTheCoil[j] * current[j]);
		}
		uint32_t powerTotal = 0;
		uint32_t rmsPower = 0;
		for (int i = 0; i < NUMBER_OF_SAMPLES-1; i++) {
 dd8:	f1 f7       	brne	.-4      	; 0xdd6 <main+0x26a>
 dda:	ed ce       	rjmp	.-550    	; 0xbb6 <main+0x4a>

bool checkForError(unsigned char a, unsigned char b){
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
		return true;
	}else{
		return false;
 ddc:	20 e0       	ldi	r18, 0x00	; 0
 dde:	30 e0       	ldi	r19, 0x00	; 0
 de0:	42 cf       	rjmp	.-380    	; 0xc66 <main+0xfa>

00000de2 <__udivmodhi4>:
 de2:	aa 1b       	sub	r26, r26
 de4:	bb 1b       	sub	r27, r27
 de6:	51 e1       	ldi	r21, 0x11	; 17
 de8:	07 c0       	rjmp	.+14     	; 0xdf8 <__udivmodhi4_ep>

00000dea <__udivmodhi4_loop>:
 dea:	aa 1f       	adc	r26, r26
 dec:	bb 1f       	adc	r27, r27
 dee:	a6 17       	cp	r26, r22
 df0:	b7 07       	cpc	r27, r23
 df2:	10 f0       	brcs	.+4      	; 0xdf8 <__udivmodhi4_ep>
 df4:	a6 1b       	sub	r26, r22
 df6:	b7 0b       	sbc	r27, r23

00000df8 <__udivmodhi4_ep>:
 df8:	88 1f       	adc	r24, r24
 dfa:	99 1f       	adc	r25, r25
 dfc:	5a 95       	dec	r21
 dfe:	a9 f7       	brne	.-22     	; 0xdea <__udivmodhi4_loop>
 e00:	80 95       	com	r24
 e02:	90 95       	com	r25
 e04:	bc 01       	movw	r22, r24
 e06:	cd 01       	movw	r24, r26
 e08:	08 95       	ret

00000e0a <__divmodhi4>:
 e0a:	97 fb       	bst	r25, 7
 e0c:	07 2e       	mov	r0, r23
 e0e:	16 f4       	brtc	.+4      	; 0xe14 <__divmodhi4+0xa>
 e10:	00 94       	com	r0
 e12:	07 d0       	rcall	.+14     	; 0xe22 <__divmodhi4_neg1>
 e14:	77 fd       	sbrc	r23, 7
 e16:	09 d0       	rcall	.+18     	; 0xe2a <__divmodhi4_neg2>
 e18:	0e 94 f1 06 	call	0xde2	; 0xde2 <__udivmodhi4>
 e1c:	07 fc       	sbrc	r0, 7
 e1e:	05 d0       	rcall	.+10     	; 0xe2a <__divmodhi4_neg2>
 e20:	3e f4       	brtc	.+14     	; 0xe30 <__divmodhi4_exit>

00000e22 <__divmodhi4_neg1>:
 e22:	90 95       	com	r25
 e24:	81 95       	neg	r24
 e26:	9f 4f       	sbci	r25, 0xFF	; 255
 e28:	08 95       	ret

00000e2a <__divmodhi4_neg2>:
 e2a:	70 95       	com	r23
 e2c:	61 95       	neg	r22
 e2e:	7f 4f       	sbci	r23, 0xFF	; 255

00000e30 <__divmodhi4_exit>:
 e30:	08 95       	ret

00000e32 <__udivmodsi4>:
 e32:	a1 e2       	ldi	r26, 0x21	; 33
 e34:	1a 2e       	mov	r1, r26
 e36:	aa 1b       	sub	r26, r26
 e38:	bb 1b       	sub	r27, r27
 e3a:	fd 01       	movw	r30, r26
 e3c:	0d c0       	rjmp	.+26     	; 0xe58 <__udivmodsi4_ep>

00000e3e <__udivmodsi4_loop>:
 e3e:	aa 1f       	adc	r26, r26
 e40:	bb 1f       	adc	r27, r27
 e42:	ee 1f       	adc	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	a2 17       	cp	r26, r18
 e48:	b3 07       	cpc	r27, r19
 e4a:	e4 07       	cpc	r30, r20
 e4c:	f5 07       	cpc	r31, r21
 e4e:	20 f0       	brcs	.+8      	; 0xe58 <__udivmodsi4_ep>
 e50:	a2 1b       	sub	r26, r18
 e52:	b3 0b       	sbc	r27, r19
 e54:	e4 0b       	sbc	r30, r20
 e56:	f5 0b       	sbc	r31, r21

00000e58 <__udivmodsi4_ep>:
 e58:	66 1f       	adc	r22, r22
 e5a:	77 1f       	adc	r23, r23
 e5c:	88 1f       	adc	r24, r24
 e5e:	99 1f       	adc	r25, r25
 e60:	1a 94       	dec	r1
 e62:	69 f7       	brne	.-38     	; 0xe3e <__udivmodsi4_loop>
 e64:	60 95       	com	r22
 e66:	70 95       	com	r23
 e68:	80 95       	com	r24
 e6a:	90 95       	com	r25
 e6c:	9b 01       	movw	r18, r22
 e6e:	ac 01       	movw	r20, r24
 e70:	bd 01       	movw	r22, r26
 e72:	cf 01       	movw	r24, r30
 e74:	08 95       	ret

00000e76 <__umulhisi3>:
 e76:	a2 9f       	mul	r26, r18
 e78:	b0 01       	movw	r22, r0
 e7a:	b3 9f       	mul	r27, r19
 e7c:	c0 01       	movw	r24, r0
 e7e:	a3 9f       	mul	r26, r19
 e80:	70 0d       	add	r23, r0
 e82:	81 1d       	adc	r24, r1
 e84:	11 24       	eor	r1, r1
 e86:	91 1d       	adc	r25, r1
 e88:	b2 9f       	mul	r27, r18
 e8a:	70 0d       	add	r23, r0
 e8c:	81 1d       	adc	r24, r1
 e8e:	11 24       	eor	r1, r1
 e90:	91 1d       	adc	r25, r1
 e92:	08 95       	ret

00000e94 <_exit>:
 e94:	f8 94       	cli

00000e96 <__stop_program>:
 e96:	ff cf       	rjmp	.-2      	; 0xe96 <__stop_program>
