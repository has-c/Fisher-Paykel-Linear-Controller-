
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000302  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000398  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb1  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a0  00000000  00000000  00001081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000587  00000000  00000000  00001921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00001ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053f  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000273  00000000  00000000  000025a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000281a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_11>
  30:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  9e:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	80 83       	st	Z, r24
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	86 68       	ori	r24, 0x86	; 134
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS10);//CTC mode and no prescaler
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	89 60       	ori	r24, 0x09	; 9
  d6:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
  d8:	ef e6       	ldi	r30, 0x6F	; 111
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	86 60       	ori	r24, 0x06	; 6
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
  e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
  ec:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  f0:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  f4:	08 95       	ret

000000f6 <UART_Init>:

//uart transmit
//polling uart
void UART_Transmit(uint8_t myValue){
	while (!((1<<UDRE0)&&(UCSR0A))); //wait until the transmit register is ready
	UDR0 = myValue;//once ready, store next value for transmission
  f6:	e5 ec       	ldi	r30, 0xC5	; 197
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	20 81       	ld	r18, Z
  fc:	92 2b       	or	r25, r18
  fe:	90 83       	st	Z, r25
 100:	e4 ec       	ldi	r30, 0xC4	; 196
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	89 2b       	or	r24, r25
 108:	80 83       	st	Z, r24
 10a:	e1 ec       	ldi	r30, 0xC1	; 193
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 69       	ori	r24, 0x98	; 152
 112:	80 83       	st	Z, r24
 114:	e2 ec       	ldi	r30, 0xC2	; 194
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	86 60       	ori	r24, 0x06	; 6
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <UART_Receive>:
}

//uart recieve 
//interrupt config
uint8_t UART_Receive(){
	uint8_t strokeLength = UDR0;
 120:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return strokeLength;
}
 124:	08 95       	ret

00000126 <__vector_11>:
volatile uint8_t strokeLength;
volatile bool isMicroOff = false;

//************************************ Interrupt Service Routines *******************************//

ISR(TIMER1_COMPA_vect){
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	if(isLHS){	//LHS MOTION
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14c:	88 23       	and	r24, r24
 14e:	c1 f1       	breq	.+112    	; 0x1c0 <__vector_11+0x9a>
		if((count <= NUMBER_OF_WAVES) && (!isDead)){//PRODUCING X NUMBER OF PWM OSCILLATIONS
 150:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 154:	89 3c       	cpi	r24, 0xC9	; 201
 156:	68 f4       	brcc	.+26     	; 0x172 <__vector_11+0x4c>
 158:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 15c:	81 11       	cpse	r24, r1
 15e:	09 c0       	rjmp	.+18     	; 0x172 <__vector_11+0x4c>
			PORTB |= (1<<PB1) | (1<< PB2); //turn RHS ON
 160:	85 b1       	in	r24, 0x05	; 5
 162:	86 60       	ori	r24, 0x06	; 6
 164:	85 b9       	out	0x05, r24	; 5
			count++;
 166:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <count>
 170:	5e c0       	rjmp	.+188    	; 0x22e <__vector_11+0x108>
		}
		else if(count > NUMBER_OF_WAVES){//DEADZONE: leave the port off for 14ms in total
 172:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 176:	89 3c       	cpi	r24, 0xC9	; 201
 178:	a8 f0       	brcs	.+42     	; 0x1a4 <__vector_11+0x7e>
			PORTB &= ~(1<<PB1); //turn pmos off
 17a:	29 98       	cbi	0x05, 1	; 5
			PORTB &= ~(1<<PB2);//turn nmos off
 17c:	2a 98       	cbi	0x05, 2	; 5
			TCCR1B |= (1 << CS11); //change prescalar to 8
 17e:	e1 e8       	ldi	r30, 0x81	; 129
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	82 60       	ori	r24, 0x02	; 2
 186:	80 83       	st	Z, r24
			PWM_Change(DEAD_TIME,0);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	88 eb       	ldi	r24, 0xB8	; 184
 18e:	9b e0       	ldi	r25, 0x0B	; 11
 190:	0e 94 72 00 	call	0xe4	; 0xe4 <PWM_Change>
			isLHS = false;
 194:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			count = 0;
 198:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count>
			isDead = true; //deadzone begins
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1a2:	45 c0       	rjmp	.+138    	; 0x22e <__vector_11+0x108>
		}
		else{	//end of deadzone, set the pwm frequency back to normal
			TCCR1B &= ~(1<<CS11);
 1a4:	e1 e8       	ldi	r30, 0x81	; 129
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8d 7f       	andi	r24, 0xFD	; 253
 1ac:	80 83       	st	Z, r24
			isDead = false;
 1ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			PWM_Change(400,DUTY_CYCLE);
 1b2:	60 e4       	ldi	r22, 0x40	; 64
 1b4:	71 e0       	ldi	r23, 0x01	; 1
 1b6:	80 e9       	ldi	r24, 0x90	; 144
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 72 00 	call	0xe4	; 0xe4 <PWM_Change>
 1be:	37 c0       	rjmp	.+110    	; 0x22e <__vector_11+0x108>
		}
	}
	else{//RHS MOTION
		if((count <= NUMBER_OF_WAVES) && (!isDead)){
 1c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 1c4:	89 3c       	cpi	r24, 0xC9	; 201
 1c6:	68 f4       	brcc	.+26     	; 0x1e2 <__vector_11+0xbc>
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1cc:	81 11       	cpse	r24, r1
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <__vector_11+0xbc>
			PORTD |= (1<< PD6)|(1<<PD5); //NMOS and PMOS on
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	80 66       	ori	r24, 0x60	; 96
 1d4:	8b b9       	out	0x0b, r24	; 11
			count++;
 1d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <count>
 1e0:	26 c0       	rjmp	.+76     	; 0x22e <__vector_11+0x108>
		}
		else if(count > NUMBER_OF_WAVES){//DEADZONE: leave the port off for 14ms in total
 1e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 1e6:	89 3c       	cpi	r24, 0xC9	; 201
 1e8:	a8 f0       	brcs	.+42     	; 0x214 <__vector_11+0xee>
			PORTD &= ~(1<< PD6);
 1ea:	5e 98       	cbi	0x0b, 6	; 11
			PORTD &= ~(1<<PD5);
 1ec:	5d 98       	cbi	0x0b, 5	; 11
			TCCR1B |= (1 << CS11);	//change prescaler to 8
 1ee:	e1 e8       	ldi	r30, 0x81	; 129
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	80 83       	st	Z, r24
			PWM_Change(DEAD_TIME,0); //apply deadzone
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	88 eb       	ldi	r24, 0xB8	; 184
 1fe:	9b e0       	ldi	r25, 0x0B	; 11
 200:	0e 94 72 00 	call	0xe4	; 0xe4 <PWM_Change>
			isLHS = true;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			count = 0;
 20a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count>
			isDead = true; //deadzone begins
 20e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 212:	0d c0       	rjmp	.+26     	; 0x22e <__vector_11+0x108>
		}
		else{	//end of deadzone, set the pwm frequency back to normal
			TCCR1B &= ~(1<<CS11);
 214:	e1 e8       	ldi	r30, 0x81	; 129
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8d 7f       	andi	r24, 0xFD	; 253
 21c:	80 83       	st	Z, r24
			isDead = false;
 21e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			PWM_Change(400,DUTY_CYCLE);
 222:	60 e4       	ldi	r22, 0x40	; 64
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	80 e9       	ldi	r24, 0x90	; 144
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 72 00 	call	0xe4	; 0xe4 <PWM_Change>
		}
	}
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	7f 91       	pop	r23
 23c:	6f 91       	pop	r22
 23e:	5f 91       	pop	r21
 240:	4f 91       	pop	r20
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_12>:

ISR(TIMER1_COMPB_vect){//TRIGGERS ON MATCH WITH OCRB REGISTER (OFF TIME)
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	8f 93       	push	r24
	if(isLHS){//LHS MOTION
 25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 260:	88 23       	and	r24, r24
 262:	41 f0       	breq	.+16     	; 0x274 <__vector_12+0x24>
		if((~isDead) && (count <=NUMBER_OF_WAVES)){
 264:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 268:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 26c:	89 3c       	cpi	r24, 0xC9	; 201
 26e:	48 f4       	brcc	.+18     	; 0x282 <__vector_12+0x32>
			PORTB &= ~(1 << PB1);
 270:	29 98       	cbi	0x05, 1	; 5
 272:	07 c0       	rjmp	.+14     	; 0x282 <__vector_12+0x32>
		}
	}
	else{//RHS MOTION
		if((~isDead) && (count <=NUMBER_OF_WAVES)){
 274:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 278:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 27c:	89 3c       	cpi	r24, 0xC9	; 201
 27e:	08 f4       	brcc	.+2      	; 0x282 <__vector_12+0x32>
			PORTD &= ~(1 << PD6);
 280:	5e 98       	cbi	0x0b, 6	; 11
		}
	}
}
 282:	8f 91       	pop	r24
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__vector_18>:
 
ISR(USART_RX_vect){
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	strokeLength = UART_Receive();
 2b0:	0e 94 90 00 	call	0x120	; 0x120 <UART_Receive>
 2b4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <strokeLength>
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <main>:
//JSON file format 


int main(void)
{	
    sei();
 2da:	78 94       	sei
	UART_Init(UBRRVALUE);
 2dc:	63 e3       	ldi	r22, 0x33	; 51
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_Init>
	ADC_Init();
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
 2ec:	0e 94 67 00 	call	0xce	; 0xce <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 2f0:	84 b1       	in	r24, 0x04	; 4
 2f2:	86 60       	ori	r24, 0x06	; 6
 2f4:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 2f6:	8a b1       	in	r24, 0x0a	; 10
 2f8:	80 66       	ori	r24, 0x60	; 96
 2fa:	8a b9       	out	0x0a, r24	; 10
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <main+0x22>

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
