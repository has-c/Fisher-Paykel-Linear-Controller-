
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000ef0  00000f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800108  00800108  00000f8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000212e  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097e  00000000  00000000  00003252  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e02  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  000049d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000760  00000000  00000000  00004cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a32  00000000  00000000  0000543c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005e6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_11>
  30:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9a 05 	call	0xb34	; 0xb34 <main>
  9e:	0c 94 76 07 	jmp	0xeec	; 0xeec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  
#include "adc.h"

void ADC_Init(){
	// selection channel is set to AREF
	ADMUX &= ~(1<<REFS1);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	
	//Selects ADC5 as the analog channel selection
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
  b6:	80 81       	ld	r24, Z
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	80 83       	st	Z, r24
	
	//set required Prescaler Select Bits
	//Turns on the ADC and sets prescaler to 64
	//enable ADC
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	86 68       	ori	r24, 0x86	; 134
  c4:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADPS0);
  c6:	80 81       	ld	r24, Z
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <ADC_Read>:

}

//polling ADC 
int ADC_Read(){
	while(!(ADCSRA &&(1<<ADIF)));
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 23       	and	r24, r24
  dc:	e9 f3       	breq	.-6      	; 0xd8 <ADC_Read+0x4>
	return ADC;
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  e6:	08 95       	ret

000000e8 <ADC_Calculate>:

//note: do not use float as ATMEGA328P does not have a floating point unit. It uses integers to perform float operations thus use integers and multiply them by 1000 to
//get millivolt(mV) accuracy 
uint32_t ADC_Calculate(){
	uint16_t  adcValue = ADC_Read();
  e8:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADC_Read>
	uint32_t measuredVoltage = (adcValue*1000)/1024 * 5;
	return measuredVoltage;
  ec:	28 ee       	ldi	r18, 0xE8	; 232
  ee:	33 e0       	ldi	r19, 0x03	; 3
  f0:	ac 01       	movw	r20, r24
  f2:	42 9f       	mul	r20, r18
  f4:	c0 01       	movw	r24, r0
  f6:	43 9f       	mul	r20, r19
  f8:	90 0d       	add	r25, r0
  fa:	52 9f       	mul	r21, r18
  fc:	90 0d       	add	r25, r0
  fe:	11 24       	eor	r1, r1
 100:	89 2f       	mov	r24, r25
 102:	99 27       	eor	r25, r25
 104:	86 95       	lsr	r24
 106:	86 95       	lsr	r24
 108:	bc 01       	movw	r22, r24
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	68 0f       	add	r22, r24
 114:	79 1f       	adc	r23, r25
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
}
 11a:	08 95       	ret

0000011c <ADC_LHSVoltage>:

int ADC_LHSVoltage(){
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
	int adc_val = ADC_Calculate();
 130:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_Calculate>
	return (adc_val*.27);
 134:	07 2e       	mov	r0, r23
 136:	00 0c       	add	r0, r0
 138:	88 0b       	sbc	r24, r24
 13a:	99 0b       	sbc	r25, r25
 13c:	0e 94 19 06 	call	0xc32	; 0xc32 <__floatsisf>
 140:	21 e7       	ldi	r18, 0x71	; 113
 142:	3d e3       	ldi	r19, 0x3D	; 61
 144:	4a e8       	ldi	r20, 0x8A	; 138
 146:	5e e3       	ldi	r21, 0x3E	; 62
 148:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__mulsf3>
 14c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fixsfsi>
}
 150:	cb 01       	movw	r24, r22
 152:	08 95       	ret

00000154 <PWM_Init>:
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8b 60       	ori	r24, 0x0B	; 11
 15c:	80 83       	st	Z, r24
 15e:	ef e6       	ldi	r30, 0x6F	; 111
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	86 60       	ori	r24, 0x06	; 6
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <PWM_Change>:
 16a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 16e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 172:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 176:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 17a:	08 95       	ret

0000017c <UART_Init>:
//interrupt config
uint8_t UART_Receive(){
	uint8_t pumpingEffort = UDR0;
	UART_Transmit(pumpingEffort + 48);
	return pumpingEffort;
}
 17c:	e5 ec       	ldi	r30, 0xC5	; 197
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	20 81       	ld	r18, Z
 182:	92 2b       	or	r25, r18
 184:	90 83       	st	Z, r25
 186:	e4 ec       	ldi	r30, 0xC4	; 196
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	90 81       	ld	r25, Z
 18c:	89 2b       	or	r24, r25
 18e:	80 83       	st	Z, r24
 190:	e1 ec       	ldi	r30, 0xC1	; 193
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	89 60       	ori	r24, 0x09	; 9
 198:	80 83       	st	Z, r24
 19a:	e2 ec       	ldi	r30, 0xC2	; 194
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	86 60       	ori	r24, 0x06	; 6
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <UART_Transmit>:
 1a6:	e0 ec       	ldi	r30, 0xC0	; 192
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	90 81       	ld	r25, Z
 1ac:	99 23       	and	r25, r25
 1ae:	e9 f3       	breq	.-6      	; 0x1aa <UART_Transmit+0x4>
 1b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b4:	08 95       	ret

000001b6 <UART_InterpretPumpingEffort>:

void UART_InterpretPumpingEffort(){
	pumpingEffort = 1; //mock pumping effort
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <pumpingEffort>
	if(pumpingEffort==0){ //turn off mode 
 1bc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pumpingEffort>
 1c0:	81 11       	cpse	r24, r1
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <UART_InterpretPumpingEffort+0x1a>
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
 1c4:	e4 e6       	ldi	r30, 0x64	; 100
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	8f 6e       	ori	r24, 0xEF	; 239
 1cc:	80 83       	st	Z, r24
 1ce:	19 c0       	rjmp	.+50     	; 0x202 <UART_InterpretPumpingEffort+0x4c>
		power_all_disable(); //disables all modules on the microcontroller 
		//power_usart_enable(); //enable UART for communication to see when to turn back on
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){
 1d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pumpingEffort>
 1d4:	88 23       	and	r24, r24
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <UART_InterpretPumpingEffort+0x32>
 1d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pumpingEffort>
 1dc:	83 3b       	cpi	r24, 0xB3	; 179
 1de:	20 f4       	brcc	.+8      	; 0x1e8 <UART_InterpretPumpingEffort+0x32>
		//70% of values - care about efficiency and meeting pumpingEffort
		//efficiency actions turn two switches off
		//disable all unused modules
		//dutyCycle = (PROPORTIONALITY_CONSTANT* MAX_LOW_POWER * (pumpingEffort/178))/(10000*1000);	//10000 and 1000 are because we didnt use floats [integer overflow error here]
		lowPowerMode = true;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <lowPowerMode>
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <UART_InterpretPumpingEffort+0x4c>
						 
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){
 1e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pumpingEffort>
 1ec:	83 3b       	cpi	r24, 0xB3	; 179
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <UART_InterpretPumpingEffort+0x48>
 1f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pumpingEffort>
 1f4:	8f 3f       	cpi	r24, 0xFF	; 255
 1f6:	19 f0       	breq	.+6      	; 0x1fe <UART_InterpretPumpingEffort+0x48>
		//30% of values - go ham fam
		lowPowerMode = false;
 1f8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lowPowerMode>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <UART_InterpretPumpingEffort+0x4c>
	}else{ //255 lose your mind
		//change duty cycle and pwm to max out the motor
		lowPowerMode = false;
 1fe:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lowPowerMode>
	}
	changePumpingEffort = false;
 202:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <changePumpingEffort>
 206:	08 95       	ret

00000208 <MFCmodulator>:
	ERRORmodulator(errorClear, jamErrorFlag, collisionErrorFlag);

}


void MFCmodulator(uint8_t requiredValue, uint8_t currentValue){
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	18 2f       	mov	r17, r24
 218:	d6 2f       	mov	r29, r22
	//temp conversion variables. Used to split 3 digit numbers as only one digit can be sent at a time
	uint8_t firstDigit = 0;
	uint8_t secondDigit = 0;
	uint8_t thirdDigit = 0;
	
	UART_Transmit(13); //carriage return
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(123); //{
 220:	8b e7       	ldi	r24, 0x7B	; 123
 222:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(10); //line feed 
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(13); //carriage return
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	
	//LCC Identifier 
	UART_Transmit(34); //"
 232:	82 e2       	ldi	r24, 0x22	; 34
 234:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(51);//3
 238:	83 e3       	ldi	r24, 0x33	; 51
 23a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 23e:	82 e2       	ldi	r24, 0x22	; 34
 240:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58);//:
 244:	8a e3       	ldi	r24, 0x3A	; 58
 246:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>

	//MFC 
	UART_Transmit(10); //Line feed
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(13); //carriage return
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(123); //{
 256:	8b e7       	ldi	r24, 0x7B	; 123
 258:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(10); //Line feed
 25c:	8a e0       	ldi	r24, 0x0A	; 10
 25e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(13); //carriage return
 262:	8d e0       	ldi	r24, 0x0D	; 13
 264:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	
	
	//MFC letter setup
	UART_Transmit(34); //'
 268:	82 e2       	ldi	r24, 0x22	; 34
 26a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(109);//m
 26e:	8d e6       	ldi	r24, 0x6D	; 109
 270:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(102);//f
 274:	86 e6       	ldi	r24, 0x66	; 102
 276:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(99);//c
 27a:	83 e6       	ldi	r24, 0x63	; 99
 27c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 280:	82 e2       	ldi	r24, 0x22	; 34
 282:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58);//:
 286:	8a e3       	ldi	r24, 0x3A	; 58
 288:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	 

	//MFC Values 
	UART_Transmit(123); //{
 28c:	8b e7       	ldi	r24, 0x7B	; 123
 28e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34); //"
 292:	82 e2       	ldi	r24, 0x22	; 34
 294:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(114);//r
 298:	82 e7       	ldi	r24, 0x72	; 114
 29a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(101);//e
 29e:	85 e6       	ldi	r24, 0x65	; 101
 2a0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(113);//q
 2a4:	81 e7       	ldi	r24, 0x71	; 113
 2a6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 2aa:	82 e2       	ldi	r24, 0x22	; 34
 2ac:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58);//:
 2b0:	8a e3       	ldi	r24, 0x3A	; 58
 2b2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 2b6:	82 e2       	ldi	r24, 0x22	; 34
 2b8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	
	//required value transmission
	firstDigit = requiredValue/100;
 2bc:	c9 e2       	ldi	r28, 0x29	; 41
 2be:	1c 9f       	mul	r17, r28
 2c0:	21 2d       	mov	r18, r1
 2c2:	11 24       	eor	r1, r1
 2c4:	22 95       	swap	r18
 2c6:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (requiredValue-(firstDigit*100))/10;
 2c8:	0c e9       	ldi	r16, 0x9C	; 156
 2ca:	02 03       	mulsu	r16, r18
 2cc:	c0 01       	movw	r24, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	81 0f       	add	r24, r17
 2d2:	91 1d       	adc	r25, r1
 2d4:	0f 2e       	mov	r0, r31
 2d6:	fa e0       	ldi	r31, 0x0A	; 10
 2d8:	ef 2e       	mov	r14, r31
 2da:	f1 2c       	mov	r15, r1
 2dc:	f0 2d       	mov	r31, r0
 2de:	b7 01       	movw	r22, r14
 2e0:	0e 94 12 07 	call	0xe24	; 0xe24 <__divmodhi4>
 2e4:	d6 2e       	mov	r13, r22
	thirdDigit = requiredValue - (firstDigit*100) - (secondDigit*10);
 2e6:	20 9f       	mul	r18, r16
 2e8:	10 0d       	add	r17, r0
 2ea:	11 24       	eor	r1, r1
 2ec:	96 2f       	mov	r25, r22
 2ee:	99 0f       	add	r25, r25
 2f0:	89 2f       	mov	r24, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	88 0f       	add	r24, r24
 2f6:	89 0f       	add	r24, r25
 2f8:	18 1b       	sub	r17, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 2fa:	82 2f       	mov	r24, r18
 2fc:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 300:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit)); 
 304:	8d 2d       	mov	r24, r13
 306:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 30a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 30e:	81 2f       	mov	r24, r17
 310:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 314:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 318:	82 e2       	ldi	r24, 0x22	; 34
 31a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(44);//,
 31e:	8c e2       	ldi	r24, 0x2C	; 44
 320:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	

	UART_Transmit(34);//"
 324:	82 e2       	ldi	r24, 0x22	; 34
 326:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(99);//c
 32a:	83 e6       	ldi	r24, 0x63	; 99
 32c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(117);//u
 330:	85 e7       	ldi	r24, 0x75	; 117
 332:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(114);//r
 336:	82 e7       	ldi	r24, 0x72	; 114
 338:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 33c:	82 e2       	ldi	r24, 0x22	; 34
 33e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58);//:
 342:	8a e3       	ldi	r24, 0x3A	; 58
 344:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 348:	82 e2       	ldi	r24, 0x22	; 34
 34a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	//current value transmission
	firstDigit = currentValue/100;
 34e:	dc 9f       	mul	r29, r28
 350:	21 2d       	mov	r18, r1
 352:	11 24       	eor	r1, r1
 354:	22 95       	swap	r18
 356:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (currentValue-(firstDigit*100))/10;
 358:	02 03       	mulsu	r16, r18
 35a:	c0 01       	movw	r24, r0
 35c:	11 24       	eor	r1, r1
 35e:	8d 0f       	add	r24, r29
 360:	91 1d       	adc	r25, r1
 362:	b7 01       	movw	r22, r14
 364:	0e 94 12 07 	call	0xe24	; 0xe24 <__divmodhi4>
 368:	c6 2f       	mov	r28, r22
	thirdDigit = currentValue - (firstDigit*100) - (secondDigit*10);
 36a:	20 9f       	mul	r18, r16
 36c:	d0 0d       	add	r29, r0
 36e:	11 24       	eor	r1, r1
 370:	96 2f       	mov	r25, r22
 372:	99 0f       	add	r25, r25
 374:	89 2f       	mov	r24, r25
 376:	88 0f       	add	r24, r24
 378:	88 0f       	add	r24, r24
 37a:	89 0f       	add	r24, r25
 37c:	d8 1b       	sub	r29, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 37e:	82 2f       	mov	r24, r18
 380:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 384:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 388:	8c 2f       	mov	r24, r28
 38a:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 38e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 392:	8d 2f       	mov	r24, r29
 394:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 398:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	
	UART_Transmit(34);//"
 39c:	82 e2       	ldi	r24, 0x22	; 34
 39e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(125);//}
 3a2:	8d e7       	ldi	r24, 0x7D	; 125
 3a4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(44);//,
 3a8:	8c e2       	ldi	r24, 0x2C	; 44
 3aa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(10); //Line feed
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(13); //carriage return
 3b4:	8d e0       	ldi	r24, 0x0D	; 13
 3b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	 
	
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	df 90       	pop	r13
 3c8:	08 95       	ret

000003ca <VERmodulator>:

void VERmodulator(){
	UART_Transmit(34); //"
 3ca:	82 e2       	ldi	r24, 0x22	; 34
 3cc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(118);//v
 3d0:	86 e7       	ldi	r24, 0x76	; 118
 3d2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(101);//e
 3d6:	85 e6       	ldi	r24, 0x65	; 101
 3d8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(114);//r
 3dc:	82 e7       	ldi	r24, 0x72	; 114
 3de:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 3e2:	82 e2       	ldi	r24, 0x22	; 34
 3e4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58);//:
 3e8:	8a e3       	ldi	r24, 0x3A	; 58
 3ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 3ee:	82 e2       	ldi	r24, 0x22	; 34
 3f0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(49); //1
 3f4:	81 e3       	ldi	r24, 0x31	; 49
 3f6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(46);//.
 3fa:	8e e2       	ldi	r24, 0x2E	; 46
 3fc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(50);//2
 400:	82 e3       	ldi	r24, 0x32	; 50
 402:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(46);//.
 406:	8e e2       	ldi	r24, 0x2E	; 46
 408:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(51);//3
 40c:	83 e3       	ldi	r24, 0x33	; 51
 40e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 412:	82 e2       	ldi	r24, 0x22	; 34
 414:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(44); //,
 418:	8c e2       	ldi	r24, 0x2C	; 44
 41a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(10); //Line feed 
 41e:	8a e0       	ldi	r24, 0x0A	; 10
 420:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(13); //carriage return
 424:	8d e0       	ldi	r24, 0x0D	; 13
 426:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
 42a:	08 95       	ret

0000042c <PARAMmodulator>:
	 
}

void PARAMmodulator(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current){
 42c:	8f 92       	push	r8
 42e:	9f 92       	push	r9
 430:	af 92       	push	r10
 432:	bf 92       	push	r11
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	d8 2f       	mov	r29, r24
 446:	96 2e       	mov	r9, r22
 448:	69 01       	movw	r12, r18
 44a:	7a 01       	movw	r14, r20
	uint8_t firstDigit; 
	uint8_t secondDigit;
	uint8_t thirdDigit;
	uint8_t fourthDigit;
	UART_Transmit(34);//"
 44c:	82 e2       	ldi	r24, 0x22	; 34
 44e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(112);//p
 452:	80 e7       	ldi	r24, 0x70	; 112
 454:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(97);//a
 458:	81 e6       	ldi	r24, 0x61	; 97
 45a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(114);//r
 45e:	82 e7       	ldi	r24, 0x72	; 114
 460:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(97);//a
 464:	81 e6       	ldi	r24, 0x61	; 97
 466:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(109);//m
 46a:	8d e6       	ldi	r24, 0x6D	; 109
 46c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 470:	82 e2       	ldi	r24, 0x22	; 34
 472:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58);//:
 476:	8a e3       	ldi	r24, 0x3A	; 58
 478:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(123);//{
 47c:	8b e7       	ldi	r24, 0x7B	; 123
 47e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	
	//parameters
	
	UART_Transmit(34); //"
 482:	82 e2       	ldi	r24, 0x22	; 34
 484:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(112); //p
 488:	80 e7       	ldi	r24, 0x70	; 112
 48a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(119); //w
 48e:	87 e7       	ldi	r24, 0x77	; 119
 490:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(114);//r 
 494:	82 e7       	ldi	r24, 0x72	; 114
 496:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34); //"
 49a:	82 e2       	ldi	r24, 0x22	; 34
 49c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58); //:
 4a0:	8a e3       	ldi	r24, 0x3A	; 58
 4a2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 4a6:	82 e2       	ldi	r24, 0x22	; 34
 4a8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	
	//power parameters 
	firstDigit = averagePower/100;
 4ac:	c9 e2       	ldi	r28, 0x29	; 41
 4ae:	dc 9f       	mul	r29, r28
 4b0:	21 2d       	mov	r18, r1
 4b2:	11 24       	eor	r1, r1
 4b4:	22 95       	swap	r18
 4b6:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (averagePower-(firstDigit*100))/10;
 4b8:	1c e9       	ldi	r17, 0x9C	; 156
 4ba:	12 03       	mulsu	r17, r18
 4bc:	c0 01       	movw	r24, r0
 4be:	11 24       	eor	r1, r1
 4c0:	8d 0f       	add	r24, r29
 4c2:	91 1d       	adc	r25, r1
 4c4:	0f 2e       	mov	r0, r31
 4c6:	fa e0       	ldi	r31, 0x0A	; 10
 4c8:	af 2e       	mov	r10, r31
 4ca:	b1 2c       	mov	r11, r1
 4cc:	f0 2d       	mov	r31, r0
 4ce:	b5 01       	movw	r22, r10
 4d0:	0e 94 12 07 	call	0xe24	; 0xe24 <__divmodhi4>
 4d4:	86 2e       	mov	r8, r22
	thirdDigit = averagePower - (firstDigit*100) - (secondDigit*10);
 4d6:	21 9f       	mul	r18, r17
 4d8:	d0 0d       	add	r29, r0
 4da:	11 24       	eor	r1, r1
 4dc:	96 2f       	mov	r25, r22
 4de:	99 0f       	add	r25, r25
 4e0:	89 2f       	mov	r24, r25
 4e2:	88 0f       	add	r24, r24
 4e4:	88 0f       	add	r24, r24
 4e6:	89 0f       	add	r24, r25
 4e8:	d8 1b       	sub	r29, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 4ea:	82 2f       	mov	r24, r18
 4ec:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 4f0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 4f4:	88 2d       	mov	r24, r8
 4f6:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 4fa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(46); //decimal point
 4fe:	8e e2       	ldi	r24, 0x2E	; 46
 500:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 504:	8d 2f       	mov	r24, r29
 506:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 50a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(87); //W
 50e:	87 e5       	ldi	r24, 0x57	; 87
 510:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34); //"
 514:	82 e2       	ldi	r24, 0x22	; 34
 516:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(44); //,
 51a:	8c e2       	ldi	r24, 0x2C	; 44
 51c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	 
	 
	
	//frequency
	UART_Transmit(34); //"
 520:	82 e2       	ldi	r24, 0x22	; 34
 522:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(102);//f
 526:	86 e6       	ldi	r24, 0x66	; 102
 528:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(114);//r
 52c:	82 e7       	ldi	r24, 0x72	; 114
 52e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(101);//e
 532:	85 e6       	ldi	r24, 0x65	; 101
 534:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(113);//q
 538:	81 e7       	ldi	r24, 0x71	; 113
 53a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 53e:	82 e2       	ldi	r24, 0x22	; 34
 540:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58);//:
 544:	8a e3       	ldi	r24, 0x3A	; 58
 546:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 54a:	82 e2       	ldi	r24, 0x22	; 34
 54c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	firstDigit = operatingFrequency/10;
 550:	8d ec       	ldi	r24, 0xCD	; 205
 552:	98 9e       	mul	r9, r24
 554:	81 2d       	mov	r24, r1
 556:	11 24       	eor	r1, r1
 558:	86 95       	lsr	r24
 55a:	86 95       	lsr	r24
 55c:	86 95       	lsr	r24
	secondDigit = operatingFrequency-(firstDigit*10);
 55e:	28 2f       	mov	r18, r24
 560:	22 0f       	add	r18, r18
 562:	92 2f       	mov	r25, r18
 564:	99 0f       	add	r25, r25
 566:	99 0f       	add	r25, r25
 568:	92 0f       	add	r25, r18
 56a:	99 1a       	sub	r9, r25
	UART_Transmit(ASCIIConversion(firstDigit));
 56c:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 570:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 574:	89 2d       	mov	r24, r9
 576:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 57a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(72); //H
 57e:	88 e4       	ldi	r24, 0x48	; 72
 580:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(122);//z
 584:	8a e7       	ldi	r24, 0x7A	; 122
 586:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 58a:	82 e2       	ldi	r24, 0x22	; 34
 58c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(44);//,
 590:	8c e2       	ldi	r24, 0x2C	; 44
 592:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	
	//current 

	UART_Transmit(34); //"
 596:	82 e2       	ldi	r24, 0x22	; 34
 598:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(99); //c
 59c:	83 e6       	ldi	r24, 0x63	; 99
 59e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(117); //u
 5a2:	85 e7       	ldi	r24, 0x75	; 117
 5a4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(114);//r
 5a8:	82 e7       	ldi	r24, 0x72	; 114
 5aa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(114);//r
 5ae:	82 e7       	ldi	r24, 0x72	; 114
 5b0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34); //"
 5b4:	82 e2       	ldi	r24, 0x22	; 34
 5b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58); //:
 5ba:	8a e3       	ldi	r24, 0x3A	; 58
 5bc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34);//"
 5c0:	82 e2       	ldi	r24, 0x22	; 34
 5c2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	firstDigit = current/100;
 5c6:	0c 9f       	mul	r16, r28
 5c8:	21 2d       	mov	r18, r1
 5ca:	11 24       	eor	r1, r1
 5cc:	22 95       	swap	r18
 5ce:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (current-(firstDigit*100))/10;
 5d0:	12 03       	mulsu	r17, r18
 5d2:	c0 01       	movw	r24, r0
 5d4:	11 24       	eor	r1, r1
 5d6:	80 0f       	add	r24, r16
 5d8:	91 1d       	adc	r25, r1
 5da:	b5 01       	movw	r22, r10
 5dc:	0e 94 12 07 	call	0xe24	; 0xe24 <__divmodhi4>
 5e0:	c6 2f       	mov	r28, r22
	thirdDigit = current - (firstDigit*100) - (secondDigit*10);
 5e2:	21 9f       	mul	r18, r17
 5e4:	00 0d       	add	r16, r0
 5e6:	11 24       	eor	r1, r1
 5e8:	96 2f       	mov	r25, r22
 5ea:	99 0f       	add	r25, r25
 5ec:	89 2f       	mov	r24, r25
 5ee:	88 0f       	add	r24, r24
 5f0:	88 0f       	add	r24, r24
 5f2:	89 0f       	add	r24, r25
 5f4:	08 1b       	sub	r16, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 5f6:	82 2f       	mov	r24, r18
 5f8:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 5fc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 600:	8c 2f       	mov	r24, r28
 602:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 606:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 60a:	80 2f       	mov	r24, r16
 60c:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 610:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(109); //m
 614:	8d e6       	ldi	r24, 0x6D	; 109
 616:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(65); //A
 61a:	81 e4       	ldi	r24, 0x41	; 65
 61c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34); //"
 620:	82 e2       	ldi	r24, 0x22	; 34
 622:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(44); //,
 626:	8c e2       	ldi	r24, 0x2C	; 44
 628:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	
	//applied voltage
	 
	UART_Transmit(34); //"
 62c:	82 e2       	ldi	r24, 0x22	; 34
 62e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(118); //v
 632:	86 e7       	ldi	r24, 0x76	; 118
 634:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(111); //o
 638:	8f e6       	ldi	r24, 0x6F	; 111
 63a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(108); //l
 63e:	8c e6       	ldi	r24, 0x6C	; 108
 640:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(116); //t
 644:	84 e7       	ldi	r24, 0x74	; 116
 646:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34); //"
 64a:	82 e2       	ldi	r24, 0x22	; 34
 64c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(58); //:
 650:	8a e3       	ldi	r24, 0x3A	; 58
 652:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34); //"
 656:	82 e2       	ldi	r24, 0x22	; 34
 658:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	firstDigit = appliedVoltage/1000;
 65c:	c7 01       	movw	r24, r14
 65e:	b6 01       	movw	r22, r12
 660:	28 ee       	ldi	r18, 0xE8	; 232
 662:	33 e0       	ldi	r19, 0x03	; 3
 664:	40 e0       	ldi	r20, 0x00	; 0
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	0e 94 26 07 	call	0xe4c	; 0xe4c <__udivmodsi4>
 66c:	d2 2f       	mov	r29, r18
	secondDigit = (appliedVoltage-(firstDigit*1000))/100;
 66e:	28 ee       	ldi	r18, 0xE8	; 232
 670:	33 e0       	ldi	r19, 0x03	; 3
 672:	d2 9f       	mul	r29, r18
 674:	c0 01       	movw	r24, r0
 676:	d3 9f       	mul	r29, r19
 678:	90 0d       	add	r25, r0
 67a:	11 24       	eor	r1, r1
 67c:	09 2e       	mov	r0, r25
 67e:	00 0c       	add	r0, r0
 680:	aa 0b       	sbc	r26, r26
 682:	bb 0b       	sbc	r27, r27
 684:	46 01       	movw	r8, r12
 686:	57 01       	movw	r10, r14
 688:	88 1a       	sub	r8, r24
 68a:	99 0a       	sbc	r9, r25
 68c:	aa 0a       	sbc	r10, r26
 68e:	bb 0a       	sbc	r11, r27
 690:	c5 01       	movw	r24, r10
 692:	b4 01       	movw	r22, r8
 694:	24 e6       	ldi	r18, 0x64	; 100
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	40 e0       	ldi	r20, 0x00	; 0
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	0e 94 26 07 	call	0xe4c	; 0xe4c <__udivmodsi4>
 6a0:	c2 2f       	mov	r28, r18
	thirdDigit = (appliedVoltage - (firstDigit*1000) - (secondDigit*100))/10;
 6a2:	14 e6       	ldi	r17, 0x64	; 100
 6a4:	12 9f       	mul	r17, r18
 6a6:	c0 01       	movw	r24, r0
 6a8:	11 24       	eor	r1, r1
 6aa:	09 2e       	mov	r0, r25
 6ac:	00 0c       	add	r0, r0
 6ae:	aa 0b       	sbc	r26, r26
 6b0:	bb 0b       	sbc	r27, r27
 6b2:	a5 01       	movw	r20, r10
 6b4:	94 01       	movw	r18, r8
 6b6:	28 1b       	sub	r18, r24
 6b8:	39 0b       	sbc	r19, r25
 6ba:	4a 0b       	sbc	r20, r26
 6bc:	5b 0b       	sbc	r21, r27
 6be:	ca 01       	movw	r24, r20
 6c0:	b9 01       	movw	r22, r18
 6c2:	2a e0       	ldi	r18, 0x0A	; 10
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	50 e0       	ldi	r21, 0x00	; 0
 6ca:	0e 94 26 07 	call	0xe4c	; 0xe4c <__udivmodsi4>
 6ce:	02 2f       	mov	r16, r18
	fourthDigit = appliedVoltage -(firstDigit*1000) - (secondDigit*100) - (thirdDigit*10);
 6d0:	38 e1       	ldi	r19, 0x18	; 24
 6d2:	d3 9f       	mul	r29, r19
 6d4:	c0 0c       	add	r12, r0
 6d6:	11 24       	eor	r1, r1
 6d8:	1c 9f       	mul	r17, r28
 6da:	c0 18       	sub	r12, r0
 6dc:	11 24       	eor	r1, r1
 6de:	90 2f       	mov	r25, r16
 6e0:	99 0f       	add	r25, r25
 6e2:	89 2f       	mov	r24, r25
 6e4:	88 0f       	add	r24, r24
 6e6:	88 0f       	add	r24, r24
 6e8:	89 0f       	add	r24, r25
 6ea:	c8 1a       	sub	r12, r24
	UART_Transmit(ASCIIConversion(firstDigit));
 6ec:	8d 2f       	mov	r24, r29
 6ee:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 6f2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(secondDigit));
 6f6:	8c 2f       	mov	r24, r28
 6f8:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 6fc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(46); //decimal point
 700:	8e e2       	ldi	r24, 0x2E	; 46
 702:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(thirdDigit));
 706:	80 2f       	mov	r24, r16
 708:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 70c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(ASCIIConversion(fourthDigit));
 710:	8c 2d       	mov	r24, r12
 712:	0e 94 98 05 	call	0xb30	; 0xb30 <ASCIIConversion>
 716:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(86); //V
 71a:	86 e5       	ldi	r24, 0x56	; 86
 71c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(34); //"
 720:	82 e2       	ldi	r24, 0x22	; 34
 722:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	
	 
	UART_Transmit(125); //}
 726:	8d e7       	ldi	r24, 0x7D	; 125
 728:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(44);//,
 72c:	8c e2       	ldi	r24, 0x2C	; 44
 72e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(10); //line feed
 732:	8a e0       	ldi	r24, 0x0A	; 10
 734:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(13); //carriage return
 738:	8d e0       	ldi	r24, 0x0D	; 13
 73a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	 
}
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	1f 91       	pop	r17
 744:	0f 91       	pop	r16
 746:	ff 90       	pop	r15
 748:	ef 90       	pop	r14
 74a:	df 90       	pop	r13
 74c:	cf 90       	pop	r12
 74e:	bf 90       	pop	r11
 750:	af 90       	pop	r10
 752:	9f 90       	pop	r9
 754:	8f 90       	pop	r8
 756:	08 95       	ret

00000758 <ERRORmodulator>:



void ERRORmodulator(bool errorClear,bool jamErrorFlag, bool collisionErrorFlag){  
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	c6 2f       	mov	r28, r22
 75e:	d4 2f       	mov	r29, r20
	//error clear tells us whether we need to clear the error array
	if(!errorClear){
 760:	81 11       	cpse	r24, r1
 762:	28 c0       	rjmp	.+80     	; 0x7b4 <ERRORmodulator+0x5c>
		UART_Transmit(34); //"
 764:	82 e2       	ldi	r24, 0x22	; 34
 766:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(99); //c
 76a:	83 e6       	ldi	r24, 0x63	; 99
 76c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(108); //l
 770:	8c e6       	ldi	r24, 0x6C	; 108
 772:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(114); //r
 776:	82 e7       	ldi	r24, 0x72	; 114
 778:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(34); //"
 77c:	82 e2       	ldi	r24, 0x22	; 34
 77e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(58); //:
 782:	8a e3       	ldi	r24, 0x3A	; 58
 784:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(34); //"
 788:	82 e2       	ldi	r24, 0x22	; 34
 78a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(101); //e
 78e:	85 e6       	ldi	r24, 0x65	; 101
 790:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(119); //w
 794:	87 e7       	ldi	r24, 0x77	; 119
 796:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(34); //"
 79a:	82 e2       	ldi	r24, 0x22	; 34
 79c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(44); //,
 7a0:	8c e2       	ldi	r24, 0x2C	; 44
 7a2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(10); //line feed
 7a6:	8a e0       	ldi	r24, 0x0A	; 10
 7a8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(13); //carriage return
 7ac:	8d e0       	ldi	r24, 0x0D	; 13
 7ae:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
 7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <ERRORmodulator+0x68>
	}else{
		UART_Transmit(10); //line feed
 7b4:	8a e0       	ldi	r24, 0x0A	; 10
 7b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(13); //carriage return
 7ba:	8d e0       	ldi	r24, 0x0D	; 13
 7bc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	}
	
	if(collisionErrorFlag || jamErrorFlag) {
 7c0:	d1 11       	cpse	r29, r1
 7c2:	7c c0       	rjmp	.+248    	; 0x8bc <ERRORmodulator+0x164>
 7c4:	c1 11       	cpse	r28, r1
 7c6:	45 c0       	rjmp	.+138    	; 0x852 <ERRORmodulator+0xfa>
 7c8:	25 c0       	rjmp	.+74     	; 0x814 <ERRORmodulator+0xbc>
				UART_Transmit(44); //,
			}
		}

		if(collisionErrorFlag){ //compressor colliding
			UART_Transmit(34); //"
 7ca:	82 e2       	ldi	r24, 0x22	; 34
 7cc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(99); //c
 7d0:	83 e6       	ldi	r24, 0x63	; 99
 7d2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(111); //o
 7d6:	8f e6       	ldi	r24, 0x6F	; 111
 7d8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(108); //l
 7dc:	8c e6       	ldi	r24, 0x6C	; 108
 7de:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(108); //l
 7e2:	8c e6       	ldi	r24, 0x6C	; 108
 7e4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(105); //i
 7e8:	89 e6       	ldi	r24, 0x69	; 105
 7ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(115); //s
 7ee:	83 e7       	ldi	r24, 0x73	; 115
 7f0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(105); //i
 7f4:	89 e6       	ldi	r24, 0x69	; 105
 7f6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(111); //o
 7fa:	8f e6       	ldi	r24, 0x6F	; 111
 7fc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(110); //n
 800:	8e e6       	ldi	r24, 0x6E	; 110
 802:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(34); //"
 806:	82 e2       	ldi	r24, 0x22	; 34
 808:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		}
			
			
		UART_Transmit(93); //[
 80c:	8d e5       	ldi	r24, 0x5D	; 93
 80e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
 812:	06 c0       	rjmp	.+12     	; 0x820 <ERRORmodulator+0xc8>
		
	}else{ //no errors present
		UART_Transmit(10); //line feed
 814:	8a e0       	ldi	r24, 0x0A	; 10
 816:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(13); //carriage return
 81a:	8d e0       	ldi	r24, 0x0D	; 13
 81c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	}
	
	
	//print final curly brackets
	
	UART_Transmit(10); //line feed
 820:	8a e0       	ldi	r24, 0x0A	; 10
 822:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(13); //carriage return
 826:	8d e0       	ldi	r24, 0x0D	; 13
 828:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(125); // }
 82c:	8d e7       	ldi	r24, 0x7D	; 125
 82e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(10); //line feed
 832:	8a e0       	ldi	r24, 0x0A	; 10
 834:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(13); //carriage return
 838:	8d e0       	ldi	r24, 0x0D	; 13
 83a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(125); // }
 83e:	8d e7       	ldi	r24, 0x7D	; 125
 840:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(10); //line feed
 844:	8a e0       	ldi	r24, 0x0A	; 10
 846:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
	UART_Transmit(13); //carriage return
 84a:	8d e0       	ldi	r24, 0x0D	; 13
 84c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>


 850:	4b c0       	rjmp	.+150    	; 0x8e8 <ERRORmodulator+0x190>
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
	}
	
	if(collisionErrorFlag || jamErrorFlag) {
		UART_Transmit(34); //'
 852:	82 e2       	ldi	r24, 0x22	; 34
 854:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(101); //e
 858:	85 e6       	ldi	r24, 0x65	; 101
 85a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(119); //w
 85e:	87 e7       	ldi	r24, 0x77	; 119
 860:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(34); // "
 864:	82 e2       	ldi	r24, 0x22	; 34
 866:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(58); //:
 86a:	8a e3       	ldi	r24, 0x3A	; 58
 86c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(91); //[
 870:	8b e5       	ldi	r24, 0x5B	; 91
 872:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		//print errors
		
		if(jamErrorFlag){ //compressor jammed
			UART_Transmit(34); //"
 876:	82 e2       	ldi	r24, 0x22	; 34
 878:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(106); //j
 87c:	8a e6       	ldi	r24, 0x6A	; 106
 87e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(97); //a
 882:	81 e6       	ldi	r24, 0x61	; 97
 884:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(109); //m
 888:	8d e6       	ldi	r24, 0x6D	; 109
 88a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(34); //"
 88e:	82 e2       	ldi	r24, 0x22	; 34
 890:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
 894:	bb cf       	rjmp	.-138    	; 0x80c <ERRORmodulator+0xb4>
		UART_Transmit(58); //:
		UART_Transmit(91); //[
		//print errors
		
		if(jamErrorFlag){ //compressor jammed
			UART_Transmit(34); //"
 896:	82 e2       	ldi	r24, 0x22	; 34
 898:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(106); //j
 89c:	8a e6       	ldi	r24, 0x6A	; 106
 89e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(97); //a
 8a2:	81 e6       	ldi	r24, 0x61	; 97
 8a4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(109); //m
 8a8:	8d e6       	ldi	r24, 0x6D	; 109
 8aa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			UART_Transmit(34); //"
 8ae:	82 e2       	ldi	r24, 0x22	; 34
 8b0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
			if(jamErrorFlag && collisionErrorFlag){
				UART_Transmit(44); //,
 8b4:	8c e2       	ldi	r24, 0x2C	; 44
 8b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
 8ba:	87 cf       	rjmp	.-242    	; 0x7ca <ERRORmodulator+0x72>
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
	}
	
	if(collisionErrorFlag || jamErrorFlag) {
		UART_Transmit(34); //'
 8bc:	82 e2       	ldi	r24, 0x22	; 34
 8be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(101); //e
 8c2:	85 e6       	ldi	r24, 0x65	; 101
 8c4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(119); //w
 8c8:	87 e7       	ldi	r24, 0x77	; 119
 8ca:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(34); // "
 8ce:	82 e2       	ldi	r24, 0x22	; 34
 8d0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(58); //:
 8d4:	8a e3       	ldi	r24, 0x3A	; 58
 8d6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		UART_Transmit(91); //[
 8da:	8b e5       	ldi	r24, 0x5B	; 91
 8dc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Transmit>
		//print errors
		
		if(jamErrorFlag){ //compressor jammed
 8e0:	cc 23       	and	r28, r28
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <ERRORmodulator+0x18e>
 8e4:	72 cf       	rjmp	.-284    	; 0x7ca <ERRORmodulator+0x72>
 8e6:	d7 cf       	rjmp	.-82     	; 0x896 <ERRORmodulator+0x13e>
	UART_Transmit(125); // }
	UART_Transmit(10); //line feed
	UART_Transmit(13); //carriage return


 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	08 95       	ret

000008ee <UART_SendJson>:
		lowPowerMode = false;
	}
	changePumpingEffort = false;
}

void UART_SendJson(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current, bool errorClear,bool jamErrorFlag, bool collisionErrorFlag, uint8_t requiredValue, uint8_t currentValue){
 8ee:	4f 92       	push	r4
 8f0:	5f 92       	push	r5
 8f2:	6f 92       	push	r6
 8f4:	7f 92       	push	r7
 8f6:	8f 92       	push	r8
 8f8:	af 92       	push	r10
 8fa:	cf 92       	push	r12
 8fc:	ef 92       	push	r14
 8fe:	ff 92       	push	r15
 900:	0f 93       	push	r16
 902:	1f 93       	push	r17
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	cd b7       	in	r28, 0x3d	; 61
 90a:	de b7       	in	r29, 0x3e	; 62
 90c:	18 2f       	mov	r17, r24
 90e:	f6 2e       	mov	r15, r22
 910:	29 01       	movw	r4, r18
 912:	3a 01       	movw	r6, r20
 914:	88 2d       	mov	r24, r8
	MFCmodulator(requiredValue,currentValue);
 916:	68 89       	ldd	r22, Y+16	; 0x10
 918:	0e 94 04 01 	call	0x208	; 0x208 <MFCmodulator>
	VERmodulator();
 91c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <VERmodulator>
	PARAMmodulator(averagePower,operatingFrequency,appliedVoltage,current);
 920:	a3 01       	movw	r20, r6
 922:	92 01       	movw	r18, r4
 924:	6f 2d       	mov	r22, r15
 926:	81 2f       	mov	r24, r17
 928:	0e 94 16 02 	call	0x42c	; 0x42c <PARAMmodulator>
	ERRORmodulator(errorClear, jamErrorFlag, collisionErrorFlag);
 92c:	4a 2d       	mov	r20, r10
 92e:	6c 2d       	mov	r22, r12
 930:	8e 2d       	mov	r24, r14
 932:	0e 94 ac 03 	call	0x758	; 0x758 <ERRORmodulator>

}
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	1f 91       	pop	r17
 93c:	0f 91       	pop	r16
 93e:	ff 90       	pop	r15
 940:	ef 90       	pop	r14
 942:	cf 90       	pop	r12
 944:	af 90       	pop	r10
 946:	8f 90       	pop	r8
 948:	7f 90       	pop	r7
 94a:	6f 90       	pop	r6
 94c:	5f 90       	pop	r5
 94e:	4f 90       	pop	r4
 950:	08 95       	ret

00000952 <__vector_12>:
		 }
		 
	 }
 }

	 ISR(TIMER1_COMPB_vect){//TRIGGERS ON MATCH WITH OCRB REGISTER (OFF TIME)
 952:	1f 92       	push	r1
 954:	0f 92       	push	r0
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	0f 92       	push	r0
 95a:	11 24       	eor	r1, r1
 95c:	8f 93       	push	r24
 95e:	9f 93       	push	r25
		 if(isLHS || lowPowerMode){//LHS MOTION
 960:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 964:	81 11       	cpse	r24, r1
 966:	04 c0       	rjmp	.+8      	; 0x970 <__vector_12+0x1e>
 968:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lowPowerMode>
 96c:	88 23       	and	r24, r24
 96e:	51 f0       	breq	.+20     	; 0x984 <__vector_12+0x32>
			 if((~isDead) && (count <=noOfWaves)){
 970:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <isDead>
 974:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <count>
 978:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 97c:	89 17       	cp	r24, r25
 97e:	58 f0       	brcs	.+22     	; 0x996 <__vector_12+0x44>
				 PORTB &= ~(1 << PB1);
 980:	29 98       	cbi	0x05, 1	; 5
 982:	09 c0       	rjmp	.+18     	; 0x996 <__vector_12+0x44>
			 }
		 }
		 else{//RHS MOTION
			 if((~isDead) && (count <=noOfWaves)){
 984:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <isDead>
 988:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <count>
 98c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 990:	89 17       	cp	r24, r25
 992:	08 f0       	brcs	.+2      	; 0x996 <__vector_12+0x44>
				 PORTD &= ~(1 << PD6);
 994:	5e 98       	cbi	0x0b, 6	; 11
			 }
		 }
	 }
 996:	9f 91       	pop	r25
 998:	8f 91       	pop	r24
 99a:	0f 90       	pop	r0
 99c:	0f be       	out	0x3f, r0	; 63
 99e:	0f 90       	pop	r0
 9a0:	1f 90       	pop	r1
 9a2:	18 95       	reti

000009a4 <__vector_18>:



ISR(USART_RX_vect){
 9a4:	1f 92       	push	r1
 9a6:	0f 92       	push	r0
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	0f 92       	push	r0
 9ac:	11 24       	eor	r1, r1
	
}
 9ae:	0f 90       	pop	r0
 9b0:	0f be       	out	0x3f, r0	; 63
 9b2:	0f 90       	pop	r0
 9b4:	1f 90       	pop	r1
 9b6:	18 95       	reti

000009b8 <ConvertTimerValueToDutyCycle>:


uint8_t ConvertTimerValueToDutyCycle(){
	return ((dutyCycle*125)/100);
 9b8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 9bc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 9c0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 9c4:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 9c8:	ad e7       	ldi	r26, 0x7D	; 125
 9ca:	b0 e0       	ldi	r27, 0x00	; 0
 9cc:	0e 94 48 07 	call	0xe90	; 0xe90 <__muluhisi3>
 9d0:	24 e6       	ldi	r18, 0x64	; 100
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	40 e0       	ldi	r20, 0x00	; 0
 9d6:	50 e0       	ldi	r21, 0x00	; 0
 9d8:	0e 94 26 07 	call	0xe4c	; 0xe4c <__udivmodsi4>
 9dc:	82 2f       	mov	r24, r18
}
 9de:	08 95       	ret

000009e0 <CalculateDeadTime>:

uint16_t CalculateDeadTime(){
	return (((500/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; //in ms
 9e0:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frequency>
 9e4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <noOfWaves>
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	84 ef       	ldi	r24, 0xF4	; 244
 9ec:	91 e0       	ldi	r25, 0x01	; 1
 9ee:	0e 94 12 07 	call	0xe24	; 0xe24 <__divmodhi4>
 9f2:	62 1b       	sub	r22, r18
 9f4:	71 09       	sbc	r23, r1
}
 9f6:	8d e7       	ldi	r24, 0x7D	; 125
 9f8:	28 2f       	mov	r18, r24
 9fa:	26 9f       	mul	r18, r22
 9fc:	c0 01       	movw	r24, r0
 9fe:	27 9f       	mul	r18, r23
 a00:	90 0d       	add	r25, r0
 a02:	11 24       	eor	r1, r1
 a04:	08 95       	ret

00000a06 <__vector_11>:
volatile uint8_t appliedVoltage = 0;
volatile uint8_t averagePower = 0;

//adc arrays
 
 ISR(TIMER1_COMPA_vect){
 a06:	1f 92       	push	r1
 a08:	0f 92       	push	r0
 a0a:	0f b6       	in	r0, 0x3f	; 63
 a0c:	0f 92       	push	r0
 a0e:	11 24       	eor	r1, r1
 a10:	2f 93       	push	r18
 a12:	3f 93       	push	r19
 a14:	4f 93       	push	r20
 a16:	5f 93       	push	r21
 a18:	6f 93       	push	r22
 a1a:	7f 93       	push	r23
 a1c:	8f 93       	push	r24
 a1e:	9f 93       	push	r25
 a20:	af 93       	push	r26
 a22:	bf 93       	push	r27
 a24:	ef 93       	push	r30
 a26:	ff 93       	push	r31
	 if(isLHS || lowPowerMode){	//LHS MOTION
 a28:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 a2c:	81 11       	cpse	r24, r1
 a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__vector_11+0x32>
 a30:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lowPowerMode>
 a34:	88 23       	and	r24, r24
 a36:	c1 f1       	breq	.+112    	; 0xaa8 <__vector_11+0xa2>
		 if((count <= noOfWaves) && (!isDead)){//PRODUCING X NUMBER OF PWM OSCILLATIONS
 a38:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <count>
 a3c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 a40:	89 17       	cp	r24, r25
 a42:	68 f0       	brcs	.+26     	; 0xa5e <__vector_11+0x58>
 a44:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <isDead>
 a48:	81 11       	cpse	r24, r1
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <__vector_11+0x58>
			 PORTB |= (1<<PB1) | (1<< PB2); //turn RHS ON
 a4c:	85 b1       	in	r24, 0x05	; 5
 a4e:	86 60       	ori	r24, 0x06	; 6
 a50:	85 b9       	out	0x05, r24	; 5
			 count++;
 a52:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 a56:	8f 5f       	subi	r24, 0xFF	; 255
 a58:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count>
 a5c:	58 c0       	rjmp	.+176    	; 0xb0e <__vector_11+0x108>
		 }
		 else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 a5e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <count>
 a62:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 a66:	89 17       	cp	r24, r25
 a68:	a0 f4       	brcc	.+40     	; 0xa92 <__vector_11+0x8c>
			 PORTB &= ~(1<<PB1); //turn pmos off
 a6a:	29 98       	cbi	0x05, 1	; 5
			 PORTB &= ~(1<<PB2);//turn nmos off
 a6c:	2a 98       	cbi	0x05, 2	; 5
			 PWM_Change(CalculateDeadTime(),65535);
 a6e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <CalculateDeadTime>
 a72:	6f ef       	ldi	r22, 0xFF	; 255
 a74:	7f ef       	ldi	r23, 0xFF	; 255
 a76:	0e 94 b5 00 	call	0x16a	; 0x16a <PWM_Change>
			 if(!lowPowerMode){
 a7a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lowPowerMode>
 a7e:	81 11       	cpse	r24, r1
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <__vector_11+0x80>
				 isLHS = false;
 a82:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isLHS>
			 }
			 count = 0;
 a86:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <count>
			 isDead = true; //deadzone begins
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <isDead>
 a90:	3e c0       	rjmp	.+124    	; 0xb0e <__vector_11+0x108>
		 }
		 else{	//end of deadzone, set the pwm frequency back to normal
			 //TCCR1B &= ~(1<<CS11);
			 isDead = false;
 a92:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <isDead>
			 PWM_Change(125,ConvertTimerValueToDutyCycle());
 a96:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <ConvertTimerValueToDutyCycle>
 a9a:	68 2f       	mov	r22, r24
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	8d e7       	ldi	r24, 0x7D	; 125
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 b5 00 	call	0x16a	; 0x16a <PWM_Change>
 aa6:	33 c0       	rjmp	.+102    	; 0xb0e <__vector_11+0x108>
		 }
	 }
	 else{//RHS MOTION
		 if((count <= noOfWaves) && (!isDead)){
 aa8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <count>
 aac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 ab0:	89 17       	cp	r24, r25
 ab2:	68 f0       	brcs	.+26     	; 0xace <__vector_11+0xc8>
 ab4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <isDead>
 ab8:	81 11       	cpse	r24, r1
 aba:	09 c0       	rjmp	.+18     	; 0xace <__vector_11+0xc8>
			 PORTD |= (1<< PD6)|(1<<PD5); //NMOS and PMOS on
 abc:	8b b1       	in	r24, 0x0b	; 11
 abe:	80 66       	ori	r24, 0x60	; 96
 ac0:	8b b9       	out	0x0b, r24	; 11
			 count++;
 ac2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 ac6:	8f 5f       	subi	r24, 0xFF	; 255
 ac8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count>
 acc:	20 c0       	rjmp	.+64     	; 0xb0e <__vector_11+0x108>
		 }
		 else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 ace:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <count>
 ad2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 ad6:	89 17       	cp	r24, r25
 ad8:	80 f4       	brcc	.+32     	; 0xafa <__vector_11+0xf4>
			 PORTD &= ~(1<< PD6);
 ada:	5e 98       	cbi	0x0b, 6	; 11
			 PORTD &= ~(1<<PD5);
 adc:	5d 98       	cbi	0x0b, 5	; 11
			 PWM_Change(CalculateDeadTime(),65535); //apply deadzone
 ade:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <CalculateDeadTime>
 ae2:	6f ef       	ldi	r22, 0xFF	; 255
 ae4:	7f ef       	ldi	r23, 0xFF	; 255
 ae6:	0e 94 b5 00 	call	0x16a	; 0x16a <PWM_Change>
			 isLHS = true;
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isLHS>
			 count = 0;
 af0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <count>
			 isDead = true; //deadzone begins
 af4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <isDead>
 af8:	0a c0       	rjmp	.+20     	; 0xb0e <__vector_11+0x108>
		 }
		 else{	//end of deadzone, set the pwm frequency back to normal
			 //TCCR1B &= ~(1<<CS11);
			 isDead = false;
 afa:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <isDead>
			 PWM_Change(125,ConvertTimerValueToDutyCycle());
 afe:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <ConvertTimerValueToDutyCycle>
 b02:	68 2f       	mov	r22, r24
 b04:	70 e0       	ldi	r23, 0x00	; 0
 b06:	8d e7       	ldi	r24, 0x7D	; 125
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 b5 00 	call	0x16a	; 0x16a <PWM_Change>
		 }
		 
	 }
 }
 b0e:	ff 91       	pop	r31
 b10:	ef 91       	pop	r30
 b12:	bf 91       	pop	r27
 b14:	af 91       	pop	r26
 b16:	9f 91       	pop	r25
 b18:	8f 91       	pop	r24
 b1a:	7f 91       	pop	r23
 b1c:	6f 91       	pop	r22
 b1e:	5f 91       	pop	r21
 b20:	4f 91       	pop	r20
 b22:	3f 91       	pop	r19
 b24:	2f 91       	pop	r18
 b26:	0f 90       	pop	r0
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	0f 90       	pop	r0
 b2c:	1f 90       	pop	r1
 b2e:	18 95       	reti

00000b30 <ASCIIConversion>:
}

uint8_t ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
 b30:	80 5d       	subi	r24, 0xD0	; 208
 b32:	08 95       	ret

00000b34 <main>:
int main(void)
{	
	

	//clock_prescale_set(clock_div_2);
    sei();
 b34:	78 94       	sei
	UART_Init(UBRR_VALUE);
 b36:	83 e3       	ldi	r24, 0x33	; 51
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	0e 94 be 00 	call	0x17c	; 0x17c <UART_Init>
	ADC_Init();
 b3e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
 b42:	0e 94 aa 00 	call	0x154	; 0x154 <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 b46:	84 b1       	in	r24, 0x04	; 4
 b48:	86 60       	ori	r24, 0x06	; 6
 b4a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 b4c:	8a b1       	in	r24, 0x0a	; 10
 b4e:	80 66       	ori	r24, 0x60	; 96
 b50:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<PD3);
 b52:	53 9a       	sbi	0x0a, 3	; 10
			//currentIndex++;
		//}
		
		if(voltageLHSIndex < NUMBER_OF_SAMPLES){
			voltageLHS[voltageLHSIndex] = ADC_LHSVoltage();
			UART_SendJson(1, voltageLHSIndex, voltageLHS[voltageLHSIndex], 0, false, true, true, 120,123);
 b54:	cb e7       	ldi	r28, 0x7B	; 123
	//UART_SendJson(12, 15, voltage, 20, false, true, true, 120,123);

    while (1) 
    {
		
		if(changePumpingEffort){
 b56:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <changePumpingEffort>
 b5a:	88 23       	and	r24, r24
 b5c:	21 f0       	breq	.+8      	; 0xb66 <main+0x32>
			 UART_InterpretPumpingEffort();
 b5e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <UART_InterpretPumpingEffort>
			 ConvertTimerValueToDutyCycle();
 b62:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <ConvertTimerValueToDutyCycle>
			//current[currentIndex] = ADC_Current();
			//UART_SendJson(0, currentIndex, 0, current[currentIndex], false, true, true, 120,123);
			//currentIndex++;
		//}
		
		if(voltageLHSIndex < NUMBER_OF_SAMPLES){
 b66:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 b6a:	8a 30       	cpi	r24, 0x0A	; 10
 b6c:	a0 f7       	brcc	.-24     	; 0xb56 <main+0x22>
			voltageLHS[voltageLHSIndex] = ADC_LHSVoltage();
 b6e:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <__data_end>
 b72:	10 e0       	ldi	r17, 0x00	; 0
 b74:	0e 94 8e 00 	call	0x11c	; 0x11c <ADC_LHSVoltage>
 b78:	f8 01       	movw	r30, r16
 b7a:	e8 5e       	subi	r30, 0xE8	; 232
 b7c:	fe 4f       	sbci	r31, 0xFE	; 254
 b7e:	80 83       	st	Z, r24
			UART_SendJson(1, voltageLHSIndex, voltageLHS[voltageLHSIndex], 0, false, true, true, 120,123);
 b80:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	e8 5e       	subi	r30, 0xE8	; 232
 b88:	fe 4f       	sbci	r31, 0xFE	; 254
 b8a:	20 81       	ld	r18, Z
 b8c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__data_end>
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	40 e0       	ldi	r20, 0x00	; 0
 b94:	50 e0       	ldi	r21, 0x00	; 0
 b96:	cf 93       	push	r28
 b98:	0f 2e       	mov	r0, r31
 b9a:	f8 e7       	ldi	r31, 0x78	; 120
 b9c:	8f 2e       	mov	r8, r31
 b9e:	f0 2d       	mov	r31, r0
 ba0:	aa 24       	eor	r10, r10
 ba2:	a3 94       	inc	r10
 ba4:	cc 24       	eor	r12, r12
 ba6:	c3 94       	inc	r12
 ba8:	e1 2c       	mov	r14, r1
 baa:	00 e0       	ldi	r16, 0x00	; 0
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	0e 94 77 04 	call	0x8ee	; 0x8ee <UART_SendJson>
			if(voltageLHS[voltageLHSIndex]>100){
 bb2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 bb6:	f0 e0       	ldi	r31, 0x00	; 0
 bb8:	e8 5e       	subi	r30, 0xE8	; 232
 bba:	fe 4f       	sbci	r31, 0xFE	; 254
 bbc:	80 81       	ld	r24, Z
 bbe:	0f 90       	pop	r0
 bc0:	ca cf       	rjmp	.-108    	; 0xb56 <main+0x22>

00000bc2 <__fixsfsi>:
 bc2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fixunssfsi>
 bc6:	68 94       	set
 bc8:	b1 11       	cpse	r27, r1
 bca:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_szero>
 bce:	08 95       	ret

00000bd0 <__fixunssfsi>:
 bd0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_splitA>
 bd4:	88 f0       	brcs	.+34     	; 0xbf8 <__fixunssfsi+0x28>
 bd6:	9f 57       	subi	r25, 0x7F	; 127
 bd8:	98 f0       	brcs	.+38     	; 0xc00 <__fixunssfsi+0x30>
 bda:	b9 2f       	mov	r27, r25
 bdc:	99 27       	eor	r25, r25
 bde:	b7 51       	subi	r27, 0x17	; 23
 be0:	b0 f0       	brcs	.+44     	; 0xc0e <__fixunssfsi+0x3e>
 be2:	e1 f0       	breq	.+56     	; 0xc1c <__fixunssfsi+0x4c>
 be4:	66 0f       	add	r22, r22
 be6:	77 1f       	adc	r23, r23
 be8:	88 1f       	adc	r24, r24
 bea:	99 1f       	adc	r25, r25
 bec:	1a f0       	brmi	.+6      	; 0xbf4 <__fixunssfsi+0x24>
 bee:	ba 95       	dec	r27
 bf0:	c9 f7       	brne	.-14     	; 0xbe4 <__fixunssfsi+0x14>
 bf2:	14 c0       	rjmp	.+40     	; 0xc1c <__fixunssfsi+0x4c>
 bf4:	b1 30       	cpi	r27, 0x01	; 1
 bf6:	91 f0       	breq	.+36     	; 0xc1c <__fixunssfsi+0x4c>
 bf8:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_zero>
 bfc:	b1 e0       	ldi	r27, 0x01	; 1
 bfe:	08 95       	ret
 c00:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_zero>
 c04:	67 2f       	mov	r22, r23
 c06:	78 2f       	mov	r23, r24
 c08:	88 27       	eor	r24, r24
 c0a:	b8 5f       	subi	r27, 0xF8	; 248
 c0c:	39 f0       	breq	.+14     	; 0xc1c <__fixunssfsi+0x4c>
 c0e:	b9 3f       	cpi	r27, 0xF9	; 249
 c10:	cc f3       	brlt	.-14     	; 0xc04 <__fixunssfsi+0x34>
 c12:	86 95       	lsr	r24
 c14:	77 95       	ror	r23
 c16:	67 95       	ror	r22
 c18:	b3 95       	inc	r27
 c1a:	d9 f7       	brne	.-10     	; 0xc12 <__fixunssfsi+0x42>
 c1c:	3e f4       	brtc	.+14     	; 0xc2c <__fixunssfsi+0x5c>
 c1e:	90 95       	com	r25
 c20:	80 95       	com	r24
 c22:	70 95       	com	r23
 c24:	61 95       	neg	r22
 c26:	7f 4f       	sbci	r23, 0xFF	; 255
 c28:	8f 4f       	sbci	r24, 0xFF	; 255
 c2a:	9f 4f       	sbci	r25, 0xFF	; 255
 c2c:	08 95       	ret

00000c2e <__floatunsisf>:
 c2e:	e8 94       	clt
 c30:	09 c0       	rjmp	.+18     	; 0xc44 <__floatsisf+0x12>

00000c32 <__floatsisf>:
 c32:	97 fb       	bst	r25, 7
 c34:	3e f4       	brtc	.+14     	; 0xc44 <__floatsisf+0x12>
 c36:	90 95       	com	r25
 c38:	80 95       	com	r24
 c3a:	70 95       	com	r23
 c3c:	61 95       	neg	r22
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	99 23       	and	r25, r25
 c46:	a9 f0       	breq	.+42     	; 0xc72 <__floatsisf+0x40>
 c48:	f9 2f       	mov	r31, r25
 c4a:	96 e9       	ldi	r25, 0x96	; 150
 c4c:	bb 27       	eor	r27, r27
 c4e:	93 95       	inc	r25
 c50:	f6 95       	lsr	r31
 c52:	87 95       	ror	r24
 c54:	77 95       	ror	r23
 c56:	67 95       	ror	r22
 c58:	b7 95       	ror	r27
 c5a:	f1 11       	cpse	r31, r1
 c5c:	f8 cf       	rjmp	.-16     	; 0xc4e <__floatsisf+0x1c>
 c5e:	fa f4       	brpl	.+62     	; 0xc9e <__floatsisf+0x6c>
 c60:	bb 0f       	add	r27, r27
 c62:	11 f4       	brne	.+4      	; 0xc68 <__floatsisf+0x36>
 c64:	60 ff       	sbrs	r22, 0
 c66:	1b c0       	rjmp	.+54     	; 0xc9e <__floatsisf+0x6c>
 c68:	6f 5f       	subi	r22, 0xFF	; 255
 c6a:	7f 4f       	sbci	r23, 0xFF	; 255
 c6c:	8f 4f       	sbci	r24, 0xFF	; 255
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	16 c0       	rjmp	.+44     	; 0xc9e <__floatsisf+0x6c>
 c72:	88 23       	and	r24, r24
 c74:	11 f0       	breq	.+4      	; 0xc7a <__floatsisf+0x48>
 c76:	96 e9       	ldi	r25, 0x96	; 150
 c78:	11 c0       	rjmp	.+34     	; 0xc9c <__floatsisf+0x6a>
 c7a:	77 23       	and	r23, r23
 c7c:	21 f0       	breq	.+8      	; 0xc86 <__floatsisf+0x54>
 c7e:	9e e8       	ldi	r25, 0x8E	; 142
 c80:	87 2f       	mov	r24, r23
 c82:	76 2f       	mov	r23, r22
 c84:	05 c0       	rjmp	.+10     	; 0xc90 <__floatsisf+0x5e>
 c86:	66 23       	and	r22, r22
 c88:	71 f0       	breq	.+28     	; 0xca6 <__floatsisf+0x74>
 c8a:	96 e8       	ldi	r25, 0x86	; 134
 c8c:	86 2f       	mov	r24, r22
 c8e:	70 e0       	ldi	r23, 0x00	; 0
 c90:	60 e0       	ldi	r22, 0x00	; 0
 c92:	2a f0       	brmi	.+10     	; 0xc9e <__floatsisf+0x6c>
 c94:	9a 95       	dec	r25
 c96:	66 0f       	add	r22, r22
 c98:	77 1f       	adc	r23, r23
 c9a:	88 1f       	adc	r24, r24
 c9c:	da f7       	brpl	.-10     	; 0xc94 <__floatsisf+0x62>
 c9e:	88 0f       	add	r24, r24
 ca0:	96 95       	lsr	r25
 ca2:	87 95       	ror	r24
 ca4:	97 f9       	bld	r25, 7
 ca6:	08 95       	ret

00000ca8 <__fp_split3>:
 ca8:	57 fd       	sbrc	r21, 7
 caa:	90 58       	subi	r25, 0x80	; 128
 cac:	44 0f       	add	r20, r20
 cae:	55 1f       	adc	r21, r21
 cb0:	59 f0       	breq	.+22     	; 0xcc8 <__fp_splitA+0x10>
 cb2:	5f 3f       	cpi	r21, 0xFF	; 255
 cb4:	71 f0       	breq	.+28     	; 0xcd2 <__fp_splitA+0x1a>
 cb6:	47 95       	ror	r20

00000cb8 <__fp_splitA>:
 cb8:	88 0f       	add	r24, r24
 cba:	97 fb       	bst	r25, 7
 cbc:	99 1f       	adc	r25, r25
 cbe:	61 f0       	breq	.+24     	; 0xcd8 <__fp_splitA+0x20>
 cc0:	9f 3f       	cpi	r25, 0xFF	; 255
 cc2:	79 f0       	breq	.+30     	; 0xce2 <__fp_splitA+0x2a>
 cc4:	87 95       	ror	r24
 cc6:	08 95       	ret
 cc8:	12 16       	cp	r1, r18
 cca:	13 06       	cpc	r1, r19
 ccc:	14 06       	cpc	r1, r20
 cce:	55 1f       	adc	r21, r21
 cd0:	f2 cf       	rjmp	.-28     	; 0xcb6 <__fp_split3+0xe>
 cd2:	46 95       	lsr	r20
 cd4:	f1 df       	rcall	.-30     	; 0xcb8 <__fp_splitA>
 cd6:	08 c0       	rjmp	.+16     	; 0xce8 <__fp_splitA+0x30>
 cd8:	16 16       	cp	r1, r22
 cda:	17 06       	cpc	r1, r23
 cdc:	18 06       	cpc	r1, r24
 cde:	99 1f       	adc	r25, r25
 ce0:	f1 cf       	rjmp	.-30     	; 0xcc4 <__fp_splitA+0xc>
 ce2:	86 95       	lsr	r24
 ce4:	71 05       	cpc	r23, r1
 ce6:	61 05       	cpc	r22, r1
 ce8:	08 94       	sec
 cea:	08 95       	ret

00000cec <__fp_zero>:
 cec:	e8 94       	clt

00000cee <__fp_szero>:
 cee:	bb 27       	eor	r27, r27
 cf0:	66 27       	eor	r22, r22
 cf2:	77 27       	eor	r23, r23
 cf4:	cb 01       	movw	r24, r22
 cf6:	97 f9       	bld	r25, 7
 cf8:	08 95       	ret

00000cfa <__mulsf3>:
 cfa:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulsf3x>
 cfe:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_round>
 d02:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_pscA>
 d06:	38 f0       	brcs	.+14     	; 0xd16 <__mulsf3+0x1c>
 d08:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_pscB>
 d0c:	20 f0       	brcs	.+8      	; 0xd16 <__mulsf3+0x1c>
 d0e:	95 23       	and	r25, r21
 d10:	11 f0       	breq	.+4      	; 0xd16 <__mulsf3+0x1c>
 d12:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>
 d16:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_nan>
 d1a:	11 24       	eor	r1, r1
 d1c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_szero>

00000d20 <__mulsf3x>:
 d20:	0e 94 54 06 	call	0xca8	; 0xca8 <__fp_split3>
 d24:	70 f3       	brcs	.-36     	; 0xd02 <__mulsf3+0x8>

00000d26 <__mulsf3_pse>:
 d26:	95 9f       	mul	r25, r21
 d28:	c1 f3       	breq	.-16     	; 0xd1a <__mulsf3+0x20>
 d2a:	95 0f       	add	r25, r21
 d2c:	50 e0       	ldi	r21, 0x00	; 0
 d2e:	55 1f       	adc	r21, r21
 d30:	62 9f       	mul	r22, r18
 d32:	f0 01       	movw	r30, r0
 d34:	72 9f       	mul	r23, r18
 d36:	bb 27       	eor	r27, r27
 d38:	f0 0d       	add	r31, r0
 d3a:	b1 1d       	adc	r27, r1
 d3c:	63 9f       	mul	r22, r19
 d3e:	aa 27       	eor	r26, r26
 d40:	f0 0d       	add	r31, r0
 d42:	b1 1d       	adc	r27, r1
 d44:	aa 1f       	adc	r26, r26
 d46:	64 9f       	mul	r22, r20
 d48:	66 27       	eor	r22, r22
 d4a:	b0 0d       	add	r27, r0
 d4c:	a1 1d       	adc	r26, r1
 d4e:	66 1f       	adc	r22, r22
 d50:	82 9f       	mul	r24, r18
 d52:	22 27       	eor	r18, r18
 d54:	b0 0d       	add	r27, r0
 d56:	a1 1d       	adc	r26, r1
 d58:	62 1f       	adc	r22, r18
 d5a:	73 9f       	mul	r23, r19
 d5c:	b0 0d       	add	r27, r0
 d5e:	a1 1d       	adc	r26, r1
 d60:	62 1f       	adc	r22, r18
 d62:	83 9f       	mul	r24, r19
 d64:	a0 0d       	add	r26, r0
 d66:	61 1d       	adc	r22, r1
 d68:	22 1f       	adc	r18, r18
 d6a:	74 9f       	mul	r23, r20
 d6c:	33 27       	eor	r19, r19
 d6e:	a0 0d       	add	r26, r0
 d70:	61 1d       	adc	r22, r1
 d72:	23 1f       	adc	r18, r19
 d74:	84 9f       	mul	r24, r20
 d76:	60 0d       	add	r22, r0
 d78:	21 1d       	adc	r18, r1
 d7a:	82 2f       	mov	r24, r18
 d7c:	76 2f       	mov	r23, r22
 d7e:	6a 2f       	mov	r22, r26
 d80:	11 24       	eor	r1, r1
 d82:	9f 57       	subi	r25, 0x7F	; 127
 d84:	50 40       	sbci	r21, 0x00	; 0
 d86:	9a f0       	brmi	.+38     	; 0xdae <__mulsf3_pse+0x88>
 d88:	f1 f0       	breq	.+60     	; 0xdc6 <__mulsf3_pse+0xa0>
 d8a:	88 23       	and	r24, r24
 d8c:	4a f0       	brmi	.+18     	; 0xda0 <__mulsf3_pse+0x7a>
 d8e:	ee 0f       	add	r30, r30
 d90:	ff 1f       	adc	r31, r31
 d92:	bb 1f       	adc	r27, r27
 d94:	66 1f       	adc	r22, r22
 d96:	77 1f       	adc	r23, r23
 d98:	88 1f       	adc	r24, r24
 d9a:	91 50       	subi	r25, 0x01	; 1
 d9c:	50 40       	sbci	r21, 0x00	; 0
 d9e:	a9 f7       	brne	.-22     	; 0xd8a <__mulsf3_pse+0x64>
 da0:	9e 3f       	cpi	r25, 0xFE	; 254
 da2:	51 05       	cpc	r21, r1
 da4:	80 f0       	brcs	.+32     	; 0xdc6 <__mulsf3_pse+0xa0>
 da6:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>
 daa:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_szero>
 dae:	5f 3f       	cpi	r21, 0xFF	; 255
 db0:	e4 f3       	brlt	.-8      	; 0xdaa <__mulsf3_pse+0x84>
 db2:	98 3e       	cpi	r25, 0xE8	; 232
 db4:	d4 f3       	brlt	.-12     	; 0xdaa <__mulsf3_pse+0x84>
 db6:	86 95       	lsr	r24
 db8:	77 95       	ror	r23
 dba:	67 95       	ror	r22
 dbc:	b7 95       	ror	r27
 dbe:	f7 95       	ror	r31
 dc0:	e7 95       	ror	r30
 dc2:	9f 5f       	subi	r25, 0xFF	; 255
 dc4:	c1 f7       	brne	.-16     	; 0xdb6 <__mulsf3_pse+0x90>
 dc6:	fe 2b       	or	r31, r30
 dc8:	88 0f       	add	r24, r24
 dca:	91 1d       	adc	r25, r1
 dcc:	96 95       	lsr	r25
 dce:	87 95       	ror	r24
 dd0:	97 f9       	bld	r25, 7
 dd2:	08 95       	ret

00000dd4 <__fp_inf>:
 dd4:	97 f9       	bld	r25, 7
 dd6:	9f 67       	ori	r25, 0x7F	; 127
 dd8:	80 e8       	ldi	r24, 0x80	; 128
 dda:	70 e0       	ldi	r23, 0x00	; 0
 ddc:	60 e0       	ldi	r22, 0x00	; 0
 dde:	08 95       	ret

00000de0 <__fp_nan>:
 de0:	9f ef       	ldi	r25, 0xFF	; 255
 de2:	80 ec       	ldi	r24, 0xC0	; 192
 de4:	08 95       	ret

00000de6 <__fp_pscA>:
 de6:	00 24       	eor	r0, r0
 de8:	0a 94       	dec	r0
 dea:	16 16       	cp	r1, r22
 dec:	17 06       	cpc	r1, r23
 dee:	18 06       	cpc	r1, r24
 df0:	09 06       	cpc	r0, r25
 df2:	08 95       	ret

00000df4 <__fp_pscB>:
 df4:	00 24       	eor	r0, r0
 df6:	0a 94       	dec	r0
 df8:	12 16       	cp	r1, r18
 dfa:	13 06       	cpc	r1, r19
 dfc:	14 06       	cpc	r1, r20
 dfe:	05 06       	cpc	r0, r21
 e00:	08 95       	ret

00000e02 <__fp_round>:
 e02:	09 2e       	mov	r0, r25
 e04:	03 94       	inc	r0
 e06:	00 0c       	add	r0, r0
 e08:	11 f4       	brne	.+4      	; 0xe0e <__fp_round+0xc>
 e0a:	88 23       	and	r24, r24
 e0c:	52 f0       	brmi	.+20     	; 0xe22 <__fp_round+0x20>
 e0e:	bb 0f       	add	r27, r27
 e10:	40 f4       	brcc	.+16     	; 0xe22 <__fp_round+0x20>
 e12:	bf 2b       	or	r27, r31
 e14:	11 f4       	brne	.+4      	; 0xe1a <__fp_round+0x18>
 e16:	60 ff       	sbrs	r22, 0
 e18:	04 c0       	rjmp	.+8      	; 0xe22 <__fp_round+0x20>
 e1a:	6f 5f       	subi	r22, 0xFF	; 255
 e1c:	7f 4f       	sbci	r23, 0xFF	; 255
 e1e:	8f 4f       	sbci	r24, 0xFF	; 255
 e20:	9f 4f       	sbci	r25, 0xFF	; 255
 e22:	08 95       	ret

00000e24 <__divmodhi4>:
 e24:	97 fb       	bst	r25, 7
 e26:	07 2e       	mov	r0, r23
 e28:	16 f4       	brtc	.+4      	; 0xe2e <__divmodhi4+0xa>
 e2a:	00 94       	com	r0
 e2c:	07 d0       	rcall	.+14     	; 0xe3c <__divmodhi4_neg1>
 e2e:	77 fd       	sbrc	r23, 7
 e30:	09 d0       	rcall	.+18     	; 0xe44 <__divmodhi4_neg2>
 e32:	0e 94 53 07 	call	0xea6	; 0xea6 <__udivmodhi4>
 e36:	07 fc       	sbrc	r0, 7
 e38:	05 d0       	rcall	.+10     	; 0xe44 <__divmodhi4_neg2>
 e3a:	3e f4       	brtc	.+14     	; 0xe4a <__divmodhi4_exit>

00000e3c <__divmodhi4_neg1>:
 e3c:	90 95       	com	r25
 e3e:	81 95       	neg	r24
 e40:	9f 4f       	sbci	r25, 0xFF	; 255
 e42:	08 95       	ret

00000e44 <__divmodhi4_neg2>:
 e44:	70 95       	com	r23
 e46:	61 95       	neg	r22
 e48:	7f 4f       	sbci	r23, 0xFF	; 255

00000e4a <__divmodhi4_exit>:
 e4a:	08 95       	ret

00000e4c <__udivmodsi4>:
 e4c:	a1 e2       	ldi	r26, 0x21	; 33
 e4e:	1a 2e       	mov	r1, r26
 e50:	aa 1b       	sub	r26, r26
 e52:	bb 1b       	sub	r27, r27
 e54:	fd 01       	movw	r30, r26
 e56:	0d c0       	rjmp	.+26     	; 0xe72 <__udivmodsi4_ep>

00000e58 <__udivmodsi4_loop>:
 e58:	aa 1f       	adc	r26, r26
 e5a:	bb 1f       	adc	r27, r27
 e5c:	ee 1f       	adc	r30, r30
 e5e:	ff 1f       	adc	r31, r31
 e60:	a2 17       	cp	r26, r18
 e62:	b3 07       	cpc	r27, r19
 e64:	e4 07       	cpc	r30, r20
 e66:	f5 07       	cpc	r31, r21
 e68:	20 f0       	brcs	.+8      	; 0xe72 <__udivmodsi4_ep>
 e6a:	a2 1b       	sub	r26, r18
 e6c:	b3 0b       	sbc	r27, r19
 e6e:	e4 0b       	sbc	r30, r20
 e70:	f5 0b       	sbc	r31, r21

00000e72 <__udivmodsi4_ep>:
 e72:	66 1f       	adc	r22, r22
 e74:	77 1f       	adc	r23, r23
 e76:	88 1f       	adc	r24, r24
 e78:	99 1f       	adc	r25, r25
 e7a:	1a 94       	dec	r1
 e7c:	69 f7       	brne	.-38     	; 0xe58 <__udivmodsi4_loop>
 e7e:	60 95       	com	r22
 e80:	70 95       	com	r23
 e82:	80 95       	com	r24
 e84:	90 95       	com	r25
 e86:	9b 01       	movw	r18, r22
 e88:	ac 01       	movw	r20, r24
 e8a:	bd 01       	movw	r22, r26
 e8c:	cf 01       	movw	r24, r30
 e8e:	08 95       	ret

00000e90 <__muluhisi3>:
 e90:	0e 94 67 07 	call	0xece	; 0xece <__umulhisi3>
 e94:	a5 9f       	mul	r26, r21
 e96:	90 0d       	add	r25, r0
 e98:	b4 9f       	mul	r27, r20
 e9a:	90 0d       	add	r25, r0
 e9c:	a4 9f       	mul	r26, r20
 e9e:	80 0d       	add	r24, r0
 ea0:	91 1d       	adc	r25, r1
 ea2:	11 24       	eor	r1, r1
 ea4:	08 95       	ret

00000ea6 <__udivmodhi4>:
 ea6:	aa 1b       	sub	r26, r26
 ea8:	bb 1b       	sub	r27, r27
 eaa:	51 e1       	ldi	r21, 0x11	; 17
 eac:	07 c0       	rjmp	.+14     	; 0xebc <__udivmodhi4_ep>

00000eae <__udivmodhi4_loop>:
 eae:	aa 1f       	adc	r26, r26
 eb0:	bb 1f       	adc	r27, r27
 eb2:	a6 17       	cp	r26, r22
 eb4:	b7 07       	cpc	r27, r23
 eb6:	10 f0       	brcs	.+4      	; 0xebc <__udivmodhi4_ep>
 eb8:	a6 1b       	sub	r26, r22
 eba:	b7 0b       	sbc	r27, r23

00000ebc <__udivmodhi4_ep>:
 ebc:	88 1f       	adc	r24, r24
 ebe:	99 1f       	adc	r25, r25
 ec0:	5a 95       	dec	r21
 ec2:	a9 f7       	brne	.-22     	; 0xeae <__udivmodhi4_loop>
 ec4:	80 95       	com	r24
 ec6:	90 95       	com	r25
 ec8:	bc 01       	movw	r22, r24
 eca:	cd 01       	movw	r24, r26
 ecc:	08 95       	ret

00000ece <__umulhisi3>:
 ece:	a2 9f       	mul	r26, r18
 ed0:	b0 01       	movw	r22, r0
 ed2:	b3 9f       	mul	r27, r19
 ed4:	c0 01       	movw	r24, r0
 ed6:	a3 9f       	mul	r26, r19
 ed8:	70 0d       	add	r23, r0
 eda:	81 1d       	adc	r24, r1
 edc:	11 24       	eor	r1, r1
 ede:	91 1d       	adc	r25, r1
 ee0:	b2 9f       	mul	r27, r18
 ee2:	70 0d       	add	r23, r0
 ee4:	81 1d       	adc	r24, r1
 ee6:	11 24       	eor	r1, r1
 ee8:	91 1d       	adc	r25, r1
 eea:	08 95       	ret

00000eec <_exit>:
 eec:	f8 94       	cli

00000eee <__stop_program>:
 eee:	ff cf       	rjmp	.-2      	; 0xeee <__stop_program>
