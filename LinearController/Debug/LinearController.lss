
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000050e  000005a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800106  00800106  000005a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbe  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b7  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000792  00000000  00000000  00001c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000592  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000252  00000000  00000000  00002b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_11>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 30 01 	call	0x260	; 0x260 <main>
  9e:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	85 60       	ori	r24, 0x05	; 5
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 68       	ori	r24, 0x86	; 134
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8b 60       	ori	r24, 0x0B	; 11
  ca:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
  cc:	ef e6       	ldi	r30, 0x6F	; 111
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
  e0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  e4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  e8:	08 95       	ret

000000ea <UART_Init>:
  ea:	e5 ec       	ldi	r30, 0xC5	; 197
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	20 81       	ld	r18, Z
  f0:	92 2b       	or	r25, r18
  f2:	90 83       	st	Z, r25
  f4:	e4 ec       	ldi	r30, 0xC4	; 196
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	89 2b       	or	r24, r25
  fc:	80 83       	st	Z, r24
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 69       	ori	r24, 0x98	; 152
 106:	80 83       	st	Z, r24
 108:	e2 ec       	ldi	r30, 0xC2	; 194
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <UART_Receive>:
 114:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 118:	08 95       	ret

0000011a <UART_InterpretPumpingEffort>:
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pumpingEffort>
 120:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pumpingEffort>
 124:	81 11       	cpse	r24, r1
 126:	06 c0       	rjmp	.+12     	; 0x134 <UART_InterpretPumpingEffort+0x1a>
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
 128:	e4 e6       	ldi	r30, 0x64	; 100
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8f 6e       	ori	r24, 0xEF	; 239
 130:	80 83       	st	Z, r24
 132:	32 c0       	rjmp	.+100    	; 0x198 <UART_InterpretPumpingEffort+0x7e>
 134:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pumpingEffort>
 138:	88 23       	and	r24, r24
 13a:	09 f1       	breq	.+66     	; 0x17e <UART_InterpretPumpingEffort+0x64>
 13c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pumpingEffort>
 140:	83 3b       	cpi	r24, 0xB3	; 179
 142:	e8 f4       	brcc	.+58     	; 0x17e <UART_InterpretPumpingEffort+0x64>
 144:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pumpingEffort>
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	82 3b       	cpi	r24, 0xB2	; 178
 14c:	08 f4       	brcc	.+2      	; 0x150 <UART_InterpretPumpingEffort+0x36>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	63 e6       	ldi	r22, 0x63	; 99
 158:	7a ee       	ldi	r23, 0xEA	; 234
 15a:	83 ea       	ldi	r24, 0xA3	; 163
 15c:	91 e3       	ldi	r25, 0x31	; 49
 15e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__mulsi3>
 162:	20 e8       	ldi	r18, 0x80	; 128
 164:	36 e9       	ldi	r19, 0x96	; 150
 166:	4f ef       	ldi	r20, 0xFF	; 255
 168:	5f ef       	ldi	r21, 0xFF	; 255
 16a:	0e 94 16 02 	call	0x42c	; 0x42c <__divmodsi4>
 16e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 172:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <lowPowerMode>
 17c:	0d c0       	rjmp	.+26     	; 0x198 <UART_InterpretPumpingEffort+0x7e>
 17e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pumpingEffort>
 182:	83 3b       	cpi	r24, 0xB3	; 179
 184:	38 f0       	brcs	.+14     	; 0x194 <UART_InterpretPumpingEffort+0x7a>
 186:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pumpingEffort>
 18a:	8f 3f       	cpi	r24, 0xFF	; 255
 18c:	19 f0       	breq	.+6      	; 0x194 <UART_InterpretPumpingEffort+0x7a>
 18e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <lowPowerMode>
 192:	02 c0       	rjmp	.+4      	; 0x198 <UART_InterpretPumpingEffort+0x7e>
 194:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <lowPowerMode>
 198:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 19c:	08 95       	ret

0000019e <__vector_12>:
		 }
		 
	 }
 }

	 ISR(TIMER1_COMPB_vect){//TRIGGERS ON MATCH WITH OCRB REGISTER (OFF TIME)
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8f 93       	push	r24
		 if(isLHS || lowPowerMode){//LHS MOTION
 1aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <isLHS>
 1ae:	81 11       	cpse	r24, r1
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <__vector_12+0x1c>
 1b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lowPowerMode>
 1b6:	88 23       	and	r24, r24
 1b8:	41 f0       	breq	.+16     	; 0x1ca <__vector_12+0x2c>
			 if((~isDead) && (count <=NUMBER_OF_WAVES)){
 1ba:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <isDead>
 1be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count>
 1c2:	8b 3f       	cpi	r24, 0xFB	; 251
 1c4:	48 f4       	brcc	.+18     	; 0x1d8 <__vector_12+0x3a>
				 PORTB &= ~(1 << PB1);
 1c6:	29 98       	cbi	0x05, 1	; 5
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <__vector_12+0x3a>
			 }
		 }
		 else{//RHS MOTION
			 if((~isDead) && (count <=NUMBER_OF_WAVES)){
 1ca:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <isDead>
 1ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count>
 1d2:	8b 3f       	cpi	r24, 0xFB	; 251
 1d4:	08 f4       	brcc	.+2      	; 0x1d8 <__vector_12+0x3a>
				 PORTD &= ~(1 << PD6);
 1d6:	5e 98       	cbi	0x0b, 6	; 11
			 }
		 }
	 }
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_18>:
			//PORTD &= ~(1 << PD6);
		//}
	//}
//}
 //
ISR(USART_RX_vect){
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	pumpingEffort = UART_Receive();
 206:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Receive>
 20a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pumpingEffort>
	changePumpingEffort = true;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <ConvertTimerValueToDutyCycle>:
	
	return 0;
}

uint8_t ConvertTimerValueToDutyCycle(){
	return ((dutyCycle*125)/100);
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23e:	4d e7       	ldi	r20, 0x7D	; 125
 240:	48 9f       	mul	r20, r24
 242:	90 01       	movw	r18, r0
 244:	49 9f       	mul	r20, r25
 246:	30 0d       	add	r19, r0
 248:	11 24       	eor	r1, r1
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	ab e7       	ldi	r26, 0x7B	; 123
 254:	b4 e1       	ldi	r27, 0x14	; 20
 256:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
}
 25e:	08 95       	ret

00000260 <main>:
 


int main(void)
{	
    sei();
 260:	78 94       	sei
	UART_Init(UBRRVALUE);
 262:	63 e3       	ldi	r22, 0x33	; 51
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 75 00 	call	0xea	; 0xea <UART_Init>
	ADC_Init();
 26e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
 272:	0e 94 61 00 	call	0xc2	; 0xc2 <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 276:	84 b1       	in	r24, 0x04	; 4
 278:	86 60       	ori	r24, 0x06	; 6
 27a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 27c:	8a b1       	in	r24, 0x0a	; 10
 27e:	80 66       	ori	r24, 0x60	; 96
 280:	8a b9       	out	0x0a, r24	; 10

    while (1) 
    {
		if(changePumpingEffort){
 282:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 286:	88 23       	and	r24, r24
 288:	e1 f3       	breq	.-8      	; 0x282 <main+0x22>
			 UART_InterpretPumpingEffort();
 28a:	0e 94 8d 00 	call	0x11a	; 0x11a <UART_InterpretPumpingEffort>
			 ConvertTimerValueToDutyCycle();
 28e:	0e 94 1b 01 	call	0x236	; 0x236 <ConvertTimerValueToDutyCycle>
 292:	f7 cf       	rjmp	.-18     	; 0x282 <main+0x22>

00000294 <CalculateDeadTime>:
uint8_t ConvertTimerValueToDutyCycle(){
	return ((dutyCycle*125)/100);
}

uint16_t CalculateDeadTime(){
	return (((500/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; //in ms 
 294:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <frequency>
 298:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <noOfWaves>
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	84 ef       	ldi	r24, 0xF4	; 244
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 02 02 	call	0x404	; 0x404 <__divmodhi4>
 2a6:	62 1b       	sub	r22, r18
 2a8:	71 09       	sbc	r23, r1
 2aa:	8d e7       	ldi	r24, 0x7D	; 125
 2ac:	28 2f       	mov	r18, r24
 2ae:	26 9f       	mul	r18, r22
 2b0:	c0 01       	movw	r24, r0
 2b2:	27 9f       	mul	r18, r23
 2b4:	90 0d       	add	r25, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	08 95       	ret

000002ba <__vector_11>:
volatile uint8_t noOfWaves = 30;
volatile uint16_t dutyCycle = 99;

//adc arrays 
 
 ISR(TIMER1_COMPA_vect){
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
	 if(isLHS || lowPowerMode){	//LHS MOTION
 2dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <isLHS>
 2e0:	81 11       	cpse	r24, r1
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <__vector_11+0x32>
 2e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lowPowerMode>
 2e8:	88 23       	and	r24, r24
 2ea:	c1 f1       	breq	.+112    	; 0x35c <__vector_11+0xa2>
		 if((count <= noOfWaves) && (!isDead)){//PRODUCING X NUMBER OF PWM OSCILLATIONS
 2ec:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <count>
 2f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
 2f4:	89 17       	cp	r24, r25
 2f6:	68 f0       	brcs	.+26     	; 0x312 <__vector_11+0x58>
 2f8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <isDead>
 2fc:	81 11       	cpse	r24, r1
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_11+0x58>
			 PORTB |= (1<<PB1) | (1<< PB2); //turn RHS ON
 300:	85 b1       	in	r24, 0x05	; 5
 302:	86 60       	ori	r24, 0x06	; 6
 304:	85 b9       	out	0x05, r24	; 5
			 count++;
 306:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <count>
 310:	58 c0       	rjmp	.+176    	; 0x3c2 <__vector_11+0x108>
		 }
		 else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 312:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <count>
 316:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
 31a:	89 17       	cp	r24, r25
 31c:	a0 f4       	brcc	.+40     	; 0x346 <__vector_11+0x8c>
			 PORTB &= ~(1<<PB1); //turn pmos off
 31e:	29 98       	cbi	0x05, 1	; 5
			 PORTB &= ~(1<<PB2);//turn nmos off
 320:	2a 98       	cbi	0x05, 2	; 5
			 PWM_Change(CalculateDeadTime(),65535);
 322:	0e 94 4a 01 	call	0x294	; 0x294 <CalculateDeadTime>
 326:	6f ef       	ldi	r22, 0xFF	; 255
 328:	7f ef       	ldi	r23, 0xFF	; 255
 32a:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
			 if(!lowPowerMode){
 32e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lowPowerMode>
 332:	81 11       	cpse	r24, r1
 334:	02 c0       	rjmp	.+4      	; 0x33a <__vector_11+0x80>
				 isLHS = false;
 336:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <isLHS>
			 }
			 count = 0;
 33a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <count>
			 isDead = true; //deadzone begins
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <isDead>
 344:	3e c0       	rjmp	.+124    	; 0x3c2 <__vector_11+0x108>
		 }
		 else{	//end of deadzone, set the pwm frequency back to normal
			 //TCCR1B &= ~(1<<CS11);
			 isDead = false;
 346:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <isDead>
			 PWM_Change(125,ConvertTimerValueToDutyCycle());
 34a:	0e 94 1b 01 	call	0x236	; 0x236 <ConvertTimerValueToDutyCycle>
 34e:	68 2f       	mov	r22, r24
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	8d e7       	ldi	r24, 0x7D	; 125
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
 35a:	33 c0       	rjmp	.+102    	; 0x3c2 <__vector_11+0x108>
		 }
	 }
	 else{//RHS MOTION
		 if((count <= noOfWaves) && (!isDead)){
 35c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <count>
 360:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
 364:	89 17       	cp	r24, r25
 366:	68 f0       	brcs	.+26     	; 0x382 <__vector_11+0xc8>
 368:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <isDead>
 36c:	81 11       	cpse	r24, r1
 36e:	09 c0       	rjmp	.+18     	; 0x382 <__vector_11+0xc8>
			 PORTD |= (1<< PD6)|(1<<PD5); //NMOS and PMOS on
 370:	8b b1       	in	r24, 0x0b	; 11
 372:	80 66       	ori	r24, 0x60	; 96
 374:	8b b9       	out	0x0b, r24	; 11
			 count++;
 376:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count>
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <count>
 380:	20 c0       	rjmp	.+64     	; 0x3c2 <__vector_11+0x108>
		 }
		 else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 382:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <count>
 386:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
 38a:	89 17       	cp	r24, r25
 38c:	80 f4       	brcc	.+32     	; 0x3ae <__vector_11+0xf4>
			 PORTD &= ~(1<< PD6);
 38e:	5e 98       	cbi	0x0b, 6	; 11
			 PORTD &= ~(1<<PD5);
 390:	5d 98       	cbi	0x0b, 5	; 11
			 PWM_Change(CalculateDeadTime(),65535); //apply deadzone
 392:	0e 94 4a 01 	call	0x294	; 0x294 <CalculateDeadTime>
 396:	6f ef       	ldi	r22, 0xFF	; 255
 398:	7f ef       	ldi	r23, 0xFF	; 255
 39a:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
			 isLHS = true;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <isLHS>
			 count = 0;
 3a4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <count>
			 isDead = true; //deadzone begins
 3a8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <isDead>
 3ac:	0a c0       	rjmp	.+20     	; 0x3c2 <__vector_11+0x108>
		 }
		 else{	//end of deadzone, set the pwm frequency back to normal
			 //TCCR1B &= ~(1<<CS11);
			 isDead = false;
 3ae:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <isDead>
			 PWM_Change(125,ConvertTimerValueToDutyCycle());
 3b2:	0e 94 1b 01 	call	0x236	; 0x236 <ConvertTimerValueToDutyCycle>
 3b6:	68 2f       	mov	r22, r24
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	8d e7       	ldi	r24, 0x7D	; 125
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
		 }
		 
	 }
 }
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__mulsi3>:
 3e4:	db 01       	movw	r26, r22
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	0e 94 44 02 	call	0x488	; 0x488 <__muluhisi3>
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	a2 9f       	mul	r26, r18
 3f4:	80 0d       	add	r24, r0
 3f6:	91 1d       	adc	r25, r1
 3f8:	a3 9f       	mul	r26, r19
 3fa:	90 0d       	add	r25, r0
 3fc:	b2 9f       	mul	r27, r18
 3fe:	90 0d       	add	r25, r0
 400:	11 24       	eor	r1, r1
 402:	08 95       	ret

00000404 <__divmodhi4>:
 404:	97 fb       	bst	r25, 7
 406:	07 2e       	mov	r0, r23
 408:	16 f4       	brtc	.+4      	; 0x40e <__divmodhi4+0xa>
 40a:	00 94       	com	r0
 40c:	07 d0       	rcall	.+14     	; 0x41c <__divmodhi4_neg1>
 40e:	77 fd       	sbrc	r23, 7
 410:	09 d0       	rcall	.+18     	; 0x424 <__divmodhi4_neg2>
 412:	0e 94 4f 02 	call	0x49e	; 0x49e <__udivmodhi4>
 416:	07 fc       	sbrc	r0, 7
 418:	05 d0       	rcall	.+10     	; 0x424 <__divmodhi4_neg2>
 41a:	3e f4       	brtc	.+14     	; 0x42a <__divmodhi4_exit>

0000041c <__divmodhi4_neg1>:
 41c:	90 95       	com	r25
 41e:	81 95       	neg	r24
 420:	9f 4f       	sbci	r25, 0xFF	; 255
 422:	08 95       	ret

00000424 <__divmodhi4_neg2>:
 424:	70 95       	com	r23
 426:	61 95       	neg	r22
 428:	7f 4f       	sbci	r23, 0xFF	; 255

0000042a <__divmodhi4_exit>:
 42a:	08 95       	ret

0000042c <__divmodsi4>:
 42c:	05 2e       	mov	r0, r21
 42e:	97 fb       	bst	r25, 7
 430:	1e f4       	brtc	.+6      	; 0x438 <__divmodsi4+0xc>
 432:	00 94       	com	r0
 434:	0e 94 2d 02 	call	0x45a	; 0x45a <__negsi2>
 438:	57 fd       	sbrc	r21, 7
 43a:	07 d0       	rcall	.+14     	; 0x44a <__divmodsi4_neg2>
 43c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__udivmodsi4>
 440:	07 fc       	sbrc	r0, 7
 442:	03 d0       	rcall	.+6      	; 0x44a <__divmodsi4_neg2>
 444:	4e f4       	brtc	.+18     	; 0x458 <__divmodsi4_exit>
 446:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__negsi2>

0000044a <__divmodsi4_neg2>:
 44a:	50 95       	com	r21
 44c:	40 95       	com	r20
 44e:	30 95       	com	r19
 450:	21 95       	neg	r18
 452:	3f 4f       	sbci	r19, 0xFF	; 255
 454:	4f 4f       	sbci	r20, 0xFF	; 255
 456:	5f 4f       	sbci	r21, 0xFF	; 255

00000458 <__divmodsi4_exit>:
 458:	08 95       	ret

0000045a <__negsi2>:
 45a:	90 95       	com	r25
 45c:	80 95       	com	r24
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__umulhisi3>:
 46a:	a2 9f       	mul	r26, r18
 46c:	b0 01       	movw	r22, r0
 46e:	b3 9f       	mul	r27, r19
 470:	c0 01       	movw	r24, r0
 472:	a3 9f       	mul	r26, r19
 474:	70 0d       	add	r23, r0
 476:	81 1d       	adc	r24, r1
 478:	11 24       	eor	r1, r1
 47a:	91 1d       	adc	r25, r1
 47c:	b2 9f       	mul	r27, r18
 47e:	70 0d       	add	r23, r0
 480:	81 1d       	adc	r24, r1
 482:	11 24       	eor	r1, r1
 484:	91 1d       	adc	r25, r1
 486:	08 95       	ret

00000488 <__muluhisi3>:
 488:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 48c:	a5 9f       	mul	r26, r21
 48e:	90 0d       	add	r25, r0
 490:	b4 9f       	mul	r27, r20
 492:	90 0d       	add	r25, r0
 494:	a4 9f       	mul	r26, r20
 496:	80 0d       	add	r24, r0
 498:	91 1d       	adc	r25, r1
 49a:	11 24       	eor	r1, r1
 49c:	08 95       	ret

0000049e <__udivmodhi4>:
 49e:	aa 1b       	sub	r26, r26
 4a0:	bb 1b       	sub	r27, r27
 4a2:	51 e1       	ldi	r21, 0x11	; 17
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <__udivmodhi4_ep>

000004a6 <__udivmodhi4_loop>:
 4a6:	aa 1f       	adc	r26, r26
 4a8:	bb 1f       	adc	r27, r27
 4aa:	a6 17       	cp	r26, r22
 4ac:	b7 07       	cpc	r27, r23
 4ae:	10 f0       	brcs	.+4      	; 0x4b4 <__udivmodhi4_ep>
 4b0:	a6 1b       	sub	r26, r22
 4b2:	b7 0b       	sbc	r27, r23

000004b4 <__udivmodhi4_ep>:
 4b4:	88 1f       	adc	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	5a 95       	dec	r21
 4ba:	a9 f7       	brne	.-22     	; 0x4a6 <__udivmodhi4_loop>
 4bc:	80 95       	com	r24
 4be:	90 95       	com	r25
 4c0:	bc 01       	movw	r22, r24
 4c2:	cd 01       	movw	r24, r26
 4c4:	08 95       	ret

000004c6 <__udivmodsi4>:
 4c6:	a1 e2       	ldi	r26, 0x21	; 33
 4c8:	1a 2e       	mov	r1, r26
 4ca:	aa 1b       	sub	r26, r26
 4cc:	bb 1b       	sub	r27, r27
 4ce:	fd 01       	movw	r30, r26
 4d0:	0d c0       	rjmp	.+26     	; 0x4ec <__udivmodsi4_ep>

000004d2 <__udivmodsi4_loop>:
 4d2:	aa 1f       	adc	r26, r26
 4d4:	bb 1f       	adc	r27, r27
 4d6:	ee 1f       	adc	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	a2 17       	cp	r26, r18
 4dc:	b3 07       	cpc	r27, r19
 4de:	e4 07       	cpc	r30, r20
 4e0:	f5 07       	cpc	r31, r21
 4e2:	20 f0       	brcs	.+8      	; 0x4ec <__udivmodsi4_ep>
 4e4:	a2 1b       	sub	r26, r18
 4e6:	b3 0b       	sbc	r27, r19
 4e8:	e4 0b       	sbc	r30, r20
 4ea:	f5 0b       	sbc	r31, r21

000004ec <__udivmodsi4_ep>:
 4ec:	66 1f       	adc	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	88 1f       	adc	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	1a 94       	dec	r1
 4f6:	69 f7       	brne	.-38     	; 0x4d2 <__udivmodsi4_loop>
 4f8:	60 95       	com	r22
 4fa:	70 95       	com	r23
 4fc:	80 95       	com	r24
 4fe:	90 95       	com	r25
 500:	9b 01       	movw	r18, r22
 502:	ac 01       	movw	r20, r24
 504:	bd 01       	movw	r22, r26
 506:	cf 01       	movw	r24, r30
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
