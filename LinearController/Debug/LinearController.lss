
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000544  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000544  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800108  00800108  000005e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d44  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000919  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4f  00000000  00000000  00002db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005de  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038d  00000000  00000000  00004226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000045b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_11>
  30:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
  9e:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  
#include "adc.h"

void ADC_Init(){
	// selection channel is set to AVcc
	ADMUX &= ~(1<<REFS1);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24

	//Selects ADC5 as the analog channel selection
	ADMUX |= ((1<<MUX2)|(1<<MUX0));
  b6:	80 81       	ld	r24, Z
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	80 83       	st	Z, r24
	
	//set required Prescaler Select Bits
	//Turns on the ADC and sets prescaler to 64
	//enable ADC
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	86 68       	ori	r24, 0x86	; 134
  c4:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADPS0);
  c6:	80 81       	ld	r24, Z
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8b 60       	ori	r24, 0x0B	; 11
  d6:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
  d8:	ef e6       	ldi	r30, 0x6F	; 111
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	86 60       	ori	r24, 0x06	; 6
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
  e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
  ec:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  f0:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  f4:	08 95       	ret

000000f6 <UART_Init>:
#define MAX_LOW_POWER 37885
#define PROPORTIONALITY_CONSTANT 21983

//uart intializer
void UART_Init(unsigned int BAUD_RATE){
	UBRR0H |= (unsigned char)(BAUD_RATE>>8); //sets the baud rate to 9600bps
  f6:	e5 ec       	ldi	r30, 0xC5	; 197
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	20 81       	ld	r18, Z
  fc:	92 2b       	or	r25, r18
  fe:	90 83       	st	Z, r25
	UBRR0L |= (unsigned char)(BAUD_RATE);
 100:	e4 ec       	ldi	r30, 0xC4	; 196
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	89 2b       	or	r24, r25
 108:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0); //enables UART transmitter/reciever and the reciever interrupt
 10a:	e1 ec       	ldi	r30, 0xC1	; 193
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 69       	ori	r24, 0x98	; 152
 112:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //sets character size to 8 data bits
 114:	e2 ec       	ldi	r30, 0xC2	; 194
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	86 60       	ori	r24, 0x06	; 6
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <UART_Transmit>:


//uart transmit
//polling uart
void UART_Transmit(uint8_t myValue){
	while (!((1<<UDRE0)&&(UCSR0A))); //wait until the transmit register is ready
 120:	e0 ec       	ldi	r30, 0xC0	; 192
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	99 23       	and	r25, r25
 128:	e9 f3       	breq	.-6      	; 0x124 <UART_Transmit+0x4>
	UDR0 = myValue;//once ready, store next value for transmission
 12a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 12e:	08 95       	ret

00000130 <UART_Receive>:
}

//uart recieve 
//interrupt config
uint8_t UART_Receive(){
	uint8_t pumpingEffort = UDR0;
 130:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return pumpingEffort;
}
 134:	08 95       	ret

00000136 <UART_InterpretPumpingEffort>:

void UART_InterpretPumpingEffort(){
	pumpingEffort = 1; //mock pumping effort
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <pumpingEffort>
	if(pumpingEffort==0){ //turn off mode 
 13c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 140:	81 11       	cpse	r24, r1
 142:	06 c0       	rjmp	.+12     	; 0x150 <UART_InterpretPumpingEffort+0x1a>
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
 144:	e4 e6       	ldi	r30, 0x64	; 100
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8f 6e       	ori	r24, 0xEF	; 239
 14c:	80 83       	st	Z, r24
 14e:	36 c0       	rjmp	.+108    	; 0x1bc <UART_InterpretPumpingEffort+0x86>
		power_all_disable(); //disables all modules on the microcontroller 
		//power_usart_enable(); //enable UART for communication to see when to turn back on
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){
 150:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 154:	88 23       	and	r24, r24
 156:	29 f1       	breq	.+74     	; 0x1a2 <UART_InterpretPumpingEffort+0x6c>
 158:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 15c:	83 3b       	cpi	r24, 0xB3	; 179
 15e:	08 f5       	brcc	.+66     	; 0x1a2 <UART_InterpretPumpingEffort+0x6c>
		//70% of values - care about efficiency and meeting pumpingEffort
		//efficiency actions turn two switches off
		//disable all unused modules
		dutyCycle = (PROPORTIONALITY_CONSTANT* MAX_LOW_POWER * (pumpingEffort/178))/(10000*1000);	//10000 and 1000 are because we didnt use floats [integer overflow error here]
 160:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	82 3b       	cpi	r24, 0xB2	; 178
 168:	08 f4       	brcc	.+2      	; 0x16c <UART_InterpretPumpingEffort+0x36>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	63 e6       	ldi	r22, 0x63	; 99
 174:	7a ee       	ldi	r23, 0xEA	; 234
 176:	83 ea       	ldi	r24, 0xA3	; 163
 178:	91 e3       	ldi	r25, 0x31	; 49
 17a:	0e 94 0d 02 	call	0x41a	; 0x41a <__mulsi3>
 17e:	20 e8       	ldi	r18, 0x80	; 128
 180:	36 e9       	ldi	r19, 0x96	; 150
 182:	4f ef       	ldi	r20, 0xFF	; 255
 184:	5f ef       	ldi	r21, 0xFF	; 255
 186:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodsi4>
 18a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 18e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 192:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_start+0x2>
 196:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_start+0x3>
		lowPowerMode = true;				 
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lowPowerMode>
 1a0:	0d c0       	rjmp	.+26     	; 0x1bc <UART_InterpretPumpingEffort+0x86>
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){
 1a2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 1a6:	83 3b       	cpi	r24, 0xB3	; 179
 1a8:	38 f0       	brcs	.+14     	; 0x1b8 <UART_InterpretPumpingEffort+0x82>
 1aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <pumpingEffort>
 1ae:	8f 3f       	cpi	r24, 0xFF	; 255
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <UART_InterpretPumpingEffort+0x82>
		//30% of values - go ham fam
		lowPowerMode = false;
 1b2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lowPowerMode>
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <UART_InterpretPumpingEffort+0x86>
	}else{ //255 lose your mind
		//change duty cycle and pwm to max out the motor
		lowPowerMode = false;
 1b8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lowPowerMode>
	}
	changePumpingEffort = false;
 1bc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 1c0:	08 95       	ret

000001c2 <__vector_12>:
		 }
		 
	 }
 }

	 ISR(TIMER1_COMPB_vect){//TRIGGERS ON MATCH WITH OCRB REGISTER (OFF TIME)
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
		 if(isLHS || lowPowerMode){//LHS MOTION
 1d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 1d4:	81 11       	cpse	r24, r1
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <__vector_12+0x1e>
 1d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lowPowerMode>
 1dc:	88 23       	and	r24, r24
 1de:	51 f0       	breq	.+20     	; 0x1f4 <__vector_12+0x32>
			 if((~isDead) && (count <=noOfWaves)){
 1e0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 1e4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 1e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 1ec:	89 17       	cp	r24, r25
 1ee:	58 f0       	brcs	.+22     	; 0x206 <__vector_12+0x44>
				 PORTB &= ~(1 << PB1);
 1f0:	29 98       	cbi	0x05, 1	; 5
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <__vector_12+0x44>
			 }
		 }
		 else{//RHS MOTION
			 if((~isDead) && (count <=noOfWaves)){
 1f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 1f8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 1fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 200:	89 17       	cp	r24, r25
 202:	08 f0       	brcs	.+2      	; 0x206 <__vector_12+0x44>
				 PORTD &= ~(1 << PD6);
 204:	5e 98       	cbi	0x0b, 6	; 11
			 }
		 }
	 }
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_18>:



ISR(USART_RX_vect){
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	pumpingEffort = UART_Receive();
 236:	0e 94 98 00 	call	0x130	; 0x130 <UART_Receive>
 23a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <pumpingEffort>
	changePumpingEffort = true;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <ConvertTimerValueToDutyCycle>:


uint8_t ConvertTimerValueToDutyCycle(){
	return ((dutyCycle*125)/100);
 266:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 26a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 26e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 272:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 276:	ad e7       	ldi	r26, 0x7D	; 125
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__muluhisi3>
 27e:	24 e6       	ldi	r18, 0x64	; 100
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	0e 94 31 02 	call	0x462	; 0x462 <__udivmodsi4>
 28a:	82 2f       	mov	r24, r18
}
 28c:	08 95       	ret

0000028e <CalculateDeadTime>:

uint16_t CalculateDeadTime(){
	return (((500/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; //in ms
 28e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frequency>
 292:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <noOfWaves>
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	84 ef       	ldi	r24, 0xF4	; 244
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 1d 02 	call	0x43a	; 0x43a <__divmodhi4>
 2a0:	62 1b       	sub	r22, r18
 2a2:	71 09       	sbc	r23, r1
}
 2a4:	8d e7       	ldi	r24, 0x7D	; 125
 2a6:	28 2f       	mov	r18, r24
 2a8:	26 9f       	mul	r18, r22
 2aa:	c0 01       	movw	r24, r0
 2ac:	27 9f       	mul	r18, r23
 2ae:	90 0d       	add	r25, r0
 2b0:	11 24       	eor	r1, r1
 2b2:	08 95       	ret

000002b4 <__vector_11>:
volatile uint8_t appliedVoltage = 0;
volatile uint8_t averagePower = 0;

//adc arrays
 
 ISR(TIMER1_COMPA_vect){
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	 if(isLHS || lowPowerMode){	//LHS MOTION
 2d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
 2da:	81 11       	cpse	r24, r1
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <__vector_11+0x32>
 2de:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lowPowerMode>
 2e2:	88 23       	and	r24, r24
 2e4:	c1 f1       	breq	.+112    	; 0x356 <__vector_11+0xa2>
		 if((count <= noOfWaves) && (!isDead)){//PRODUCING X NUMBER OF PWM OSCILLATIONS
 2e6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 2ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 2ee:	89 17       	cp	r24, r25
 2f0:	68 f0       	brcs	.+26     	; 0x30c <__vector_11+0x58>
 2f2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 2f6:	81 11       	cpse	r24, r1
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <__vector_11+0x58>
			 PORTB |= (1<<PB1) | (1<< PB2); //turn RHS ON
 2fa:	85 b1       	in	r24, 0x05	; 5
 2fc:	86 60       	ori	r24, 0x06	; 6
 2fe:	85 b9       	out	0x05, r24	; 5
			 count++;
 300:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <count>
 30a:	58 c0       	rjmp	.+176    	; 0x3bc <__vector_11+0x108>
		 }
		 else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 30c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 310:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 314:	89 17       	cp	r24, r25
 316:	a0 f4       	brcc	.+40     	; 0x340 <__vector_11+0x8c>
			 PORTB &= ~(1<<PB1); //turn pmos off
 318:	29 98       	cbi	0x05, 1	; 5
			 PORTB &= ~(1<<PB2);//turn nmos off
 31a:	2a 98       	cbi	0x05, 2	; 5
			 PWM_Change(CalculateDeadTime(),65535);
 31c:	0e 94 47 01 	call	0x28e	; 0x28e <CalculateDeadTime>
 320:	6f ef       	ldi	r22, 0xFF	; 255
 322:	7f ef       	ldi	r23, 0xFF	; 255
 324:	0e 94 72 00 	call	0xe4	; 0xe4 <PWM_Change>
			 if(!lowPowerMode){
 328:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lowPowerMode>
 32c:	81 11       	cpse	r24, r1
 32e:	02 c0       	rjmp	.+4      	; 0x334 <__vector_11+0x80>
				 isLHS = false;
 330:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isLHS>
			 }
			 count = 0;
 334:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count>
			 isDead = true; //deadzone begins
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isDead>
 33e:	3e c0       	rjmp	.+124    	; 0x3bc <__vector_11+0x108>
		 }
		 else{	//end of deadzone, set the pwm frequency back to normal
			 //TCCR1B &= ~(1<<CS11);
			 isDead = false;
 340:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <isDead>
			 PWM_Change(125,ConvertTimerValueToDutyCycle());
 344:	0e 94 33 01 	call	0x266	; 0x266 <ConvertTimerValueToDutyCycle>
 348:	68 2f       	mov	r22, r24
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	8d e7       	ldi	r24, 0x7D	; 125
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 72 00 	call	0xe4	; 0xe4 <PWM_Change>
 354:	33 c0       	rjmp	.+102    	; 0x3bc <__vector_11+0x108>
		 }
	 }
	 else{//RHS MOTION
		 if((count <= noOfWaves) && (!isDead)){
 356:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 35a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 35e:	89 17       	cp	r24, r25
 360:	68 f0       	brcs	.+26     	; 0x37c <__vector_11+0xc8>
 362:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isDead>
 366:	81 11       	cpse	r24, r1
 368:	09 c0       	rjmp	.+18     	; 0x37c <__vector_11+0xc8>
			 PORTD |= (1<< PD6)|(1<<PD5); //NMOS and PMOS on
 36a:	8b b1       	in	r24, 0x0b	; 11
 36c:	80 66       	ori	r24, 0x60	; 96
 36e:	8b b9       	out	0x0b, r24	; 11
			 count++;
 370:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <count>
 37a:	20 c0       	rjmp	.+64     	; 0x3bc <__vector_11+0x108>
		 }
		 else if(count > noOfWaves){//DEADZONE: leave the port off for 14ms in total
 37c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count>
 380:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 384:	89 17       	cp	r24, r25
 386:	80 f4       	brcc	.+32     	; 0x3a8 <__vector_11+0xf4>
			 PORTD &= ~(1<< PD6);
 388:	5e 98       	cbi	0x0b, 6	; 11
			 PORTD &= ~(1<<PD5);
 38a:	5d 98       	cbi	0x0b, 5	; 11
			 PWM_Change(CalculateDeadTime(),65535); //apply deadzone
 38c:	0e 94 47 01 	call	0x28e	; 0x28e <CalculateDeadTime>
 390:	6f ef       	ldi	r22, 0xFF	; 255
 392:	7f ef       	ldi	r23, 0xFF	; 255
 394:	0e 94 72 00 	call	0xe4	; 0xe4 <PWM_Change>
			 isLHS = true;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isLHS>
			 count = 0;
 39e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count>
			 isDead = true; //deadzone begins
 3a2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isDead>
 3a6:	0a c0       	rjmp	.+20     	; 0x3bc <__vector_11+0x108>
		 }
		 else{	//end of deadzone, set the pwm frequency back to normal
			 //TCCR1B &= ~(1<<CS11);
			 isDead = false;
 3a8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <isDead>
			 PWM_Change(125,ConvertTimerValueToDutyCycle());
 3ac:	0e 94 33 01 	call	0x266	; 0x266 <ConvertTimerValueToDutyCycle>
 3b0:	68 2f       	mov	r22, r24
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	8d e7       	ldi	r24, 0x7D	; 125
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 72 00 	call	0xe4	; 0xe4 <PWM_Change>
		 }
		 
	 }
 }
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <main>:
}


int main(void)
{	
    sei();
 3de:	78 94       	sei
	UART_Init(UBRRVALUE);
 3e0:	63 e3       	ldi	r22, 0x33	; 51
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_Init>
	ADC_Init();
 3ec:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
 3f0:	0e 94 67 00 	call	0xce	; 0xce <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 3f4:	84 b1       	in	r24, 0x04	; 4
 3f6:	86 60       	ori	r24, 0x06	; 6
 3f8:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 3fa:	8a b1       	in	r24, 0x0a	; 10
 3fc:	80 66       	ori	r24, 0x60	; 96
 3fe:	8a b9       	out	0x0a, r24	; 10

    while (1) 
    {
		UART_Transmit(55);
 400:	87 e3       	ldi	r24, 0x37	; 55
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 90 00 	call	0x120	; 0x120 <UART_Transmit>
		if(changePumpingEffort){
 408:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 40c:	88 23       	and	r24, r24
 40e:	c1 f3       	breq	.-16     	; 0x400 <__LOCK_REGION_LENGTH__>
			 UART_InterpretPumpingEffort();
 410:	0e 94 9b 00 	call	0x136	; 0x136 <UART_InterpretPumpingEffort>
			 ConvertTimerValueToDutyCycle();
 414:	0e 94 33 01 	call	0x266	; 0x266 <ConvertTimerValueToDutyCycle>
 418:	f3 cf       	rjmp	.-26     	; 0x400 <__LOCK_REGION_LENGTH__>

0000041a <__mulsi3>:
 41a:	db 01       	movw	r26, r22
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__muluhisi3>
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	a2 9f       	mul	r26, r18
 42a:	80 0d       	add	r24, r0
 42c:	91 1d       	adc	r25, r1
 42e:	a3 9f       	mul	r26, r19
 430:	90 0d       	add	r25, r0
 432:	b2 9f       	mul	r27, r18
 434:	90 0d       	add	r25, r0
 436:	11 24       	eor	r1, r1
 438:	08 95       	ret

0000043a <__divmodhi4>:
 43a:	97 fb       	bst	r25, 7
 43c:	07 2e       	mov	r0, r23
 43e:	16 f4       	brtc	.+4      	; 0x444 <__divmodhi4+0xa>
 440:	00 94       	com	r0
 442:	07 d0       	rcall	.+14     	; 0x452 <__divmodhi4_neg1>
 444:	77 fd       	sbrc	r23, 7
 446:	09 d0       	rcall	.+18     	; 0x45a <__divmodhi4_neg2>
 448:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__udivmodhi4>
 44c:	07 fc       	sbrc	r0, 7
 44e:	05 d0       	rcall	.+10     	; 0x45a <__divmodhi4_neg2>
 450:	3e f4       	brtc	.+14     	; 0x460 <__divmodhi4_exit>

00000452 <__divmodhi4_neg1>:
 452:	90 95       	com	r25
 454:	81 95       	neg	r24
 456:	9f 4f       	sbci	r25, 0xFF	; 255
 458:	08 95       	ret

0000045a <__divmodhi4_neg2>:
 45a:	70 95       	com	r23
 45c:	61 95       	neg	r22
 45e:	7f 4f       	sbci	r23, 0xFF	; 255

00000460 <__divmodhi4_exit>:
 460:	08 95       	ret

00000462 <__udivmodsi4>:
 462:	a1 e2       	ldi	r26, 0x21	; 33
 464:	1a 2e       	mov	r1, r26
 466:	aa 1b       	sub	r26, r26
 468:	bb 1b       	sub	r27, r27
 46a:	fd 01       	movw	r30, r26
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__udivmodsi4_ep>

0000046e <__udivmodsi4_loop>:
 46e:	aa 1f       	adc	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	ee 1f       	adc	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	a2 17       	cp	r26, r18
 478:	b3 07       	cpc	r27, r19
 47a:	e4 07       	cpc	r30, r20
 47c:	f5 07       	cpc	r31, r21
 47e:	20 f0       	brcs	.+8      	; 0x488 <__udivmodsi4_ep>
 480:	a2 1b       	sub	r26, r18
 482:	b3 0b       	sbc	r27, r19
 484:	e4 0b       	sbc	r30, r20
 486:	f5 0b       	sbc	r31, r21

00000488 <__udivmodsi4_ep>:
 488:	66 1f       	adc	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a 94       	dec	r1
 492:	69 f7       	brne	.-38     	; 0x46e <__udivmodsi4_loop>
 494:	60 95       	com	r22
 496:	70 95       	com	r23
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	9b 01       	movw	r18, r22
 49e:	ac 01       	movw	r20, r24
 4a0:	bd 01       	movw	r22, r26
 4a2:	cf 01       	movw	r24, r30
 4a4:	08 95       	ret

000004a6 <__divmodsi4>:
 4a6:	05 2e       	mov	r0, r21
 4a8:	97 fb       	bst	r25, 7
 4aa:	1e f4       	brtc	.+6      	; 0x4b2 <__divmodsi4+0xc>
 4ac:	00 94       	com	r0
 4ae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__negsi2>
 4b2:	57 fd       	sbrc	r21, 7
 4b4:	07 d0       	rcall	.+14     	; 0x4c4 <__divmodsi4_neg2>
 4b6:	0e 94 31 02 	call	0x462	; 0x462 <__udivmodsi4>
 4ba:	07 fc       	sbrc	r0, 7
 4bc:	03 d0       	rcall	.+6      	; 0x4c4 <__divmodsi4_neg2>
 4be:	4e f4       	brtc	.+18     	; 0x4d2 <__divmodsi4_exit>
 4c0:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__negsi2>

000004c4 <__divmodsi4_neg2>:
 4c4:	50 95       	com	r21
 4c6:	40 95       	com	r20
 4c8:	30 95       	com	r19
 4ca:	21 95       	neg	r18
 4cc:	3f 4f       	sbci	r19, 0xFF	; 255
 4ce:	4f 4f       	sbci	r20, 0xFF	; 255
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255

000004d2 <__divmodsi4_exit>:
 4d2:	08 95       	ret

000004d4 <__negsi2>:
 4d4:	90 95       	com	r25
 4d6:	80 95       	com	r24
 4d8:	70 95       	com	r23
 4da:	61 95       	neg	r22
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	8f 4f       	sbci	r24, 0xFF	; 255
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	08 95       	ret

000004e4 <__muluhisi3>:
 4e4:	0e 94 91 02 	call	0x522	; 0x522 <__umulhisi3>
 4e8:	a5 9f       	mul	r26, r21
 4ea:	90 0d       	add	r25, r0
 4ec:	b4 9f       	mul	r27, r20
 4ee:	90 0d       	add	r25, r0
 4f0:	a4 9f       	mul	r26, r20
 4f2:	80 0d       	add	r24, r0
 4f4:	91 1d       	adc	r25, r1
 4f6:	11 24       	eor	r1, r1
 4f8:	08 95       	ret

000004fa <__udivmodhi4>:
 4fa:	aa 1b       	sub	r26, r26
 4fc:	bb 1b       	sub	r27, r27
 4fe:	51 e1       	ldi	r21, 0x11	; 17
 500:	07 c0       	rjmp	.+14     	; 0x510 <__udivmodhi4_ep>

00000502 <__udivmodhi4_loop>:
 502:	aa 1f       	adc	r26, r26
 504:	bb 1f       	adc	r27, r27
 506:	a6 17       	cp	r26, r22
 508:	b7 07       	cpc	r27, r23
 50a:	10 f0       	brcs	.+4      	; 0x510 <__udivmodhi4_ep>
 50c:	a6 1b       	sub	r26, r22
 50e:	b7 0b       	sbc	r27, r23

00000510 <__udivmodhi4_ep>:
 510:	88 1f       	adc	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	5a 95       	dec	r21
 516:	a9 f7       	brne	.-22     	; 0x502 <__udivmodhi4_loop>
 518:	80 95       	com	r24
 51a:	90 95       	com	r25
 51c:	bc 01       	movw	r22, r24
 51e:	cd 01       	movw	r24, r26
 520:	08 95       	ret

00000522 <__umulhisi3>:
 522:	a2 9f       	mul	r26, r18
 524:	b0 01       	movw	r22, r0
 526:	b3 9f       	mul	r27, r19
 528:	c0 01       	movw	r24, r0
 52a:	a3 9f       	mul	r26, r19
 52c:	70 0d       	add	r23, r0
 52e:	81 1d       	adc	r24, r1
 530:	11 24       	eor	r1, r1
 532:	91 1d       	adc	r25, r1
 534:	b2 9f       	mul	r27, r18
 536:	70 0d       	add	r23, r0
 538:	81 1d       	adc	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	91 1d       	adc	r25, r1
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
