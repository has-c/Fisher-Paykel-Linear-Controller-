
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001106  0000119a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007c8  00800108  00800108  000011a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002342  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab0  00000000  00000000  0000368e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fef  00000000  00000000  0000413e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00005130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080e  00000000  00000000  00005494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e5f  00000000  00000000  00005ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_11>
      30:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e0       	ldi	r30, 0x06	; 6
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	28 e0       	ldi	r18, 0x08	; 8
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3d       	cpi	r26, 0xD0	; 208
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 83 06 	call	0xd06	; 0xd06 <main>
      9e:	0c 94 81 08 	jmp	0x1102	; 0x1102 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  
#include "adc.h"

void ADC_Init(){
	// selection channel is set to AREF
	ADMUX &= ~(1<<REFS1);
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	8f 77       	andi	r24, 0x7F	; 127
      ae:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS0);
      b0:	80 81       	ld	r24, Z
      b2:	8f 7b       	andi	r24, 0xBF	; 191
      b4:	80 83       	st	Z, r24
	//Turns on the ADC and sets prescaler to 32
	//enable ADC
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	
      b6:	ea e7       	ldi	r30, 0x7A	; 122
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	87 68       	ori	r24, 0x87	; 135
      be:	80 83       	st	Z, r24
      c0:	08 95       	ret

000000c2 <ADC_Read>:
}

//polling ADC 
uint32_t ADC_Read(){
	while(!(ADCSRA &&(1<<ADIF)));
      c2:	ea e7       	ldi	r30, 0x7A	; 122
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	80 81       	ld	r24, Z
      c8:	88 23       	and	r24, r24
      ca:	e9 f3       	breq	.-6      	; 0xc6 <ADC_Read+0x4>
	return ADC;
      cc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      d0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
}
      d8:	08 95       	ret

000000da <ADC_Calculate>:

//note: do not use float as ATMEGA328P does not have a floating point unit. It uses integers to perform float operations thus use integers and multiply them by 1000 to
//get millivolt(mV) accuracy 
uint32_t ADC_Calculate(){
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
	uint32_t  adcValue = ADC_Read();
      de:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
      e2:	9b 01       	movw	r18, r22
      e4:	ac 01       	movw	r20, r24
	uint32_t measuredVoltage = ((adcValue*1000)/1024) * 5;
	return measuredVoltage;
      e6:	a8 ee       	ldi	r26, 0xE8	; 232
      e8:	b3 e0       	ldi	r27, 0x03	; 3
      ea:	0e 94 76 08 	call	0x10ec	; 0x10ec <__muluhisi3>
      ee:	dc 01       	movw	r26, r24
      f0:	cb 01       	movw	r24, r22
      f2:	07 2e       	mov	r0, r23
      f4:	7a e0       	ldi	r23, 0x0A	; 10
      f6:	b6 95       	lsr	r27
      f8:	a7 95       	ror	r26
      fa:	97 95       	ror	r25
      fc:	87 95       	ror	r24
      fe:	7a 95       	dec	r23
     100:	d1 f7       	brne	.-12     	; 0xf6 <ADC_Calculate+0x1c>
     102:	70 2d       	mov	r23, r0
     104:	8c 01       	movw	r16, r24
     106:	9d 01       	movw	r18, r26
     108:	00 0f       	add	r16, r16
     10a:	11 1f       	adc	r17, r17
     10c:	22 1f       	adc	r18, r18
     10e:	33 1f       	adc	r19, r19
     110:	00 0f       	add	r16, r16
     112:	11 1f       	adc	r17, r17
     114:	22 1f       	adc	r18, r18
     116:	33 1f       	adc	r19, r19
     118:	bc 01       	movw	r22, r24
     11a:	cd 01       	movw	r24, r26
     11c:	60 0f       	add	r22, r16
     11e:	71 1f       	adc	r23, r17
     120:	82 1f       	adc	r24, r18
     122:	93 1f       	adc	r25, r19
}
     124:	1f 91       	pop	r17
     126:	0f 91       	pop	r16
     128:	08 95       	ret

0000012a <ADC_LHSVoltage>:

uint32_t ADC_LHSVoltage(){
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
     12a:	ec e7       	ldi	r30, 0x7C	; 124
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 7f       	andi	r24, 0xF0	; 240
     132:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     134:	ea e7       	ldi	r30, 0x7A	; 122
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	80 64       	ori	r24, 0x40	; 64
     13c:	80 83       	st	Z, r24
	uint32_t lhsVoltage = ADC_Calculate(); //calculates measured voltage 
     13e:	0e 94 6d 00 	call	0xda	; 0xda <ADC_Calculate>
     142:	9b 01       	movw	r18, r22
     144:	ac 01       	movw	r20, r24
	return (lhsVoltage*27/100); //return a 4 digit number that is the LHS voltage
     146:	ab e1       	ldi	r26, 0x1B	; 27
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	0e 94 76 08 	call	0x10ec	; 0x10ec <__muluhisi3>
     14e:	24 e6       	ldi	r18, 0x64	; 100
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	0e 94 45 08 	call	0x108a	; 0x108a <__udivmodsi4>
}
     15a:	ca 01       	movw	r24, r20
     15c:	b9 01       	movw	r22, r18
     15e:	08 95       	ret

00000160 <ADC_RHSVoltage>:

uint32_t ADC_RHSVoltage(){
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1));
     160:	ec e7       	ldi	r30, 0x7C	; 124
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	81 7f       	andi	r24, 0xF1	; 241
     168:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX0);
     16a:	80 81       	ld	r24, Z
     16c:	81 60       	ori	r24, 0x01	; 1
     16e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     170:	ea e7       	ldi	r30, 0x7A	; 122
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	80 64       	ori	r24, 0x40	; 64
     178:	80 83       	st	Z, r24
	uint32_t rhsVoltage = ADC_Calculate();
     17a:	0e 94 6d 00 	call	0xda	; 0xda <ADC_Calculate>
     17e:	9b 01       	movw	r18, r22
     180:	ac 01       	movw	r20, r24
	return (rhsVoltage*27/100);
     182:	ab e1       	ldi	r26, 0x1B	; 27
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	0e 94 76 08 	call	0x10ec	; 0x10ec <__muluhisi3>
     18a:	24 e6       	ldi	r18, 0x64	; 100
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	0e 94 45 08 	call	0x108a	; 0x108a <__udivmodsi4>
}
     196:	ca 01       	movw	r24, r20
     198:	b9 01       	movw	r22, r18
     19a:	08 95       	ret

0000019c <PWM_Init>:

#define PWM_FREQUENCY 1000

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
     19c:	e1 e8       	ldi	r30, 0x81	; 129
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	8b 60       	ori	r24, 0x0B	; 11
     1a4:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
     1a6:	ef e6       	ldi	r30, 0x6F	; 111
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	86 60       	ori	r24, 0x06	; 6
     1ae:	80 83       	st	Z, r24
     1b0:	08 95       	ret

000001b2 <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
     1b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
     1ba:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     1be:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     1c2:	08 95       	ret

000001c4 <PWM_ConvertTimerValueToDutyCycle>:
	
}

uint8_t PWM_ConvertTimerValueToDutyCycle(){
	return ((dutyCycle*125)/100);
     1c4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <dutyCycle>
     1c8:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <dutyCycle+0x1>
     1cc:	4d e7       	ldi	r20, 0x7D	; 125
     1ce:	48 9f       	mul	r20, r24
     1d0:	90 01       	movw	r18, r0
     1d2:	49 9f       	mul	r20, r25
     1d4:	30 0d       	add	r19, r0
     1d6:	11 24       	eor	r1, r1
     1d8:	36 95       	lsr	r19
     1da:	27 95       	ror	r18
     1dc:	36 95       	lsr	r19
     1de:	27 95       	ror	r18
     1e0:	ab e7       	ldi	r26, 0x7B	; 123
     1e2:	b4 e1       	ldi	r27, 0x14	; 20
     1e4:	0e 94 67 08 	call	0x10ce	; 0x10ce <__umulhisi3>
     1e8:	96 95       	lsr	r25
     1ea:	87 95       	ror	r24
}
     1ec:	08 95       	ret

000001ee <PWM_CalculateDeadTime>:

uint16_t PWM_CalculateDeadTime(){
	return (((5000/frequency) - (noOfWaves*(1000/PWM_FREQUENCY))))*125; //in ms
     1ee:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <frequency>
     1f2:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <frequency+0x1>
     1f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <noOfWaves>
     1fa:	88 e8       	ldi	r24, 0x88	; 136
     1fc:	93 e1       	ldi	r25, 0x13	; 19
     1fe:	0e 94 1d 08 	call	0x103a	; 0x103a <__udivmodhi4>
     202:	62 1b       	sub	r22, r18
     204:	71 09       	sbc	r23, r1
}
     206:	8d e7       	ldi	r24, 0x7D	; 125
     208:	28 2f       	mov	r18, r24
     20a:	26 9f       	mul	r18, r22
     20c:	c0 01       	movw	r24, r0
     20e:	27 9f       	mul	r18, r23
     210:	90 0d       	add	r25, r0
     212:	11 24       	eor	r1, r1
     214:	08 95       	ret

00000216 <UART_Init>:
}

uint8_t UART_ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
     216:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     21a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     21e:	e1 ec       	ldi	r30, 0xC1	; 193
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 e9       	ldi	r24, 0x90	; 144
     224:	80 83       	st	Z, r24
     226:	80 81       	ld	r24, Z
     228:	88 64       	ori	r24, 0x48	; 72
     22a:	80 83       	st	Z, r24
     22c:	86 e0       	ldi	r24, 0x06	; 6
     22e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     232:	08 95       	ret

00000234 <UART_Transmit>:
     234:	e1 ec       	ldi	r30, 0xC1	; 193
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	90 81       	ld	r25, Z
     23a:	9f 7e       	andi	r25, 0xEF	; 239
     23c:	90 83       	st	Z, r25
     23e:	90 81       	ld	r25, Z
     240:	9f 77       	andi	r25, 0x7F	; 127
     242:	90 83       	st	Z, r25
     244:	e0 ec       	ldi	r30, 0xC0	; 192
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	90 81       	ld	r25, Z
     24a:	99 23       	and	r25, r25
     24c:	e9 f3       	breq	.-6      	; 0x248 <UART_Transmit+0x14>
     24e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     252:	08 95       	ret

00000254 <UART_InterpretPumpingEffort>:


//only changes dutycycle
void UART_InterpretPumpingEffort(){
	if(pumpingEffort==255){
     254:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     258:	8f 3f       	cpi	r24, 0xFF	; 255
     25a:	71 f4       	brne	.+28     	; 0x278 <UART_InterpretPumpingEffort+0x24>
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
     25c:	e4 e6       	ldi	r30, 0x64	; 100
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	80 71       	andi	r24, 0x10	; 16
     264:	80 83       	st	Z, r24
		power_all_enable();
		dutyCycle = 99;
     266:	83 e6       	ldi	r24, 0x63	; 99
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <dutyCycle+0x1>
     26e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <dutyCycle>
		lowPowerMode = false;
     272:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lowPowerMode>
     276:	67 c0       	rjmp	.+206    	; 0x346 <UART_InterpretPumpingEffort+0xf2>
	}else if((pumpingEffort>=1)&&(pumpingEffort<=178)){
     278:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     27c:	88 23       	and	r24, r24
     27e:	59 f1       	breq	.+86     	; 0x2d6 <UART_InterpretPumpingEffort+0x82>
     280:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     284:	83 3b       	cpi	r24, 0xB3	; 179
     286:	38 f5       	brcc	.+78     	; 0x2d6 <UART_InterpretPumpingEffort+0x82>
     288:	e4 e6       	ldi	r30, 0x64	; 100
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	80 71       	andi	r24, 0x10	; 16
     290:	80 83       	st	Z, r24
		power_all_enable();
		if(!lowPowerMode){
     292:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     296:	81 11       	cpse	r24, r1
     298:	0a c0       	rjmp	.+20     	; 0x2ae <UART_InterpretPumpingEffort+0x5a>
			frequency /= 2;
     29a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <frequency>
     29e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <frequency+0x1>
     2a2:	96 95       	lsr	r25
     2a4:	87 95       	ror	r24
     2a6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <frequency+0x1>
     2aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <frequency>
		}
		lowPowerMode = true; //turn off two switches push from one direction
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lowPowerMode>
		dutyCycle = (30*pumpingEffort + 1300)/100;
     2b4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     2b8:	2e e1       	ldi	r18, 0x1E	; 30
     2ba:	82 9f       	mul	r24, r18
     2bc:	c0 01       	movw	r24, r0
     2be:	11 24       	eor	r1, r1
     2c0:	8c 5e       	subi	r24, 0xEC	; 236
     2c2:	9a 4f       	sbci	r25, 0xFA	; 250
     2c4:	64 e6       	ldi	r22, 0x64	; 100
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	0e 94 31 08 	call	0x1062	; 0x1062 <__divmodhi4>
     2cc:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <dutyCycle+0x1>
     2d0:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <dutyCycle>
     2d4:	38 c0       	rjmp	.+112    	; 0x346 <UART_InterpretPumpingEffort+0xf2>
	}else if((pumpingEffort>178)&&(pumpingEffort<=254)){
     2d6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     2da:	83 3b       	cpi	r24, 0xB3	; 179
     2dc:	40 f1       	brcs	.+80     	; 0x32e <UART_InterpretPumpingEffort+0xda>
     2de:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     2e2:	8f 3f       	cpi	r24, 0xFF	; 255
     2e4:	21 f1       	breq	.+72     	; 0x32e <UART_InterpretPumpingEffort+0xda>
     2e6:	e4 e6       	ldi	r30, 0x64	; 100
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	80 71       	andi	r24, 0x10	; 16
     2ee:	80 83       	st	Z, r24
		power_all_enable();
		if(lowPowerMode){
     2f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     2f4:	88 23       	and	r24, r24
     2f6:	51 f0       	breq	.+20     	; 0x30c <UART_InterpretPumpingEffort+0xb8>
			frequency *= 2;
     2f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <frequency>
     2fc:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <frequency+0x1>
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <frequency+0x1>
     308:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <frequency>
		}
		lowPowerMode = false;
     30c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lowPowerMode>
		dutyCycle = 37*pumpingEffort/100;
     310:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pumpingEffort>
     314:	25 e2       	ldi	r18, 0x25	; 37
     316:	82 9f       	mul	r24, r18
     318:	c0 01       	movw	r24, r0
     31a:	11 24       	eor	r1, r1
     31c:	64 e6       	ldi	r22, 0x64	; 100
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0e 94 31 08 	call	0x1062	; 0x1062 <__divmodhi4>
     324:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <dutyCycle+0x1>
     328:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <dutyCycle>
     32c:	0c c0       	rjmp	.+24     	; 0x346 <UART_InterpretPumpingEffort+0xf2>
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
     32e:	e4 e6       	ldi	r30, 0x64	; 100
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	8f 6e       	ori	r24, 0xEF	; 239
     336:	80 83       	st	Z, r24
	}else{ 
		power_all_disable(); //disables all modules on the microcontroller
		power_usart0_enable();
     338:	80 81       	ld	r24, Z
     33a:	8d 7f       	andi	r24, 0xFD	; 253
     33c:	80 83       	st	Z, r24
		dutyCycle = 0;
     33e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <dutyCycle+0x1>
     342:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <dutyCycle>
	}
	changePumpingEffort	 = false;
     346:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <changePumpingEffort>
     34a:	08 95       	ret

0000034c <MFCmodulator>:
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);

}


void MFCmodulator(uint8_t requiredValue, uint8_t currentValue){
     34c:	df 92       	push	r13
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	18 2f       	mov	r17, r24
     35c:	d6 2f       	mov	r29, r22
	//temp conversion variables. Used to split 3 digit numbers as only one digit can be sent at a time
	uint8_t firstDigit = 0;
	uint8_t secondDigit = 0;
	uint8_t thirdDigit = 0;
	
	UART_Transmit(13); //carriage return
     35e:	8d e0       	ldi	r24, 0x0D	; 13
     360:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(123); //{
     364:	8b e7       	ldi	r24, 0x7B	; 123
     366:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(10); //line feed 
     36a:	8a e0       	ldi	r24, 0x0A	; 10
     36c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(13); //carriage return
     370:	8d e0       	ldi	r24, 0x0D	; 13
     372:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	
	//LCC Identifier 
	UART_Transmit(34); //"
     376:	82 e2       	ldi	r24, 0x22	; 34
     378:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(51);//3
     37c:	83 e3       	ldi	r24, 0x33	; 51
     37e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     382:	82 e2       	ldi	r24, 0x22	; 34
     384:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58);//:
     388:	8a e3       	ldi	r24, 0x3A	; 58
     38a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>

	//MFC 
	UART_Transmit(10); //Line feed
     38e:	8a e0       	ldi	r24, 0x0A	; 10
     390:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(13); //carriage return
     394:	8d e0       	ldi	r24, 0x0D	; 13
     396:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(123); //{
     39a:	8b e7       	ldi	r24, 0x7B	; 123
     39c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(10); //Line feed
     3a0:	8a e0       	ldi	r24, 0x0A	; 10
     3a2:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(13); //carriage return
     3a6:	8d e0       	ldi	r24, 0x0D	; 13
     3a8:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	
	
	//MFC letter setup
	UART_Transmit(34); //'
     3ac:	82 e2       	ldi	r24, 0x22	; 34
     3ae:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(109);//m
     3b2:	8d e6       	ldi	r24, 0x6D	; 109
     3b4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(102);//f
     3b8:	86 e6       	ldi	r24, 0x66	; 102
     3ba:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(99);//c
     3be:	83 e6       	ldi	r24, 0x63	; 99
     3c0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     3c4:	82 e2       	ldi	r24, 0x22	; 34
     3c6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58);//:
     3ca:	8a e3       	ldi	r24, 0x3A	; 58
     3cc:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	 

	//MFC Values 
	UART_Transmit(123); //{
     3d0:	8b e7       	ldi	r24, 0x7B	; 123
     3d2:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34); //"
     3d6:	82 e2       	ldi	r24, 0x22	; 34
     3d8:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(114);//r
     3dc:	82 e7       	ldi	r24, 0x72	; 114
     3de:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(101);//e
     3e2:	85 e6       	ldi	r24, 0x65	; 101
     3e4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(113);//q
     3e8:	81 e7       	ldi	r24, 0x71	; 113
     3ea:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     3ee:	82 e2       	ldi	r24, 0x22	; 34
     3f0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58);//:
     3f4:	8a e3       	ldi	r24, 0x3A	; 58
     3f6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     3fa:	82 e2       	ldi	r24, 0x22	; 34
     3fc:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	
	//required value transmission
	firstDigit = requiredValue/100;
     400:	c9 e2       	ldi	r28, 0x29	; 41
     402:	1c 9f       	mul	r17, r28
     404:	21 2d       	mov	r18, r1
     406:	11 24       	eor	r1, r1
     408:	22 95       	swap	r18
     40a:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (requiredValue-(firstDigit*100))/10;
     40c:	0f 2e       	mov	r0, r31
     40e:	fc e9       	ldi	r31, 0x9C	; 156
     410:	df 2e       	mov	r13, r31
     412:	f0 2d       	mov	r31, r0
     414:	3d 2d       	mov	r19, r13
     416:	32 03       	mulsu	r19, r18
     418:	c0 01       	movw	r24, r0
     41a:	11 24       	eor	r1, r1
     41c:	81 0f       	add	r24, r17
     41e:	91 1d       	adc	r25, r1
     420:	0f 2e       	mov	r0, r31
     422:	fa e0       	ldi	r31, 0x0A	; 10
     424:	ef 2e       	mov	r14, r31
     426:	f1 2c       	mov	r15, r1
     428:	f0 2d       	mov	r31, r0
     42a:	b7 01       	movw	r22, r14
     42c:	0e 94 31 08 	call	0x1062	; 0x1062 <__divmodhi4>
     430:	06 2f       	mov	r16, r22
     432:	10 5d       	subi	r17, 0xD0	; 208
     434:	2d 9d       	mul	r18, r13
     436:	10 0d       	add	r17, r0
     438:	11 24       	eor	r1, r1
	thirdDigit = requiredValue - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     43a:	80 e3       	ldi	r24, 0x30	; 48
     43c:	82 0f       	add	r24, r18
     43e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit)); 
     442:	80 e3       	ldi	r24, 0x30	; 48
     444:	80 0f       	add	r24, r16
     446:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     44a:	00 0f       	add	r16, r16
     44c:	80 2f       	mov	r24, r16
     44e:	88 0f       	add	r24, r24
     450:	88 0f       	add	r24, r24
     452:	08 0f       	add	r16, r24
     454:	81 2f       	mov	r24, r17
     456:	80 1b       	sub	r24, r16
     458:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     45c:	82 e2       	ldi	r24, 0x22	; 34
     45e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(44);//,
     462:	8c e2       	ldi	r24, 0x2C	; 44
     464:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	

	UART_Transmit(34);//"
     468:	82 e2       	ldi	r24, 0x22	; 34
     46a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(99);//c
     46e:	83 e6       	ldi	r24, 0x63	; 99
     470:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(117);//u
     474:	85 e7       	ldi	r24, 0x75	; 117
     476:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(114);//r
     47a:	82 e7       	ldi	r24, 0x72	; 114
     47c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     480:	82 e2       	ldi	r24, 0x22	; 34
     482:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58);//:
     486:	8a e3       	ldi	r24, 0x3A	; 58
     488:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     48c:	82 e2       	ldi	r24, 0x22	; 34
     48e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	//current value transmission
	firstDigit = currentValue/100;
     492:	dc 9f       	mul	r29, r28
     494:	21 2d       	mov	r18, r1
     496:	11 24       	eor	r1, r1
     498:	22 95       	swap	r18
     49a:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (currentValue-(firstDigit*100))/10;
     49c:	3d 2d       	mov	r19, r13
     49e:	32 03       	mulsu	r19, r18
     4a0:	c0 01       	movw	r24, r0
     4a2:	11 24       	eor	r1, r1
     4a4:	8d 0f       	add	r24, r29
     4a6:	91 1d       	adc	r25, r1
     4a8:	b7 01       	movw	r22, r14
     4aa:	0e 94 31 08 	call	0x1062	; 0x1062 <__divmodhi4>
     4ae:	c6 2f       	mov	r28, r22
     4b0:	d0 5d       	subi	r29, 0xD0	; 208
     4b2:	2d 9d       	mul	r18, r13
     4b4:	d0 0d       	add	r29, r0
     4b6:	11 24       	eor	r1, r1
	thirdDigit = currentValue - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     4b8:	80 e3       	ldi	r24, 0x30	; 48
     4ba:	82 0f       	add	r24, r18
     4bc:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     4c0:	80 e3       	ldi	r24, 0x30	; 48
     4c2:	8c 0f       	add	r24, r28
     4c4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     4c8:	cc 0f       	add	r28, r28
     4ca:	8c 2f       	mov	r24, r28
     4cc:	88 0f       	add	r24, r24
     4ce:	88 0f       	add	r24, r24
     4d0:	c8 0f       	add	r28, r24
     4d2:	8d 2f       	mov	r24, r29
     4d4:	8c 1b       	sub	r24, r28
     4d6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	
	UART_Transmit(34);//"
     4da:	82 e2       	ldi	r24, 0x22	; 34
     4dc:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(125);//}
     4e0:	8d e7       	ldi	r24, 0x7D	; 125
     4e2:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(44);//,
     4e6:	8c e2       	ldi	r24, 0x2C	; 44
     4e8:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(10); //Line feed
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(13); //carriage return
     4f2:	8d e0       	ldi	r24, 0x0D	; 13
     4f4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	 
	
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	df 90       	pop	r13
     506:	08 95       	ret

00000508 <VERmodulator>:

void VERmodulator(){
	UART_Transmit(34); //"
     508:	82 e2       	ldi	r24, 0x22	; 34
     50a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(118);//v
     50e:	86 e7       	ldi	r24, 0x76	; 118
     510:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(101);//e
     514:	85 e6       	ldi	r24, 0x65	; 101
     516:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(114);//r
     51a:	82 e7       	ldi	r24, 0x72	; 114
     51c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     520:	82 e2       	ldi	r24, 0x22	; 34
     522:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58);//:
     526:	8a e3       	ldi	r24, 0x3A	; 58
     528:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     52c:	82 e2       	ldi	r24, 0x22	; 34
     52e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(49); //1
     532:	81 e3       	ldi	r24, 0x31	; 49
     534:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(46);//.
     538:	8e e2       	ldi	r24, 0x2E	; 46
     53a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(50);//2
     53e:	82 e3       	ldi	r24, 0x32	; 50
     540:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(46);//.
     544:	8e e2       	ldi	r24, 0x2E	; 46
     546:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(51);//3
     54a:	83 e3       	ldi	r24, 0x33	; 51
     54c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     550:	82 e2       	ldi	r24, 0x22	; 34
     552:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(44); //,
     556:	8c e2       	ldi	r24, 0x2C	; 44
     558:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(10); //Line feed 
     55c:	8a e0       	ldi	r24, 0x0A	; 10
     55e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(13); //carriage return
     562:	8d e0       	ldi	r24, 0x0D	; 13
     564:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
     568:	08 95       	ret

0000056a <PARAMmodulator>:
	 
}

void PARAMmodulator(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current){
     56a:	8f 92       	push	r8
     56c:	9f 92       	push	r9
     56e:	af 92       	push	r10
     570:	bf 92       	push	r11
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	c8 2f       	mov	r28, r24
     584:	96 2e       	mov	r9, r22
     586:	69 01       	movw	r12, r18
     588:	7a 01       	movw	r14, r20
	uint8_t firstDigit; 
	uint8_t secondDigit;
	uint8_t thirdDigit;
	uint8_t fourthDigit;
	UART_Transmit(34);//"
     58a:	82 e2       	ldi	r24, 0x22	; 34
     58c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(112);//p
     590:	80 e7       	ldi	r24, 0x70	; 112
     592:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(97);//a
     596:	81 e6       	ldi	r24, 0x61	; 97
     598:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(114);//r
     59c:	82 e7       	ldi	r24, 0x72	; 114
     59e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(97);//a
     5a2:	81 e6       	ldi	r24, 0x61	; 97
     5a4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(109);//m
     5a8:	8d e6       	ldi	r24, 0x6D	; 109
     5aa:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     5ae:	82 e2       	ldi	r24, 0x22	; 34
     5b0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58);//:
     5b4:	8a e3       	ldi	r24, 0x3A	; 58
     5b6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(123);//{
     5ba:	8b e7       	ldi	r24, 0x7B	; 123
     5bc:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	
	//parameters
	
	UART_Transmit(34); //"
     5c0:	82 e2       	ldi	r24, 0x22	; 34
     5c2:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(112); //p
     5c6:	80 e7       	ldi	r24, 0x70	; 112
     5c8:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(119); //w
     5cc:	87 e7       	ldi	r24, 0x77	; 119
     5ce:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(114);//r 
     5d2:	82 e7       	ldi	r24, 0x72	; 114
     5d4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34); //"
     5d8:	82 e2       	ldi	r24, 0x22	; 34
     5da:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58); //:
     5de:	8a e3       	ldi	r24, 0x3A	; 58
     5e0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     5e4:	82 e2       	ldi	r24, 0x22	; 34
     5e6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	
	//power parameters 
	firstDigit = averagePower/100;
     5ea:	d9 e2       	ldi	r29, 0x29	; 41
     5ec:	cd 9f       	mul	r28, r29
     5ee:	21 2d       	mov	r18, r1
     5f0:	11 24       	eor	r1, r1
     5f2:	22 95       	swap	r18
     5f4:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (averagePower-(firstDigit*100))/10;
     5f6:	1c e9       	ldi	r17, 0x9C	; 156
     5f8:	12 03       	mulsu	r17, r18
     5fa:	c0 01       	movw	r24, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	8c 0f       	add	r24, r28
     600:	91 1d       	adc	r25, r1
     602:	0f 2e       	mov	r0, r31
     604:	fa e0       	ldi	r31, 0x0A	; 10
     606:	af 2e       	mov	r10, r31
     608:	b1 2c       	mov	r11, r1
     60a:	f0 2d       	mov	r31, r0
     60c:	b5 01       	movw	r22, r10
     60e:	0e 94 31 08 	call	0x1062	; 0x1062 <__divmodhi4>
     612:	86 2e       	mov	r8, r22
     614:	c0 5d       	subi	r28, 0xD0	; 208
     616:	21 9f       	mul	r18, r17
     618:	c0 0d       	add	r28, r0
     61a:	11 24       	eor	r1, r1
	thirdDigit = averagePower - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     61c:	80 e3       	ldi	r24, 0x30	; 48
     61e:	82 0f       	add	r24, r18
     620:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     624:	80 e3       	ldi	r24, 0x30	; 48
     626:	88 0d       	add	r24, r8
     628:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(46); //decimal point
     62c:	8e e2       	ldi	r24, 0x2E	; 46
     62e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     632:	88 0c       	add	r8, r8
     634:	88 2d       	mov	r24, r8
     636:	88 0f       	add	r24, r24
     638:	88 0f       	add	r24, r24
     63a:	88 0e       	add	r8, r24
     63c:	8c 2f       	mov	r24, r28
     63e:	88 19       	sub	r24, r8
     640:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(87); //W
     644:	87 e5       	ldi	r24, 0x57	; 87
     646:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34); //"
     64a:	82 e2       	ldi	r24, 0x22	; 34
     64c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(44); //,
     650:	8c e2       	ldi	r24, 0x2C	; 44
     652:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	 
	 
	
	//frequency
	UART_Transmit(34); //"
     656:	82 e2       	ldi	r24, 0x22	; 34
     658:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(102);//f
     65c:	86 e6       	ldi	r24, 0x66	; 102
     65e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(114);//r
     662:	82 e7       	ldi	r24, 0x72	; 114
     664:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(101);//e
     668:	85 e6       	ldi	r24, 0x65	; 101
     66a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(113);//q
     66e:	81 e7       	ldi	r24, 0x71	; 113
     670:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     674:	82 e2       	ldi	r24, 0x22	; 34
     676:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58);//:
     67a:	8a e3       	ldi	r24, 0x3A	; 58
     67c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     680:	82 e2       	ldi	r24, 0x22	; 34
     682:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	firstDigit = operatingFrequency/10;
     686:	cd ec       	ldi	r28, 0xCD	; 205
     688:	9c 9e       	mul	r9, r28
     68a:	c1 2d       	mov	r28, r1
     68c:	11 24       	eor	r1, r1
     68e:	c6 95       	lsr	r28
     690:	c6 95       	lsr	r28
     692:	c6 95       	lsr	r28
	secondDigit = operatingFrequency-(firstDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     694:	80 e3       	ldi	r24, 0x30	; 48
     696:	8c 0f       	add	r24, r28
     698:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     69c:	cc 0f       	add	r28, r28
     69e:	8c 2f       	mov	r24, r28
     6a0:	88 0f       	add	r24, r24
     6a2:	88 0f       	add	r24, r24
     6a4:	c8 0f       	add	r28, r24
     6a6:	80 e3       	ldi	r24, 0x30	; 48
     6a8:	89 0d       	add	r24, r9
     6aa:	8c 1b       	sub	r24, r28
     6ac:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(72); //H
     6b0:	88 e4       	ldi	r24, 0x48	; 72
     6b2:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(122);//z
     6b6:	8a e7       	ldi	r24, 0x7A	; 122
     6b8:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     6bc:	82 e2       	ldi	r24, 0x22	; 34
     6be:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(44);//,
     6c2:	8c e2       	ldi	r24, 0x2C	; 44
     6c4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	
	//current 

	UART_Transmit(34); //"
     6c8:	82 e2       	ldi	r24, 0x22	; 34
     6ca:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(99); //c
     6ce:	83 e6       	ldi	r24, 0x63	; 99
     6d0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(117); //u
     6d4:	85 e7       	ldi	r24, 0x75	; 117
     6d6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(114);//r
     6da:	82 e7       	ldi	r24, 0x72	; 114
     6dc:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(114);//r
     6e0:	82 e7       	ldi	r24, 0x72	; 114
     6e2:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34); //"
     6e6:	82 e2       	ldi	r24, 0x22	; 34
     6e8:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58); //:
     6ec:	8a e3       	ldi	r24, 0x3A	; 58
     6ee:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34);//"
     6f2:	82 e2       	ldi	r24, 0x22	; 34
     6f4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	firstDigit = current/100;
     6f8:	0d 9f       	mul	r16, r29
     6fa:	21 2d       	mov	r18, r1
     6fc:	11 24       	eor	r1, r1
     6fe:	22 95       	swap	r18
     700:	2f 70       	andi	r18, 0x0F	; 15
	secondDigit = (current-(firstDigit*100))/10;
     702:	12 03       	mulsu	r17, r18
     704:	c0 01       	movw	r24, r0
     706:	11 24       	eor	r1, r1
     708:	80 0f       	add	r24, r16
     70a:	91 1d       	adc	r25, r1
     70c:	b5 01       	movw	r22, r10
     70e:	0e 94 31 08 	call	0x1062	; 0x1062 <__divmodhi4>
     712:	c6 2f       	mov	r28, r22
     714:	00 5d       	subi	r16, 0xD0	; 208
     716:	21 9f       	mul	r18, r17
     718:	00 0d       	add	r16, r0
     71a:	11 24       	eor	r1, r1
	thirdDigit = current - (firstDigit*100) - (secondDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     71c:	80 e3       	ldi	r24, 0x30	; 48
     71e:	82 0f       	add	r24, r18
     720:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     724:	80 e3       	ldi	r24, 0x30	; 48
     726:	8c 0f       	add	r24, r28
     728:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     72c:	cc 0f       	add	r28, r28
     72e:	8c 2f       	mov	r24, r28
     730:	88 0f       	add	r24, r24
     732:	88 0f       	add	r24, r24
     734:	c8 0f       	add	r28, r24
     736:	80 2f       	mov	r24, r16
     738:	8c 1b       	sub	r24, r28
     73a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(109); //m
     73e:	8d e6       	ldi	r24, 0x6D	; 109
     740:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(65); //A
     744:	81 e4       	ldi	r24, 0x41	; 65
     746:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34); //"
     74a:	82 e2       	ldi	r24, 0x22	; 34
     74c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(44); //,
     750:	8c e2       	ldi	r24, 0x2C	; 44
     752:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	
	//applied voltage
	 
	UART_Transmit(34); //"
     756:	82 e2       	ldi	r24, 0x22	; 34
     758:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(118); //v
     75c:	86 e7       	ldi	r24, 0x76	; 118
     75e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(111); //o
     762:	8f e6       	ldi	r24, 0x6F	; 111
     764:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(108); //l
     768:	8c e6       	ldi	r24, 0x6C	; 108
     76a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(116); //t
     76e:	84 e7       	ldi	r24, 0x74	; 116
     770:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34); //"
     774:	82 e2       	ldi	r24, 0x22	; 34
     776:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(58); //:
     77a:	8a e3       	ldi	r24, 0x3A	; 58
     77c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34); //"
     780:	82 e2       	ldi	r24, 0x22	; 34
     782:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	firstDigit = appliedVoltage/1000;
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	28 ee       	ldi	r18, 0xE8	; 232
     78c:	33 e0       	ldi	r19, 0x03	; 3
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	0e 94 45 08 	call	0x108a	; 0x108a <__udivmodsi4>
     796:	12 2f       	mov	r17, r18
	secondDigit = (appliedVoltage-(firstDigit*1000))/100;
     798:	28 ee       	ldi	r18, 0xE8	; 232
     79a:	33 e0       	ldi	r19, 0x03	; 3
     79c:	12 9f       	mul	r17, r18
     79e:	c0 01       	movw	r24, r0
     7a0:	13 9f       	mul	r17, r19
     7a2:	90 0d       	add	r25, r0
     7a4:	11 24       	eor	r1, r1
     7a6:	09 2e       	mov	r0, r25
     7a8:	00 0c       	add	r0, r0
     7aa:	aa 0b       	sbc	r26, r26
     7ac:	bb 0b       	sbc	r27, r27
     7ae:	46 01       	movw	r8, r12
     7b0:	57 01       	movw	r10, r14
     7b2:	88 1a       	sub	r8, r24
     7b4:	99 0a       	sbc	r9, r25
     7b6:	aa 0a       	sbc	r10, r26
     7b8:	bb 0a       	sbc	r11, r27
     7ba:	c5 01       	movw	r24, r10
     7bc:	b4 01       	movw	r22, r8
     7be:	24 e6       	ldi	r18, 0x64	; 100
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	0e 94 45 08 	call	0x108a	; 0x108a <__udivmodsi4>
     7ca:	d2 2f       	mov	r29, r18
	thirdDigit = (appliedVoltage - (firstDigit*1000) - (secondDigit*100))/10;
     7cc:	04 e6       	ldi	r16, 0x64	; 100
     7ce:	02 9f       	mul	r16, r18
     7d0:	c0 01       	movw	r24, r0
     7d2:	11 24       	eor	r1, r1
     7d4:	09 2e       	mov	r0, r25
     7d6:	00 0c       	add	r0, r0
     7d8:	aa 0b       	sbc	r26, r26
     7da:	bb 0b       	sbc	r27, r27
     7dc:	a5 01       	movw	r20, r10
     7de:	94 01       	movw	r18, r8
     7e0:	28 1b       	sub	r18, r24
     7e2:	39 0b       	sbc	r19, r25
     7e4:	4a 0b       	sbc	r20, r26
     7e6:	5b 0b       	sbc	r21, r27
     7e8:	ca 01       	movw	r24, r20
     7ea:	b9 01       	movw	r22, r18
     7ec:	2a e0       	ldi	r18, 0x0A	; 10
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	0e 94 45 08 	call	0x108a	; 0x108a <__udivmodsi4>
     7f8:	c2 2f       	mov	r28, r18
     7fa:	8c 2d       	mov	r24, r12
     7fc:	38 e1       	ldi	r19, 0x18	; 24
     7fe:	13 9f       	mul	r17, r19
     800:	80 0d       	add	r24, r0
     802:	11 24       	eor	r1, r1
     804:	80 5d       	subi	r24, 0xD0	; 208
     806:	c8 2e       	mov	r12, r24
     808:	0d 9f       	mul	r16, r29
     80a:	c0 18       	sub	r12, r0
     80c:	11 24       	eor	r1, r1
	fourthDigit = appliedVoltage -(firstDigit*1000) - (secondDigit*100) - (thirdDigit*10);
	UART_Transmit(UART_ASCIIConversion(firstDigit));
     80e:	80 e3       	ldi	r24, 0x30	; 48
     810:	81 0f       	add	r24, r17
     812:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(secondDigit));
     816:	80 e3       	ldi	r24, 0x30	; 48
     818:	8d 0f       	add	r24, r29
     81a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(46); //decimal point
     81e:	8e e2       	ldi	r24, 0x2E	; 46
     820:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(thirdDigit));
     824:	80 e3       	ldi	r24, 0x30	; 48
     826:	8c 0f       	add	r24, r28
     828:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(UART_ASCIIConversion(fourthDigit));
     82c:	cc 0f       	add	r28, r28
     82e:	8c 2f       	mov	r24, r28
     830:	88 0f       	add	r24, r24
     832:	88 0f       	add	r24, r24
     834:	c8 0f       	add	r28, r24
     836:	8c 2d       	mov	r24, r12
     838:	8c 1b       	sub	r24, r28
     83a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(86); //V
     83e:	86 e5       	ldi	r24, 0x56	; 86
     840:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(34); //"
     844:	82 e2       	ldi	r24, 0x22	; 34
     846:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	
	 
	UART_Transmit(125); //}
     84a:	8d e7       	ldi	r24, 0x7D	; 125
     84c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(44);//,
     850:	8c e2       	ldi	r24, 0x2C	; 44
     852:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(10); //line feed
     856:	8a e0       	ldi	r24, 0x0A	; 10
     858:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(13); //carriage return
     85c:	8d e0       	ldi	r24, 0x0D	; 13
     85e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	 
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	bf 90       	pop	r11
     874:	af 90       	pop	r10
     876:	9f 90       	pop	r9
     878:	8f 90       	pop	r8
     87a:	08 95       	ret

0000087c <ERRORmodulator>:

void ERRORmodulator(bool jamErrorFlag, bool collisionErrorFlag){  
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	d8 2f       	mov	r29, r24
     882:	c6 2f       	mov	r28, r22
	//error clear tells us whether we need to clear the error array
	if(clearErrorFlag){
     884:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <clearErrorFlag>
     888:	88 23       	and	r24, r24
     88a:	51 f1       	breq	.+84     	; 0x8e0 <ERRORmodulator+0x64>
		UART_Transmit(34); //"
     88c:	82 e2       	ldi	r24, 0x22	; 34
     88e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(99); //c
     892:	83 e6       	ldi	r24, 0x63	; 99
     894:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(108); //l
     898:	8c e6       	ldi	r24, 0x6C	; 108
     89a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(114); //r
     89e:	82 e7       	ldi	r24, 0x72	; 114
     8a0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(34); //"
     8a4:	82 e2       	ldi	r24, 0x22	; 34
     8a6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(58); //:
     8aa:	8a e3       	ldi	r24, 0x3A	; 58
     8ac:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(34); //"
     8b0:	82 e2       	ldi	r24, 0x22	; 34
     8b2:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(101); //e
     8b6:	85 e6       	ldi	r24, 0x65	; 101
     8b8:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(119); //w
     8bc:	87 e7       	ldi	r24, 0x77	; 119
     8be:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(34); //"
     8c2:	82 e2       	ldi	r24, 0x22	; 34
     8c4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(44); //,
     8c8:	8c e2       	ldi	r24, 0x2C	; 44
     8ca:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(10); //line feed
     8ce:	8a e0       	ldi	r24, 0x0A	; 10
     8d0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(13); //carriage return
     8d4:	8d e0       	ldi	r24, 0x0D	; 13
     8d6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		clearErrorFlag = false;
     8da:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <clearErrorFlag>
     8de:	36 c0       	rjmp	.+108    	; 0x94c <__stack+0x4d>
	}else{
		UART_Transmit(10); //line feed
     8e0:	8a e0       	ldi	r24, 0x0A	; 10
     8e2:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		UART_Transmit(13); //carriage return
     8e6:	8d e0       	ldi	r24, 0x0D	; 13
     8e8:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
		
		if(collisionErrorFlag || jamErrorFlag) {
     8ec:	c1 11       	cpse	r28, r1
     8ee:	7c c0       	rjmp	.+248    	; 0x9e8 <__stack+0xe9>
     8f0:	d1 11       	cpse	r29, r1
     8f2:	45 c0       	rjmp	.+138    	; 0x97e <__stack+0x7f>
     8f4:	25 c0       	rjmp	.+74     	; 0x940 <__stack+0x41>
					UART_Transmit(44); //,
				}
			}

			if(collisionErrorFlag){ //compressor colliding
				UART_Transmit(34); //"
     8f6:	82 e2       	ldi	r24, 0x22	; 34
     8f8:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(99); //c
     8fc:	83 e6       	ldi	r24, 0x63	; 99
     8fe:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(111); //o
     902:	8f e6       	ldi	r24, 0x6F	; 111
     904:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(108); //l
     908:	8c e6       	ldi	r24, 0x6C	; 108
     90a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(108); //l
     90e:	8c e6       	ldi	r24, 0x6C	; 108
     910:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(105); //i
     914:	89 e6       	ldi	r24, 0x69	; 105
     916:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(115); //s
     91a:	83 e7       	ldi	r24, 0x73	; 115
     91c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(105); //i
     920:	89 e6       	ldi	r24, 0x69	; 105
     922:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(111); //o
     926:	8f e6       	ldi	r24, 0x6F	; 111
     928:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(110); //n
     92c:	8e e6       	ldi	r24, 0x6E	; 110
     92e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(34); //"
     932:	82 e2       	ldi	r24, 0x22	; 34
     934:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			}
			
			
			UART_Transmit(93); //[
     938:	8d e5       	ldi	r24, 0x5D	; 93
     93a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
     93e:	06 c0       	rjmp	.+12     	; 0x94c <__stack+0x4d>
			
			}else{ //no errors present
			UART_Transmit(10); //line feed
     940:	8a e0       	ldi	r24, 0x0A	; 10
     942:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(13); //carriage return
     946:	8d e0       	ldi	r24, 0x0D	; 13
     948:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	}
	
	
	//print final curly brackets
	
	UART_Transmit(10); //line feed
     94c:	8a e0       	ldi	r24, 0x0A	; 10
     94e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(13); //carriage return
     952:	8d e0       	ldi	r24, 0x0D	; 13
     954:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(125); // }
     958:	8d e7       	ldi	r24, 0x7D	; 125
     95a:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(10); //line feed
     95e:	8a e0       	ldi	r24, 0x0A	; 10
     960:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(13); //carriage return
     964:	8d e0       	ldi	r24, 0x0D	; 13
     966:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(125); // }
     96a:	8d e7       	ldi	r24, 0x7D	; 125
     96c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(10); //line feed
     970:	8a e0       	ldi	r24, 0x0A	; 10
     972:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
	UART_Transmit(13); //carriage return
     976:	8d e0       	ldi	r24, 0x0D	; 13
     978:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>


     97c:	4b c0       	rjmp	.+150    	; 0xa14 <__stack+0x115>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
     97e:	82 e2       	ldi	r24, 0x22	; 34
     980:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(101); //e
     984:	85 e6       	ldi	r24, 0x65	; 101
     986:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(119); //w
     98a:	87 e7       	ldi	r24, 0x77	; 119
     98c:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(34); // "
     990:	82 e2       	ldi	r24, 0x22	; 34
     992:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(58); //:
     996:	8a e3       	ldi	r24, 0x3A	; 58
     998:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(91); //[
     99c:	8b e5       	ldi	r24, 0x5B	; 91
     99e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
     9a2:	82 e2       	ldi	r24, 0x22	; 34
     9a4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(106); //j
     9a8:	8a e6       	ldi	r24, 0x6A	; 106
     9aa:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(97); //a
     9ae:	81 e6       	ldi	r24, 0x61	; 97
     9b0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(109); //m
     9b4:	8d e6       	ldi	r24, 0x6D	; 109
     9b6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(34); //"
     9ba:	82 e2       	ldi	r24, 0x22	; 34
     9bc:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
     9c0:	bb cf       	rjmp	.-138    	; 0x938 <__stack+0x39>
			UART_Transmit(58); //:
			UART_Transmit(91); //[
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
				UART_Transmit(34); //"
     9c2:	82 e2       	ldi	r24, 0x22	; 34
     9c4:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(106); //j
     9c8:	8a e6       	ldi	r24, 0x6A	; 106
     9ca:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(97); //a
     9ce:	81 e6       	ldi	r24, 0x61	; 97
     9d0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(109); //m
     9d4:	8d e6       	ldi	r24, 0x6D	; 109
     9d6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				UART_Transmit(34); //"
     9da:	82 e2       	ldi	r24, 0x22	; 34
     9dc:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
				if(jamErrorFlag && collisionErrorFlag){
					UART_Transmit(44); //,
     9e0:	8c e2       	ldi	r24, 0x2C	; 44
     9e2:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
     9e6:	87 cf       	rjmp	.-242    	; 0x8f6 <ERRORmodulator+0x7a>
	}else{
		UART_Transmit(10); //line feed
		UART_Transmit(13); //carriage return
		
		if(collisionErrorFlag || jamErrorFlag) {
			UART_Transmit(34); //'
     9e8:	82 e2       	ldi	r24, 0x22	; 34
     9ea:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(101); //e
     9ee:	85 e6       	ldi	r24, 0x65	; 101
     9f0:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(119); //w
     9f4:	87 e7       	ldi	r24, 0x77	; 119
     9f6:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(34); // "
     9fa:	82 e2       	ldi	r24, 0x22	; 34
     9fc:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(58); //:
     a00:	8a e3       	ldi	r24, 0x3A	; 58
     a02:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			UART_Transmit(91); //[
     a06:	8b e5       	ldi	r24, 0x5B	; 91
     a08:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			//print errors
			
			if(jamErrorFlag){ //compressor jammed
     a0c:	dd 23       	and	r29, r29
     a0e:	09 f4       	brne	.+2      	; 0xa12 <__stack+0x113>
     a10:	72 cf       	rjmp	.-284    	; 0x8f6 <ERRORmodulator+0x7a>
     a12:	d7 cf       	rjmp	.-82     	; 0x9c2 <__stack+0xc3>
	UART_Transmit(125); // }
	UART_Transmit(10); //line feed
	UART_Transmit(13); //carriage return


     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <UART_SendJson>:
	}
	changePumpingEffort	 = false;
}


void UART_SendJson(uint8_t averagePower, uint8_t operatingFrequency, uint32_t appliedVoltage, uint8_t current,bool jamErrorFlag, bool collisionErrorFlag, uint8_t requiredValue, uint8_t currentValue){
     a1a:	4f 92       	push	r4
     a1c:	5f 92       	push	r5
     a1e:	6f 92       	push	r6
     a20:	7f 92       	push	r7
     a22:	8f 92       	push	r8
     a24:	af 92       	push	r10
     a26:	cf 92       	push	r12
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	18 2f       	mov	r17, r24
     a3a:	f6 2e       	mov	r15, r22
     a3c:	29 01       	movw	r4, r18
     a3e:	3a 01       	movw	r6, r20
     a40:	8a 2d       	mov	r24, r10
     a42:	68 2d       	mov	r22, r8
	MFCmodulator(requiredValue,currentValue);
     a44:	0e 94 a6 01 	call	0x34c	; 0x34c <MFCmodulator>
	VERmodulator();
     a48:	0e 94 84 02 	call	0x508	; 0x508 <VERmodulator>
	PARAMmodulator(averagePower,operatingFrequency,appliedVoltage,current);
     a4c:	a3 01       	movw	r20, r6
     a4e:	92 01       	movw	r18, r4
     a50:	6f 2d       	mov	r22, r15
     a52:	81 2f       	mov	r24, r17
     a54:	0e 94 b5 02 	call	0x56a	; 0x56a <PARAMmodulator>
	ERRORmodulator(jamErrorFlag, collisionErrorFlag);
     a58:	6c 2d       	mov	r22, r12
     a5a:	8e 2d       	mov	r24, r14
     a5c:	0e 94 3e 04 	call	0x87c	; 0x87c <ERRORmodulator>

}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	cf 90       	pop	r12
     a6e:	af 90       	pop	r10
     a70:	8f 90       	pop	r8
     a72:	7f 90       	pop	r7
     a74:	6f 90       	pop	r6
     a76:	5f 90       	pop	r5
     a78:	4f 90       	pop	r4
     a7a:	08 95       	ret

00000a7c <__vector_18>:
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
		return true;
		}else{
		return false;
	}
}
     a7c:	1f 92       	push	r1
     a7e:	0f 92       	push	r0
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1
     a86:	8f 93       	push	r24
     a88:	9f 93       	push	r25
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
     a8e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a92:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <characterReceived>
     a96:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <numberOfCharactersReceived>
     a9a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <numberOfCharactersReceived+0x1>
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <numberOfCharactersReceived+0x1>
     aa4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <numberOfCharactersReceived>
     aa8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <numberOfCharactersReceived>
     aac:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <numberOfCharactersReceived+0x1>
     ab0:	45 97       	sbiw	r24, 0x15	; 21
     ab2:	4c f0       	brlt	.+18     	; 0xac6 <__vector_18+0x4a>
     ab4:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <numberOfCharactersReceived>
     ab8:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <numberOfCharactersReceived+0x1>
     abc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <characterReceived>
     ac0:	e7 5f       	subi	r30, 0xF7	; 247
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	80 83       	st	Z, r24
     ac6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <numberOfCharactersReceived>
     aca:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <numberOfCharactersReceived+0x1>
     ace:	82 97       	sbiw	r24, 0x22	; 34
     ad0:	4c f0       	brlt	.+18     	; 0xae4 <__vector_18+0x68>
     ad2:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <numberOfCharactersReceived>
     ad6:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <numberOfCharactersReceived+0x1>
     ada:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <characterReceived>
     ade:	ea 51       	subi	r30, 0x1A	; 26
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	80 83       	st	Z, r24
     ae4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <numberOfCharactersReceived>
     ae8:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <numberOfCharactersReceived+0x1>
     aec:	86 97       	sbiw	r24, 0x26	; 38
     aee:	7c f0       	brlt	.+30     	; 0xb0e <__vector_18+0x92>
     af0:	e1 ec       	ldi	r30, 0xC1	; 193
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	8f 77       	andi	r24, 0x7F	; 127
     af8:	80 83       	st	Z, r24
     afa:	80 81       	ld	r24, Z
     afc:	8f 7e       	andi	r24, 0xEF	; 239
     afe:	80 83       	st	Z, r24
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <messageReceived>
     b06:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <numberOfCharactersReceived+0x1>
     b0a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <numberOfCharactersReceived>
     b0e:	ff 91       	pop	r31
     b10:	ef 91       	pop	r30
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f 90       	pop	r0
     b1c:	1f 90       	pop	r1
     b1e:	18 95       	reti

00000b20 <__vector_20>:
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	8f 93       	push	r24
     b2c:	ef 93       	push	r30
     b2e:	ff 93       	push	r31
     b30:	e1 ec       	ldi	r30, 0xC1	; 193
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	80 61       	ori	r24, 0x10	; 16
     b38:	80 83       	st	Z, r24
     b3a:	80 81       	ld	r24, Z
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	80 83       	st	Z, r24
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	8f 91       	pop	r24
     b46:	0f 90       	pop	r0
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	0f 90       	pop	r0
     b4c:	1f 90       	pop	r1
     b4e:	18 95       	reti

00000b50 <__vector_11>:
     b50:	1f 92       	push	r1
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	0f 92       	push	r0
     b58:	11 24       	eor	r1, r1
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
     b72:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
     b76:	81 11       	cpse	r24, r1
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__vector_11+0x32>
     b7a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     b7e:	88 23       	and	r24, r24
     b80:	b9 f1       	breq	.+110    	; 0xbf0 <__vector_11+0xa0>
     b82:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     b86:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     b8a:	89 17       	cp	r24, r25
     b8c:	60 f0       	brcs	.+24     	; 0xba6 <__vector_11+0x56>
     b8e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isDead>
     b92:	81 11       	cpse	r24, r1
     b94:	08 c0       	rjmp	.+16     	; 0xba6 <__vector_11+0x56>
     b96:	2a 9a       	sbi	0x05, 2	; 5
     b98:	5d 9a       	sbi	0x0b, 5	; 11
     b9a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <count>
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <count>
     ba4:	57 c0       	rjmp	.+174    	; 0xc54 <__vector_11+0x104>
     ba6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     baa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     bae:	89 17       	cp	r24, r25
     bb0:	a0 f4       	brcc	.+40     	; 0xbda <__vector_11+0x8a>
     bb2:	2a 98       	cbi	0x05, 2	; 5
     bb4:	5d 98       	cbi	0x0b, 5	; 11
     bb6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <PWM_CalculateDeadTime>
     bba:	6f ef       	ldi	r22, 0xFF	; 255
     bbc:	7f ef       	ldi	r23, 0xFF	; 255
     bbe:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Change>
     bc2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     bc6:	81 11       	cpse	r24, r1
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <__vector_11+0x7e>
     bca:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isLHS>
     bce:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <count>
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <isDead>
     bd8:	3d c0       	rjmp	.+122    	; 0xc54 <__vector_11+0x104>
     bda:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <isDead>
     bde:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <PWM_ConvertTimerValueToDutyCycle>
     be2:	68 2f       	mov	r22, r24
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	8d e7       	ldi	r24, 0x7D	; 125
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Change>
     bee:	32 c0       	rjmp	.+100    	; 0xc54 <__vector_11+0x104>
     bf0:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     bf4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     bf8:	89 17       	cp	r24, r25
     bfa:	60 f0       	brcs	.+24     	; 0xc14 <__vector_11+0xc4>
     bfc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isDead>
     c00:	81 11       	cpse	r24, r1
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <__vector_11+0xc4>
     c04:	5e 9a       	sbi	0x0b, 6	; 11
     c06:	29 9a       	sbi	0x05, 1	; 5
     c08:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <count>
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <count>
     c12:	20 c0       	rjmp	.+64     	; 0xc54 <__vector_11+0x104>
     c14:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     c18:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     c1c:	89 17       	cp	r24, r25
     c1e:	80 f4       	brcc	.+32     	; 0xc40 <__vector_11+0xf0>
     c20:	29 98       	cbi	0x05, 1	; 5
     c22:	5e 98       	cbi	0x0b, 6	; 11
     c24:	0e 94 f7 00 	call	0x1ee	; 0x1ee <PWM_CalculateDeadTime>
     c28:	6f ef       	ldi	r22, 0xFF	; 255
     c2a:	7f ef       	ldi	r23, 0xFF	; 255
     c2c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Change>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isLHS>
     c36:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <count>
     c3a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <isDead>
     c3e:	0a c0       	rjmp	.+20     	; 0xc54 <__vector_11+0x104>
     c40:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <isDead>
     c44:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <PWM_ConvertTimerValueToDutyCycle>
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	8d e7       	ldi	r24, 0x7D	; 125
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Change>
     c54:	ff 91       	pop	r31
     c56:	ef 91       	pop	r30
     c58:	bf 91       	pop	r27
     c5a:	af 91       	pop	r26
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	7f 91       	pop	r23
     c62:	6f 91       	pop	r22
     c64:	5f 91       	pop	r21
     c66:	4f 91       	pop	r20
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <__vector_12>:
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	8f 93       	push	r24
     c82:	9f 93       	push	r25
     c84:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isLHS>
     c88:	81 11       	cpse	r24, r1
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__vector_12+0x1e>
     c8c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lowPowerMode>
     c90:	88 23       	and	r24, r24
     c92:	61 f0       	breq	.+24     	; 0xcac <__vector_12+0x36>
     c94:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isDead>
     c98:	81 11       	cpse	r24, r1
     c9a:	13 c0       	rjmp	.+38     	; 0xcc2 <__vector_12+0x4c>
     c9c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     ca0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     ca4:	89 17       	cp	r24, r25
     ca6:	68 f0       	brcs	.+26     	; 0xcc2 <__vector_12+0x4c>
     ca8:	2a 98       	cbi	0x05, 2	; 5
     caa:	0b c0       	rjmp	.+22     	; 0xcc2 <__vector_12+0x4c>
     cac:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <isDead>
     cb0:	81 11       	cpse	r24, r1
     cb2:	07 c0       	rjmp	.+14     	; 0xcc2 <__vector_12+0x4c>
     cb4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <count>
     cb8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <noOfWaves>
     cbc:	89 17       	cp	r24, r25
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <__vector_12+0x4c>
     cc0:	29 98       	cbi	0x05, 1	; 5
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	0f 90       	pop	r0
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	0f 90       	pop	r0
     ccc:	1f 90       	pop	r1
     cce:	18 95       	reti

00000cd0 <concatenate>:
     cd0:	c0 97       	sbiw	r24, 0x30	; 48
     cd2:	e4 e6       	ldi	r30, 0x64	; 100
     cd4:	e8 9f       	mul	r30, r24
     cd6:	90 01       	movw	r18, r0
     cd8:	e9 9f       	mul	r30, r25
     cda:	30 0d       	add	r19, r0
     cdc:	11 24       	eor	r1, r1
     cde:	60 53       	subi	r22, 0x30	; 48
     ce0:	71 09       	sbc	r23, r1
     ce2:	cb 01       	movw	r24, r22
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	66 0f       	add	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	66 0f       	add	r22, r22
     cf2:	77 1f       	adc	r23, r23
     cf4:	68 0f       	add	r22, r24
     cf6:	79 1f       	adc	r23, r25
     cf8:	62 0f       	add	r22, r18
     cfa:	73 1f       	adc	r23, r19
     cfc:	ca 01       	movw	r24, r20
     cfe:	c0 97       	sbiw	r24, 0x30	; 48
     d00:	86 0f       	add	r24, r22
     d02:	97 1f       	adc	r25, r23
     d04:	08 95       	ret

00000d06 <main>:
/**************************************************************Main Function**************************************************************/
int main(void)
{	
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <main+0x6>
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <main+0x8>
     d0e:	1f 92       	push	r1
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62

	/*******************Intialisations*******************/
    sei();
     d14:	78 94       	sei
	UART_Init(UBRR_VALUE);
     d16:	83 e3       	ldi	r24, 0x33	; 51
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 0b 01 	call	0x216	; 0x216 <UART_Init>
	ADC_Init();
     d1e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
     d22:	0e 94 ce 00 	call	0x19c	; 0x19c <PWM_Init>
	uint16_t voltageAverageFinal = 0;
	uint16_t currentAverageFinal = 0;
	uint32_t averagePower = 0;
	
	/*******************Output Pin Setup*******************/
	DDRB |= (1<<PB1)|(1<<PB2);
     d26:	84 b1       	in	r24, 0x04	; 4
     d28:	86 60       	ori	r24, 0x06	; 6
     d2a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
     d2c:	8a b1       	in	r24, 0x0a	; 10
     d2e:	80 66       	ori	r24, 0x60	; 96
     d30:	8a b9       	out	0x0a, r24	; 10
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
	uint16_t voltageAverageFinal = 0;
	uint16_t currentAverageFinal = 0;
     d32:	1b 82       	std	Y+3, r1	; 0x03
	ADC_Init();
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
	uint16_t voltageAverageFinal = 0;
     d34:	21 2c       	mov	r2, r1
     d36:	31 2c       	mov	r3, r1
	UART_Init(UBRR_VALUE);
	ADC_Init();
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
     d38:	1c 82       	std	Y+4, r1	; 0x04
				
		/*******************Power Calculation*******************/	
		uint32_t powerTotal = 0;
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
			powerArray[j] = (voltageAcrossTheCoil[j] *voltageAcrossTheCoil[j])/415;
			powerTotal += powerArray[j];
     d3a:	0f 2e       	mov	r0, r31
     d3c:	ff e9       	ldi	r31, 0x9F	; 159
     d3e:	4f 2e       	mov	r4, r31
     d40:	55 24       	eor	r5, r5
     d42:	53 94       	inc	r5
     d44:	61 2c       	mov	r6, r1
     d46:	71 2c       	mov	r7, r1
     d48:	f0 2d       	mov	r31, r0

    while (1) 
    {	
		
		/*******************Local Variable Declaration*******************/
		measurementIndex = 0;
     d4a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <measurementIndex>
		uint32_t averageVoltage = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};

		/*******************Voltage Measurement*******************/
			while(measurementIndex < NUMBER_OF_SAMPLES){									//Keep on sampling the LHS and RHS of the coil until you reach the total number of samples
     d4e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <measurementIndex>
     d52:	88 37       	cpi	r24, 0x78	; 120
     d54:	08 f0       	brcs	.+2      	; 0xd58 <main+0x52>
     d56:	5b c1       	rjmp	.+694    	; 0x100e <main+0x308>
				voltageLHS[measurementIndex] = ADC_LHSVoltage();							//Sample LHS voltage
     d58:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <measurementIndex>
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	0e 94 95 00 	call	0x12a	; 0x12a <ADC_LHSVoltage>
     d62:	00 0f       	add	r16, r16
     d64:	11 1f       	adc	r17, r17
     d66:	00 0f       	add	r16, r16
     d68:	11 1f       	adc	r17, r17
     d6a:	f8 01       	movw	r30, r16
     d6c:	e0 5f       	subi	r30, 0xF0	; 240
     d6e:	fa 4f       	sbci	r31, 0xFA	; 250
     d70:	60 83       	st	Z, r22
     d72:	71 83       	std	Z+1, r23	; 0x01
     d74:	82 83       	std	Z+2, r24	; 0x02
     d76:	93 83       	std	Z+3, r25	; 0x03
				voltageRHS[measurementIndex] = ADC_RHSVoltage();							//Sample RHS voltage
     d78:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <measurementIndex>
     d7c:	10 e0       	ldi	r17, 0x00	; 0
     d7e:	0e 94 b0 00 	call	0x160	; 0x160 <ADC_RHSVoltage>
     d82:	00 0f       	add	r16, r16
     d84:	11 1f       	adc	r17, r17
     d86:	00 0f       	add	r16, r16
     d88:	11 1f       	adc	r17, r17
     d8a:	f8 01       	movw	r30, r16
     d8c:	e0 5d       	subi	r30, 0xD0	; 208
     d8e:	fc 4f       	sbci	r31, 0xFC	; 252
     d90:	60 83       	st	Z, r22
     d92:	71 83       	std	Z+1, r23	; 0x01
     d94:	82 83       	std	Z+2, r24	; 0x02
     d96:	93 83       	std	Z+3, r25	; 0x03
				measurementIndex++;											
     d98:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <measurementIndex>
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <measurementIndex>
		uint32_t averageVoltage = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};

		/*******************Voltage Measurement*******************/
			while(measurementIndex < NUMBER_OF_SAMPLES){									//Keep on sampling the LHS and RHS of the coil until you reach the total number of samples
     da2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <measurementIndex>
     da6:	88 37       	cpi	r24, 0x78	; 120
     da8:	b8 f2       	brcs	.-82     	; 0xd58 <main+0x52>
     daa:	31 c1       	rjmp	.+610    	; 0x100e <main+0x308>
				voltageRHS[measurementIndex] = ADC_RHSVoltage();							//Sample RHS voltage
				measurementIndex++;											
			}
		
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){												//Calculate the voltage across the coil
			if(voltageLHS[i]>voltageRHS[i]){												
     dac:	9c 01       	movw	r18, r24
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	f9 01       	movw	r30, r18
     db8:	e0 5f       	subi	r30, 0xF0	; 240
     dba:	fa 4f       	sbci	r31, 0xFA	; 250
     dbc:	c0 80       	ld	r12, Z
     dbe:	d1 80       	ldd	r13, Z+1	; 0x01
     dc0:	e2 80       	ldd	r14, Z+2	; 0x02
     dc2:	f3 80       	ldd	r15, Z+3	; 0x03
     dc4:	f9 01       	movw	r30, r18
     dc6:	e0 5d       	subi	r30, 0xD0	; 208
     dc8:	fc 4f       	sbci	r31, 0xFC	; 252
     dca:	00 81       	ld	r16, Z
     dcc:	11 81       	ldd	r17, Z+1	; 0x01
     dce:	22 81       	ldd	r18, Z+2	; 0x02
     dd0:	33 81       	ldd	r19, Z+3	; 0x03
     dd2:	0c 15       	cp	r16, r12
     dd4:	1d 05       	cpc	r17, r13
     dd6:	2e 05       	cpc	r18, r14
     dd8:	3f 05       	cpc	r19, r15
     dda:	f8 f4       	brcc	.+62     	; 0xe1a <main+0x114>
				voltageAcrossTheCoil[i] = voltageLHS[i]-voltageRHS[i];
     ddc:	9c 01       	movw	r18, r24
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	f9 01       	movw	r30, r18
     de8:	e0 5f       	subi	r30, 0xF0	; 240
     dea:	fa 4f       	sbci	r31, 0xFA	; 250
     dec:	c0 80       	ld	r12, Z
     dee:	d1 80       	ldd	r13, Z+1	; 0x01
     df0:	e2 80       	ldd	r14, Z+2	; 0x02
     df2:	f3 80       	ldd	r15, Z+3	; 0x03
     df4:	f9 01       	movw	r30, r18
     df6:	e0 5d       	subi	r30, 0xD0	; 208
     df8:	fc 4f       	sbci	r31, 0xFC	; 252
     dfa:	80 80       	ld	r8, Z
     dfc:	91 80       	ldd	r9, Z+1	; 0x01
     dfe:	a2 80       	ldd	r10, Z+2	; 0x02
     e00:	b3 80       	ldd	r11, Z+3	; 0x03
     e02:	c8 18       	sub	r12, r8
     e04:	d9 08       	sbc	r13, r9
     e06:	ea 08       	sbc	r14, r10
     e08:	fb 08       	sbc	r15, r11
     e0a:	f9 01       	movw	r30, r18
     e0c:	e0 51       	subi	r30, 0x10	; 16
     e0e:	f9 4f       	sbci	r31, 0xF9	; 249
     e10:	c0 82       	st	Z, r12
     e12:	d1 82       	std	Z+1, r13	; 0x01
     e14:	e2 82       	std	Z+2, r14	; 0x02
     e16:	f3 82       	std	Z+3, r15	; 0x03
     e18:	1e c0       	rjmp	.+60     	; 0xe56 <main+0x150>
				}else{
				voltageAcrossTheCoil[i] = voltageRHS[i]-voltageLHS[i];
     e1a:	9c 01       	movw	r18, r24
     e1c:	22 0f       	add	r18, r18
     e1e:	33 1f       	adc	r19, r19
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	f9 01       	movw	r30, r18
     e26:	e0 5d       	subi	r30, 0xD0	; 208
     e28:	fc 4f       	sbci	r31, 0xFC	; 252
     e2a:	c0 80       	ld	r12, Z
     e2c:	d1 80       	ldd	r13, Z+1	; 0x01
     e2e:	e2 80       	ldd	r14, Z+2	; 0x02
     e30:	f3 80       	ldd	r15, Z+3	; 0x03
     e32:	f9 01       	movw	r30, r18
     e34:	e0 5f       	subi	r30, 0xF0	; 240
     e36:	fa 4f       	sbci	r31, 0xFA	; 250
     e38:	80 80       	ld	r8, Z
     e3a:	91 80       	ldd	r9, Z+1	; 0x01
     e3c:	a2 80       	ldd	r10, Z+2	; 0x02
     e3e:	b3 80       	ldd	r11, Z+3	; 0x03
     e40:	c8 18       	sub	r12, r8
     e42:	d9 08       	sbc	r13, r9
     e44:	ea 08       	sbc	r14, r10
     e46:	fb 08       	sbc	r15, r11
     e48:	f9 01       	movw	r30, r18
     e4a:	e0 51       	subi	r30, 0x10	; 16
     e4c:	f9 4f       	sbci	r31, 0xF9	; 249
     e4e:	c0 82       	st	Z, r12
     e50:	d1 82       	std	Z+1, r13	; 0x01
     e52:	e2 82       	std	Z+2, r14	; 0x02
     e54:	f3 82       	std	Z+3, r15	; 0x03
			}		
			voltageSum += voltageAcrossTheCoil[i];
     e56:	fc 01       	movw	r30, r24
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	e0 51       	subi	r30, 0x10	; 16
     e62:	f9 4f       	sbci	r31, 0xF9	; 249
     e64:	00 81       	ld	r16, Z
     e66:	11 81       	ldd	r17, Z+1	; 0x01
     e68:	22 81       	ldd	r18, Z+2	; 0x02
     e6a:	33 81       	ldd	r19, Z+3	; 0x03
     e6c:	40 0f       	add	r20, r16
     e6e:	51 1f       	adc	r21, r17
     e70:	62 1f       	adc	r22, r18
     e72:	73 1f       	adc	r23, r19
				voltageLHS[measurementIndex] = ADC_LHSVoltage();							//Sample LHS voltage
				voltageRHS[measurementIndex] = ADC_RHSVoltage();							//Sample RHS voltage
				measurementIndex++;											
			}
		
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){												//Calculate the voltage across the coil
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	88 37       	cpi	r24, 0x78	; 120
     e78:	91 05       	cpc	r25, r1
     e7a:	09 f0       	breq	.+2      	; 0xe7e <main+0x178>
     e7c:	97 cf       	rjmp	.-210    	; 0xdac <main+0xa6>
			}		
			voltageSum += voltageAcrossTheCoil[i];
			
		}
		
		averageVoltage = voltageSum / NUMBER_OF_SAMPLES;							
     e7e:	cb 01       	movw	r24, r22
     e80:	ba 01       	movw	r22, r20
     e82:	28 e7       	ldi	r18, 0x78	; 120
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	0e 94 45 08 	call	0x108a	; 0x108a <__udivmodsi4>

		voltageAverageArray[voltageAverageIndex] = averageVoltage;
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	e8 2f       	mov	r30, r24
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	e0 5b       	subi	r30, 0xB0	; 176
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	20 83       	st	Z, r18
     ea2:	31 83       	std	Z+1, r19	; 0x01
     ea4:	42 83       	std	Z+2, r20	; 0x02
     ea6:	53 83       	std	Z+3, r21	; 0x03
		voltageAverageIndex++;
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	8c 83       	std	Y+4, r24	; 0x04
				
		/*******************Calculate Average Voltage and Current*******************/		
		if(voltageAverageIndex==NUMBER_OF_SAMPLES){
     eac:	88 37       	cpi	r24, 0x78	; 120
     eae:	71 f5       	brne	.+92     	; 0xf0c <main+0x206>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
			for(int k = 0;k < NUMBER_OF_SAMPLES;k++){
				voltageAverageFinal += voltageAverageArray[k];
     eb4:	fc 01       	movw	r30, r24
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	e0 5b       	subi	r30, 0xB0	; 176
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	40 81       	ld	r20, Z
     ec4:	51 81       	ldd	r21, Z+1	; 0x01
     ec6:	62 81       	ldd	r22, Z+2	; 0x02
     ec8:	73 81       	ldd	r23, Z+3	; 0x03
     eca:	24 0e       	add	r2, r20
     ecc:	35 1e       	adc	r3, r21
		voltageAverageArray[voltageAverageIndex] = averageVoltage;
		voltageAverageIndex++;
				
		/*******************Calculate Average Voltage and Current*******************/		
		if(voltageAverageIndex==NUMBER_OF_SAMPLES){
			for(int k = 0;k < NUMBER_OF_SAMPLES;k++){
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	88 37       	cpi	r24, 0x78	; 120
     ed2:	91 05       	cpc	r25, r1
     ed4:	79 f7       	brne	.-34     	; 0xeb4 <main+0x1ae>
				voltageAverageFinal += voltageAverageArray[k];
			}
			voltageAverageFinal /= NUMBER_OF_SAMPLES;
     ed6:	91 01       	movw	r18, r2
     ed8:	a9 e8       	ldi	r26, 0x89	; 137
     eda:	b8 e8       	ldi	r27, 0x88	; 136
     edc:	0e 94 67 08 	call	0x10ce	; 0x10ce <__umulhisi3>
     ee0:	1c 01       	movw	r2, r24
     ee2:	00 24       	eor	r0, r0
     ee4:	22 0c       	add	r2, r2
     ee6:	33 1c       	adc	r3, r3
     ee8:	00 1c       	adc	r0, r0
     eea:	22 0c       	add	r2, r2
     eec:	33 1c       	adc	r3, r3
     eee:	00 1c       	adc	r0, r0
     ef0:	23 2c       	mov	r2, r3
     ef2:	30 2c       	mov	r3, r0
			currentAverageFinal = (voltageAverageFinal*100)/415;
     ef4:	e4 e6       	ldi	r30, 0x64	; 100
     ef6:	e2 9d       	mul	r30, r2
     ef8:	c0 01       	movw	r24, r0
     efa:	e3 9d       	mul	r30, r3
     efc:	90 0d       	add	r25, r0
     efe:	11 24       	eor	r1, r1
     f00:	6f e9       	ldi	r22, 0x9F	; 159
     f02:	71 e0       	ldi	r23, 0x01	; 1
     f04:	0e 94 1d 08 	call	0x103a	; 0x103a <__udivmodhi4>
     f08:	6b 83       	std	Y+3, r22	; 0x03
			voltageAverageIndex = 0;
     f0a:	1c 82       	std	Y+4, r1	; 0x04
		}
				
		/*******************Power Calculation*******************/	
		uint32_t powerTotal = 0;
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
     f0c:	00 e0       	ldi	r16, 0x00	; 0
     f0e:	10 e0       	ldi	r17, 0x00	; 0
			currentAverageFinal = (voltageAverageFinal*100)/415;
			voltageAverageIndex = 0;
		}
				
		/*******************Power Calculation*******************/	
		uint32_t powerTotal = 0;
     f10:	c1 2c       	mov	r12, r1
     f12:	d1 2c       	mov	r13, r1
     f14:	76 01       	movw	r14, r12
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
			powerArray[j] = (voltageAcrossTheCoil[j] *voltageAcrossTheCoil[j])/415;
     f16:	f8 01       	movw	r30, r16
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	e0 51       	subi	r30, 0x10	; 16
     f22:	f9 4f       	sbci	r31, 0xF9	; 249
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	42 81       	ldd	r20, Z+2	; 0x02
     f2a:	53 81       	ldd	r21, Z+3	; 0x03
     f2c:	60 81       	ld	r22, Z
     f2e:	71 81       	ldd	r23, Z+1	; 0x01
     f30:	82 81       	ldd	r24, Z+2	; 0x02
     f32:	93 81       	ldd	r25, Z+3	; 0x03
			powerTotal += powerArray[j];
     f34:	0e 94 0d 08 	call	0x101a	; 0x101a <__mulsi3>
     f38:	a3 01       	movw	r20, r6
     f3a:	92 01       	movw	r18, r4
     f3c:	0e 94 45 08 	call	0x108a	; 0x108a <__udivmodsi4>
     f40:	c2 0e       	add	r12, r18
     f42:	d3 1e       	adc	r13, r19
     f44:	e4 1e       	adc	r14, r20
     f46:	f5 1e       	adc	r15, r21
			voltageAverageIndex = 0;
		}
				
		/*******************Power Calculation*******************/	
		uint32_t powerTotal = 0;
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
     f48:	0f 5f       	subi	r16, 0xFF	; 255
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	08 37       	cpi	r16, 0x78	; 120
     f4e:	11 05       	cpc	r17, r1
     f50:	11 f7       	brne	.-60     	; 0xf16 <main+0x210>
		}
		
		averagePower = powerTotal / NUMBER_OF_SAMPLES;
					
		/*******************Receive Message Protocol*******************/
		if(messageReceived){
     f52:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <messageReceived>
     f56:	88 23       	and	r24, r24
     f58:	09 f4       	brne	.+2      	; 0xf5c <main+0x256>
     f5a:	56 c0       	rjmp	.+172    	; 0x1008 <main+0x302>
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
     f5c:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <pumpingEffortArray+0x2>
     f60:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <pumpingEffortArray+0x1>
     f64:	ee e1       	ldi	r30, 0x1E	; 30
     f66:	f1 e0       	ldi	r31, 0x01	; 1
     f68:	80 81       	ld	r24, Z
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 68 06 	call	0xcd0	; 0xcd0 <concatenate>
     f74:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pumpingEffort>
				
			for(int i = 0; i < 38; i++){
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
				pumpingEffortArray[i] = 0;
     f7c:	fc 01       	movw	r30, r24
     f7e:	e2 5e       	subi	r30, 0xE2	; 226
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	10 82       	st	Z, r1
					
		/*******************Receive Message Protocol*******************/
		if(messageReceived){
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	86 32       	cpi	r24, 0x26	; 38
     f88:	91 05       	cpc	r25, r1
     f8a:	c1 f7       	brne	.-16     	; 0xf7c <main+0x276>
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
     f8c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     f90:	e8 e0       	ldi	r30, 0x08	; 8
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	80 81       	ld	r24, Z
int concatenate(int a, int b, int c){
	return ((a-48)*100 + (b-48)*10 + (c-48));
}

bool checkForError(unsigned char a, unsigned char b){
	if((a == 101) && (b == 119)){ //101 = e, 119 = w
     f96:	85 36       	cpi	r24, 0x65	; 101
     f98:	29 f4       	brne	.+10     	; 0xfa4 <main+0x29e>
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	97 37       	cpi	r25, 0x77	; 119
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <main+0x2a0>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <main+0x2a0>
		return true;
		}else{
		return false;
     fa4:	80 e0       	ldi	r24, 0x00	; 0
			pumpingEffort = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
				
			for(int i = 0; i < 38; i++){
				pumpingEffortArray[i] = 0;
			}
			clearErrorFlag = checkForError(clearErrorArray[0],clearErrorArray[1]);
     fa6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <clearErrorFlag>
			if(clearErrorFlag){
     faa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <clearErrorFlag>
     fae:	88 23       	and	r24, r24
     fb0:	21 f0       	breq	.+8      	; 0xfba <main+0x2b4>
				cmprCollide = false;
     fb2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				cmprJammed = false;;
     fb6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <cmprJammed>
			}
			UART_SendJson(averagePower,frequency,voltageAverageFinal,currentAverageFinal,cmprJammed,cmprCollide, pumpingEffort,pumpingEffort);
     fba:	80 90 4c 01 	lds	r8, 0x014C	; 0x80014c <pumpingEffort>
     fbe:	a0 90 4c 01 	lds	r10, 0x014C	; 0x80014c <pumpingEffort>
     fc2:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <__data_start>
     fc6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <cmprJammed>
     fca:	fd 83       	std	Y+5, r31	; 0x05
     fcc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <frequency>
     fd0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <frequency+0x1>
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	c7 01       	movw	r24, r14
     fda:	b6 01       	movw	r22, r12
     fdc:	28 e7       	ldi	r18, 0x78	; 120
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	0e 94 45 08 	call	0x108a	; 0x108a <__udivmodsi4>
     fe8:	82 2f       	mov	r24, r18
     fea:	c1 2e       	mov	r12, r17
     fec:	ed 80       	ldd	r14, Y+5	; 0x05
     fee:	0b 81       	ldd	r16, Y+3	; 0x03
     ff0:	91 01       	movw	r18, r2
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	69 81       	ldd	r22, Y+1	; 0x01
     ff8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <UART_SendJson>
			messageReceived = false;
     ffc:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <messageReceived>
			numberOfCharactersReceived = 0;
    1000:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <numberOfCharactersReceived+0x1>
    1004:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <numberOfCharactersReceived>
		}
		UART_InterpretPumpingEffort();													//Interpret pumping effort 	
    1008:	0e 94 2a 01 	call	0x254	; 0x254 <UART_InterpretPumpingEffort>
    }
    100c:	9e ce       	rjmp	.-708    	; 0xd4a <main+0x44>
	UART_Init(UBRR_VALUE);
	ADC_Init();
	PWM_Init();
	
	/*******************Local Variable Declaration*******************/
	uint8_t voltageAverageIndex = 0;
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	ba 01       	movw	r22, r20
    1018:	c9 ce       	rjmp	.-622    	; 0xdac <main+0xa6>

0000101a <__mulsi3>:
    101a:	db 01       	movw	r26, r22
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	0e 94 76 08 	call	0x10ec	; 0x10ec <__muluhisi3>
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	a2 9f       	mul	r26, r18
    102a:	80 0d       	add	r24, r0
    102c:	91 1d       	adc	r25, r1
    102e:	a3 9f       	mul	r26, r19
    1030:	90 0d       	add	r25, r0
    1032:	b2 9f       	mul	r27, r18
    1034:	90 0d       	add	r25, r0
    1036:	11 24       	eor	r1, r1
    1038:	08 95       	ret

0000103a <__udivmodhi4>:
    103a:	aa 1b       	sub	r26, r26
    103c:	bb 1b       	sub	r27, r27
    103e:	51 e1       	ldi	r21, 0x11	; 17
    1040:	07 c0       	rjmp	.+14     	; 0x1050 <__udivmodhi4_ep>

00001042 <__udivmodhi4_loop>:
    1042:	aa 1f       	adc	r26, r26
    1044:	bb 1f       	adc	r27, r27
    1046:	a6 17       	cp	r26, r22
    1048:	b7 07       	cpc	r27, r23
    104a:	10 f0       	brcs	.+4      	; 0x1050 <__udivmodhi4_ep>
    104c:	a6 1b       	sub	r26, r22
    104e:	b7 0b       	sbc	r27, r23

00001050 <__udivmodhi4_ep>:
    1050:	88 1f       	adc	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	5a 95       	dec	r21
    1056:	a9 f7       	brne	.-22     	; 0x1042 <__udivmodhi4_loop>
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	08 95       	ret

00001062 <__divmodhi4>:
    1062:	97 fb       	bst	r25, 7
    1064:	07 2e       	mov	r0, r23
    1066:	16 f4       	brtc	.+4      	; 0x106c <__divmodhi4+0xa>
    1068:	00 94       	com	r0
    106a:	07 d0       	rcall	.+14     	; 0x107a <__divmodhi4_neg1>
    106c:	77 fd       	sbrc	r23, 7
    106e:	09 d0       	rcall	.+18     	; 0x1082 <__divmodhi4_neg2>
    1070:	0e 94 1d 08 	call	0x103a	; 0x103a <__udivmodhi4>
    1074:	07 fc       	sbrc	r0, 7
    1076:	05 d0       	rcall	.+10     	; 0x1082 <__divmodhi4_neg2>
    1078:	3e f4       	brtc	.+14     	; 0x1088 <__divmodhi4_exit>

0000107a <__divmodhi4_neg1>:
    107a:	90 95       	com	r25
    107c:	81 95       	neg	r24
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	08 95       	ret

00001082 <__divmodhi4_neg2>:
    1082:	70 95       	com	r23
    1084:	61 95       	neg	r22
    1086:	7f 4f       	sbci	r23, 0xFF	; 255

00001088 <__divmodhi4_exit>:
    1088:	08 95       	ret

0000108a <__udivmodsi4>:
    108a:	a1 e2       	ldi	r26, 0x21	; 33
    108c:	1a 2e       	mov	r1, r26
    108e:	aa 1b       	sub	r26, r26
    1090:	bb 1b       	sub	r27, r27
    1092:	fd 01       	movw	r30, r26
    1094:	0d c0       	rjmp	.+26     	; 0x10b0 <__udivmodsi4_ep>

00001096 <__udivmodsi4_loop>:
    1096:	aa 1f       	adc	r26, r26
    1098:	bb 1f       	adc	r27, r27
    109a:	ee 1f       	adc	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	a2 17       	cp	r26, r18
    10a0:	b3 07       	cpc	r27, r19
    10a2:	e4 07       	cpc	r30, r20
    10a4:	f5 07       	cpc	r31, r21
    10a6:	20 f0       	brcs	.+8      	; 0x10b0 <__udivmodsi4_ep>
    10a8:	a2 1b       	sub	r26, r18
    10aa:	b3 0b       	sbc	r27, r19
    10ac:	e4 0b       	sbc	r30, r20
    10ae:	f5 0b       	sbc	r31, r21

000010b0 <__udivmodsi4_ep>:
    10b0:	66 1f       	adc	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	1a 94       	dec	r1
    10ba:	69 f7       	brne	.-38     	; 0x1096 <__udivmodsi4_loop>
    10bc:	60 95       	com	r22
    10be:	70 95       	com	r23
    10c0:	80 95       	com	r24
    10c2:	90 95       	com	r25
    10c4:	9b 01       	movw	r18, r22
    10c6:	ac 01       	movw	r20, r24
    10c8:	bd 01       	movw	r22, r26
    10ca:	cf 01       	movw	r24, r30
    10cc:	08 95       	ret

000010ce <__umulhisi3>:
    10ce:	a2 9f       	mul	r26, r18
    10d0:	b0 01       	movw	r22, r0
    10d2:	b3 9f       	mul	r27, r19
    10d4:	c0 01       	movw	r24, r0
    10d6:	a3 9f       	mul	r26, r19
    10d8:	70 0d       	add	r23, r0
    10da:	81 1d       	adc	r24, r1
    10dc:	11 24       	eor	r1, r1
    10de:	91 1d       	adc	r25, r1
    10e0:	b2 9f       	mul	r27, r18
    10e2:	70 0d       	add	r23, r0
    10e4:	81 1d       	adc	r24, r1
    10e6:	11 24       	eor	r1, r1
    10e8:	91 1d       	adc	r25, r1
    10ea:	08 95       	ret

000010ec <__muluhisi3>:
    10ec:	0e 94 67 08 	call	0x10ce	; 0x10ce <__umulhisi3>
    10f0:	a5 9f       	mul	r26, r21
    10f2:	90 0d       	add	r25, r0
    10f4:	b4 9f       	mul	r27, r20
    10f6:	90 0d       	add	r25, r0
    10f8:	a4 9f       	mul	r26, r20
    10fa:	80 0d       	add	r24, r0
    10fc:	91 1d       	adc	r25, r1
    10fe:	11 24       	eor	r1, r1
    1100:	08 95       	ret

00001102 <_exit>:
    1102:	f8 94       	cli

00001104 <__stop_program>:
    1104:	ff cf       	rjmp	.-2      	; 0x1104 <__stop_program>
