
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003c6  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea7  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ae  00000000  00000000  00002443  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3e  00000000  00000000  00002cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000636  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a7  00000000  00000000  000040ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004a55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_11>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  9e:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8b 60       	ori	r24, 0x0B	; 11
  ae:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
  b0:	ef e6       	ldi	r30, 0x6F	; 111
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
  c4:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  c8:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  cc:	08 95       	ret

000000ce <UART_Init>:
#define MAX_VOLTAGE 13

//uart intializer
void UART_Init(unsigned int BAUD_RATE){
	
	UBRR0H |= (BAUD_RATE>>8); //sets the baud rate to 9600bps
  ce:	e5 ec       	ldi	r30, 0xC5	; 197
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	20 81       	ld	r18, Z
  d4:	92 2b       	or	r25, r18
  d6:	90 83       	st	Z, r25
	UBRR0L |= (BAUD_RATE);
  d8:	e4 ec       	ldi	r30, 0xC4	; 196
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	89 2b       	or	r24, r25
  e0:	80 83       	st	Z, r24
	UCSR0B |= (1<RXEN0); //enables UART transmitter and reciever
  e2:	e1 ec       	ldi	r30, 0xC1	; 193
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //sets character size to 8 data bits
  ec:	a2 ec       	ldi	r26, 0xC2	; 194
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	8c 91       	ld	r24, X
  f2:	86 60       	ori	r24, 0x06	; 6
  f4:	8c 93       	st	X, r24
	UCSR0B |= (1<<RXCIE0); //enable reciever interrupt
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <__vector_18>:
}

uint8_t ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	5b 9a       	sbi	0x0b, 3	; 11
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_12>:
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <isLHS>
 126:	81 11       	cpse	r24, r1
 128:	04 c0       	rjmp	.+8      	; 0x132 <__vector_12+0x1e>
 12a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lowPowerMode>
 12e:	88 23       	and	r24, r24
 130:	51 f0       	breq	.+20     	; 0x146 <__vector_12+0x32>
 132:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 136:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count>
 13a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 13e:	89 17       	cp	r24, r25
 140:	58 f0       	brcs	.+22     	; 0x158 <__vector_12+0x44>
 142:	2a 98       	cbi	0x05, 2	; 5
 144:	09 c0       	rjmp	.+18     	; 0x158 <__vector_12+0x44>
 146:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 14a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count>
 14e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 152:	89 17       	cp	r24, r25
 154:	08 f0       	brcs	.+2      	; 0x158 <__vector_12+0x44>
 156:	29 98       	cbi	0x05, 1	; 5
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <ConvertTimerValueToDutyCycle>:
 166:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 16a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 16e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 172:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 176:	ad e7       	ldi	r26, 0x7D	; 125
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	0e 94 c2 01 	call	0x384	; 0x384 <__muluhisi3>
 17e:	24 e6       	ldi	r18, 0x64	; 100
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	0e 94 91 01 	call	0x322	; 0x322 <__udivmodsi4>
 18a:	82 2f       	mov	r24, r18
 18c:	08 95       	ret

0000018e <CalculateDeadTime>:
 18e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frequency>
 192:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <noOfWaves>
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	88 e8       	ldi	r24, 0x88	; 136
 19a:	93 e1       	ldi	r25, 0x13	; 19
 19c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__divmodhi4>
 1a0:	62 1b       	sub	r22, r18
 1a2:	71 09       	sbc	r23, r1
 1a4:	8d e7       	ldi	r24, 0x7D	; 125
 1a6:	28 2f       	mov	r18, r24
 1a8:	26 9f       	mul	r18, r22
 1aa:	c0 01       	movw	r24, r0
 1ac:	27 9f       	mul	r18, r23
 1ae:	90 0d       	add	r25, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	08 95       	ret

000001b4 <__vector_11>:
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
 1d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <isLHS>
 1da:	81 11       	cpse	r24, r1
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <__vector_11+0x32>
 1de:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lowPowerMode>
 1e2:	88 23       	and	r24, r24
 1e4:	b9 f1       	breq	.+110    	; 0x254 <__vector_11+0xa0>
 1e6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count>
 1ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 1ee:	89 17       	cp	r24, r25
 1f0:	60 f0       	brcs	.+24     	; 0x20a <__vector_11+0x56>
 1f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1f6:	81 11       	cpse	r24, r1
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <__vector_11+0x56>
 1fa:	2a 9a       	sbi	0x05, 2	; 5
 1fc:	5d 9a       	sbi	0x0b, 5	; 11
 1fe:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count>
 208:	57 c0       	rjmp	.+174    	; 0x2b8 <__vector_11+0x104>
 20a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count>
 20e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 212:	89 17       	cp	r24, r25
 214:	a0 f4       	brcc	.+40     	; 0x23e <__vector_11+0x8a>
 216:	5d 98       	cbi	0x0b, 5	; 11
 218:	2a 98       	cbi	0x05, 2	; 5
 21a:	0e 94 c7 00 	call	0x18e	; 0x18e <CalculateDeadTime>
 21e:	6f ef       	ldi	r22, 0xFF	; 255
 220:	7f ef       	ldi	r23, 0xFF	; 255
 222:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 226:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lowPowerMode>
 22a:	81 11       	cpse	r24, r1
 22c:	02 c0       	rjmp	.+4      	; 0x232 <__vector_11+0x7e>
 22e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <isLHS>
 232:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 23c:	3d c0       	rjmp	.+122    	; 0x2b8 <__vector_11+0x104>
 23e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 242:	0e 94 b3 00 	call	0x166	; 0x166 <ConvertTimerValueToDutyCycle>
 246:	68 2f       	mov	r22, r24
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	8d e7       	ldi	r24, 0x7D	; 125
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 252:	32 c0       	rjmp	.+100    	; 0x2b8 <__vector_11+0x104>
 254:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count>
 258:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 25c:	89 17       	cp	r24, r25
 25e:	60 f0       	brcs	.+24     	; 0x278 <__vector_11+0xc4>
 260:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 264:	81 11       	cpse	r24, r1
 266:	08 c0       	rjmp	.+16     	; 0x278 <__vector_11+0xc4>
 268:	5e 9a       	sbi	0x0b, 6	; 11
 26a:	29 9a       	sbi	0x05, 1	; 5
 26c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count>
 270:	8f 5f       	subi	r24, 0xFF	; 255
 272:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count>
 276:	20 c0       	rjmp	.+64     	; 0x2b8 <__vector_11+0x104>
 278:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count>
 27c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <noOfWaves>
 280:	89 17       	cp	r24, r25
 282:	80 f4       	brcc	.+32     	; 0x2a4 <__vector_11+0xf0>
 284:	5e 98       	cbi	0x0b, 6	; 11
 286:	29 98       	cbi	0x05, 1	; 5
 288:	0e 94 c7 00 	call	0x18e	; 0x18e <CalculateDeadTime>
 28c:	6f ef       	ldi	r22, 0xFF	; 255
 28e:	7f ef       	ldi	r23, 0xFF	; 255
 290:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <isLHS>
 29a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count>
 29e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <__vector_11+0x104>
 2a4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 2a8:	0e 94 b3 00 	call	0x166	; 0x166 <ConvertTimerValueToDutyCycle>
 2ac:	68 2f       	mov	r22, r24
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	8d e7       	ldi	r24, 0x7D	; 125
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_Change>
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <main>:

int main(void)
{	

    sei();
 2da:	78 94       	sei
	UART_Init(UBRR_VALUE);
 2dc:	83 e3       	ldi	r24, 0x33	; 51
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 67 00 	call	0xce	; 0xce <UART_Init>
	//ADC_Init();
	PWM_Init();
 2e4:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 2e8:	84 b1       	in	r24, 0x04	; 4
 2ea:	86 60       	ori	r24, 0x06	; 6
 2ec:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 2ee:	8a b1       	in	r24, 0x0a	; 10
 2f0:	80 66       	ori	r24, 0x60	; 96
 2f2:	8a b9       	out	0x0a, r24	; 10
	//UART_SendJson(12, 15, 1232, 20, false, true, true, 120,123);

    while (1) 
    {
	
		if(changePumpingEffort){
 2f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <changePumpingEffort>
 2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <main+0x1a>

000002fa <__divmodhi4>:
 2fa:	97 fb       	bst	r25, 7
 2fc:	07 2e       	mov	r0, r23
 2fe:	16 f4       	brtc	.+4      	; 0x304 <__divmodhi4+0xa>
 300:	00 94       	com	r0
 302:	07 d0       	rcall	.+14     	; 0x312 <__divmodhi4_neg1>
 304:	77 fd       	sbrc	r23, 7
 306:	09 d0       	rcall	.+18     	; 0x31a <__divmodhi4_neg2>
 308:	0e 94 cd 01 	call	0x39a	; 0x39a <__udivmodhi4>
 30c:	07 fc       	sbrc	r0, 7
 30e:	05 d0       	rcall	.+10     	; 0x31a <__divmodhi4_neg2>
 310:	3e f4       	brtc	.+14     	; 0x320 <__divmodhi4_exit>

00000312 <__divmodhi4_neg1>:
 312:	90 95       	com	r25
 314:	81 95       	neg	r24
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	08 95       	ret

0000031a <__divmodhi4_neg2>:
 31a:	70 95       	com	r23
 31c:	61 95       	neg	r22
 31e:	7f 4f       	sbci	r23, 0xFF	; 255

00000320 <__divmodhi4_exit>:
 320:	08 95       	ret

00000322 <__udivmodsi4>:
 322:	a1 e2       	ldi	r26, 0x21	; 33
 324:	1a 2e       	mov	r1, r26
 326:	aa 1b       	sub	r26, r26
 328:	bb 1b       	sub	r27, r27
 32a:	fd 01       	movw	r30, r26
 32c:	0d c0       	rjmp	.+26     	; 0x348 <__udivmodsi4_ep>

0000032e <__udivmodsi4_loop>:
 32e:	aa 1f       	adc	r26, r26
 330:	bb 1f       	adc	r27, r27
 332:	ee 1f       	adc	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	a2 17       	cp	r26, r18
 338:	b3 07       	cpc	r27, r19
 33a:	e4 07       	cpc	r30, r20
 33c:	f5 07       	cpc	r31, r21
 33e:	20 f0       	brcs	.+8      	; 0x348 <__udivmodsi4_ep>
 340:	a2 1b       	sub	r26, r18
 342:	b3 0b       	sbc	r27, r19
 344:	e4 0b       	sbc	r30, r20
 346:	f5 0b       	sbc	r31, r21

00000348 <__udivmodsi4_ep>:
 348:	66 1f       	adc	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	88 1f       	adc	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	1a 94       	dec	r1
 352:	69 f7       	brne	.-38     	; 0x32e <__udivmodsi4_loop>
 354:	60 95       	com	r22
 356:	70 95       	com	r23
 358:	80 95       	com	r24
 35a:	90 95       	com	r25
 35c:	9b 01       	movw	r18, r22
 35e:	ac 01       	movw	r20, r24
 360:	bd 01       	movw	r22, r26
 362:	cf 01       	movw	r24, r30
 364:	08 95       	ret

00000366 <__umulhisi3>:
 366:	a2 9f       	mul	r26, r18
 368:	b0 01       	movw	r22, r0
 36a:	b3 9f       	mul	r27, r19
 36c:	c0 01       	movw	r24, r0
 36e:	a3 9f       	mul	r26, r19
 370:	70 0d       	add	r23, r0
 372:	81 1d       	adc	r24, r1
 374:	11 24       	eor	r1, r1
 376:	91 1d       	adc	r25, r1
 378:	b2 9f       	mul	r27, r18
 37a:	70 0d       	add	r23, r0
 37c:	81 1d       	adc	r24, r1
 37e:	11 24       	eor	r1, r1
 380:	91 1d       	adc	r25, r1
 382:	08 95       	ret

00000384 <__muluhisi3>:
 384:	0e 94 b3 01 	call	0x366	; 0x366 <__umulhisi3>
 388:	a5 9f       	mul	r26, r21
 38a:	90 0d       	add	r25, r0
 38c:	b4 9f       	mul	r27, r20
 38e:	90 0d       	add	r25, r0
 390:	a4 9f       	mul	r26, r20
 392:	80 0d       	add	r24, r0
 394:	91 1d       	adc	r25, r1
 396:	11 24       	eor	r1, r1
 398:	08 95       	ret

0000039a <__udivmodhi4>:
 39a:	aa 1b       	sub	r26, r26
 39c:	bb 1b       	sub	r27, r27
 39e:	51 e1       	ldi	r21, 0x11	; 17
 3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <__udivmodhi4_ep>

000003a2 <__udivmodhi4_loop>:
 3a2:	aa 1f       	adc	r26, r26
 3a4:	bb 1f       	adc	r27, r27
 3a6:	a6 17       	cp	r26, r22
 3a8:	b7 07       	cpc	r27, r23
 3aa:	10 f0       	brcs	.+4      	; 0x3b0 <__udivmodhi4_ep>
 3ac:	a6 1b       	sub	r26, r22
 3ae:	b7 0b       	sbc	r27, r23

000003b0 <__udivmodhi4_ep>:
 3b0:	88 1f       	adc	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	5a 95       	dec	r21
 3b6:	a9 f7       	brne	.-22     	; 0x3a2 <__udivmodhi4_loop>
 3b8:	80 95       	com	r24
 3ba:	90 95       	com	r25
 3bc:	bc 01       	movw	r22, r24
 3be:	cd 01       	movw	r24, r26
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
