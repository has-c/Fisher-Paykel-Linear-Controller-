
LinearController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000682  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  00800116  00800116  0000072c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002484  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af6  00000000  00000000  00002d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa2  00000000  00000000  00003856  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000047f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000906  00000000  00000000  00004b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb7  00000000  00000000  0000548e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_11>
  30:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 39       	cpi	r26, 0x91	; 145
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  9e:	0c 94 3f 03 	jmp	0x67e	; 0x67e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	85 68       	ori	r24, 0x85	; 133
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <PWM_Init>:

#include "pwm.h"

//to do setup in the Fast PWM mode
void PWM_Init(){
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC mode and no prescaler
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8b 60       	ori	r24, 0x0B	; 11
  ca:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //Enabling interrupts for match on OCR1A and OCR1B
  cc:	ef e6       	ldi	r30, 0x6F	; 111
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <PWM_Change>:
	
}

void PWM_Change(uint16_t topValue, uint16_t bottomValue){
	OCR1A = topValue;
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = bottomValue;
  e0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  e4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  e8:	08 95       	ret

000000ea <UART_Init>:
#define MAX_VOLTAGE 13

//uart intializer
void UART_Init(unsigned int BAUD_RATE){
	
	UBRR0H = BAUD_RATE >>8;
  ea:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_RATE;
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0);
  f2:	e1 ec       	ldi	r30, 0xC1	; 193
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 e9       	ldi	r24, 0x90	; 144
  f8:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0)|(1<<TXCIE0);
  fa:	80 81       	ld	r24, Z
  fc:	88 64       	ori	r24, 0x48	; 72
  fe:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 106:	08 95       	ret

00000108 <UART_Transmit>:
}

//
void UART_Transmit(uint8_t myValue){
	//disable receive
	UCSR0B &= ~(1 << RXEN0);
 108:	e1 ec       	ldi	r30, 0xC1	; 193
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	9f 7e       	andi	r25, 0xEF	; 239
 110:	90 83       	st	Z, r25
	UCSR0B &= ~(1 << RXCIE0);
 112:	90 81       	ld	r25, Z
 114:	9f 77       	andi	r25, 0x7F	; 127
 116:	90 83       	st	Z, r25
	while (!((1<<UDRE0)&&(UCSR0A))); //wait until the transmit register is ready
 118:	e0 ec       	ldi	r30, 0xC0	; 192
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	90 81       	ld	r25, Z
 11e:	99 23       	and	r25, r25
 120:	e9 f3       	breq	.-6      	; 0x11c <UART_Transmit+0x14>
	UDR0 = myValue;//once ready, store next value for transmission
 122:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 126:	08 95       	ret

00000128 <usart_putchar_printf>:
}

uint8_t ASCIIConversion(uint8_t value){
	uint8_t asciiValue = value + 48;
	return asciiValue;
}
 128:	cf 93       	push	r28
 12a:	c8 2f       	mov	r28, r24
 12c:	8a 30       	cpi	r24, 0x0A	; 10
 12e:	19 f4       	brne	.+6      	; 0x136 <usart_putchar_printf+0xe>
 130:	8d e0       	ldi	r24, 0x0D	; 13
 132:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
 136:	8c 2f       	mov	r24, r28
 138:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <concatenate>:
 144:	c0 97       	sbiw	r24, 0x30	; 48
 146:	e4 e6       	ldi	r30, 0x64	; 100
 148:	e8 9f       	mul	r30, r24
 14a:	90 01       	movw	r18, r0
 14c:	e9 9f       	mul	r30, r25
 14e:	30 0d       	add	r19, r0
 150:	11 24       	eor	r1, r1
 152:	60 53       	subi	r22, 0x30	; 48
 154:	71 09       	sbc	r23, r1
 156:	cb 01       	movw	r24, r22
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	66 0f       	add	r22, r22
 15e:	77 1f       	adc	r23, r23
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	68 0f       	add	r22, r24
 16a:	79 1f       	adc	r23, r25
 16c:	62 0f       	add	r22, r18
 16e:	73 1f       	adc	r23, r19
 170:	ca 01       	movw	r24, r20
 172:	c0 97       	sbiw	r24, 0x30	; 48
 174:	86 0f       	add	r24, r22
 176:	97 1f       	adc	r25, r23
 178:	08 95       	ret

0000017a <__vector_18>:
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
 18c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 190:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <received>
 194:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rx_count>
 198:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rx_count+0x1>
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rx_count+0x1>
 1a2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_count>
 1a6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rx_count>
 1aa:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rx_count+0x1>
 1ae:	45 97       	sbiw	r24, 0x15	; 21
 1b0:	4c f0       	brlt	.+18     	; 0x1c4 <__vector_18+0x4a>
 1b2:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <rx_count>
 1b6:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <rx_count+0x1>
 1ba:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <received>
 1be:	ea 5f       	subi	r30, 0xFA	; 250
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	80 83       	st	Z, r24
 1c4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rx_count>
 1c8:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rx_count+0x1>
 1cc:	86 97       	sbiw	r24, 0x26	; 38
 1ce:	7c f0       	brlt	.+30     	; 0x1ee <__vector_18+0x74>
 1d0:	e1 ec       	ldi	r30, 0xC1	; 193
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	8f 77       	andi	r24, 0x7F	; 127
 1d8:	80 83       	st	Z, r24
 1da:	80 81       	ld	r24, Z
 1dc:	8f 7e       	andi	r24, 0xEF	; 239
 1de:	80 83       	st	Z, r24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <finished>
 1e6:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <rx_count+0x1>
 1ea:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <rx_count>
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_20>:
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
 210:	e1 ec       	ldi	r30, 0xC1	; 193
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 61       	ori	r24, 0x10	; 16
 218:	80 83       	st	Z, r24
 21a:	80 81       	ld	r24, Z
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	80 83       	st	Z, r24
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_12>:
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <isLHS>
 242:	81 11       	cpse	r24, r1
 244:	04 c0       	rjmp	.+8      	; 0x24e <__vector_12+0x1e>
 246:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
 24a:	88 23       	and	r24, r24
 24c:	51 f0       	breq	.+20     	; 0x262 <__vector_12+0x32>
 24e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <isDead>
 252:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <count>
 256:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
 25a:	89 17       	cp	r24, r25
 25c:	58 f0       	brcs	.+22     	; 0x274 <__vector_12+0x44>
 25e:	2a 98       	cbi	0x05, 2	; 5
 260:	09 c0       	rjmp	.+18     	; 0x274 <__vector_12+0x44>
 262:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <isDead>
 266:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <count>
 26a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
 26e:	89 17       	cp	r24, r25
 270:	08 f0       	brcs	.+2      	; 0x274 <__vector_12+0x44>
 272:	29 98       	cbi	0x05, 1	; 5
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <ConvertTimerValueToDutyCycle>:
 282:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dutyCycle>
 286:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <dutyCycle+0x1>
 28a:	4d e7       	ldi	r20, 0x7D	; 125
 28c:	48 9f       	mul	r20, r24
 28e:	90 01       	movw	r18, r0
 290:	49 9f       	mul	r20, r25
 292:	30 0d       	add	r19, r0
 294:	11 24       	eor	r1, r1
 296:	36 95       	lsr	r19
 298:	27 95       	ror	r18
 29a:	36 95       	lsr	r19
 29c:	27 95       	ror	r18
 29e:	ab e7       	ldi	r26, 0x7B	; 123
 2a0:	b4 e1       	ldi	r27, 0x14	; 20
 2a2:	0e 94 30 03 	call	0x660	; 0x660 <__umulhisi3>
 2a6:	96 95       	lsr	r25
 2a8:	87 95       	ror	r24
 2aa:	08 95       	ret

000002ac <CalculateDeadTime>:
 2ac:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <frequency>
 2b0:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <frequency+0x1>
 2b4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <noOfWaves>
 2b8:	88 e8       	ldi	r24, 0x88	; 136
 2ba:	93 e1       	ldi	r25, 0x13	; 19
 2bc:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 2c0:	62 1b       	sub	r22, r18
 2c2:	71 09       	sbc	r23, r1
 2c4:	8d e7       	ldi	r24, 0x7D	; 125
 2c6:	28 2f       	mov	r18, r24
 2c8:	26 9f       	mul	r18, r22
 2ca:	c0 01       	movw	r24, r0
 2cc:	27 9f       	mul	r18, r23
 2ce:	90 0d       	add	r25, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	08 95       	ret

000002d4 <__vector_11>:
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	2f 93       	push	r18
 2e0:	3f 93       	push	r19
 2e2:	4f 93       	push	r20
 2e4:	5f 93       	push	r21
 2e6:	6f 93       	push	r22
 2e8:	7f 93       	push	r23
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	af 93       	push	r26
 2f0:	bf 93       	push	r27
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
 2f6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <isLHS>
 2fa:	81 11       	cpse	r24, r1
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <__vector_11+0x32>
 2fe:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
 302:	88 23       	and	r24, r24
 304:	b9 f1       	breq	.+110    	; 0x374 <__vector_11+0xa0>
 306:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <count>
 30a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
 30e:	89 17       	cp	r24, r25
 310:	60 f0       	brcs	.+24     	; 0x32a <__vector_11+0x56>
 312:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <isDead>
 316:	81 11       	cpse	r24, r1
 318:	08 c0       	rjmp	.+16     	; 0x32a <__vector_11+0x56>
 31a:	2a 9a       	sbi	0x05, 2	; 5
 31c:	5d 9a       	sbi	0x0b, 5	; 11
 31e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <count>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <count>
 328:	57 c0       	rjmp	.+174    	; 0x3d8 <__vector_11+0x104>
 32a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <count>
 32e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
 332:	89 17       	cp	r24, r25
 334:	a0 f4       	brcc	.+40     	; 0x35e <__vector_11+0x8a>
 336:	5d 98       	cbi	0x0b, 5	; 11
 338:	2a 98       	cbi	0x05, 2	; 5
 33a:	0e 94 56 01 	call	0x2ac	; 0x2ac <CalculateDeadTime>
 33e:	6f ef       	ldi	r22, 0xFF	; 255
 340:	7f ef       	ldi	r23, 0xFF	; 255
 342:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
 346:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <lowPowerMode>
 34a:	81 11       	cpse	r24, r1
 34c:	02 c0       	rjmp	.+4      	; 0x352 <__vector_11+0x7e>
 34e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <isLHS>
 352:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <count>
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <isDead>
 35c:	3d c0       	rjmp	.+122    	; 0x3d8 <__vector_11+0x104>
 35e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <isDead>
 362:	0e 94 41 01 	call	0x282	; 0x282 <ConvertTimerValueToDutyCycle>
 366:	68 2f       	mov	r22, r24
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	8d e7       	ldi	r24, 0x7D	; 125
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
 372:	32 c0       	rjmp	.+100    	; 0x3d8 <__vector_11+0x104>
 374:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <count>
 378:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
 37c:	89 17       	cp	r24, r25
 37e:	60 f0       	brcs	.+24     	; 0x398 <__vector_11+0xc4>
 380:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <isDead>
 384:	81 11       	cpse	r24, r1
 386:	08 c0       	rjmp	.+16     	; 0x398 <__vector_11+0xc4>
 388:	5e 9a       	sbi	0x0b, 6	; 11
 38a:	29 9a       	sbi	0x05, 1	; 5
 38c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <count>
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <count>
 396:	20 c0       	rjmp	.+64     	; 0x3d8 <__vector_11+0x104>
 398:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <count>
 39c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noOfWaves>
 3a0:	89 17       	cp	r24, r25
 3a2:	80 f4       	brcc	.+32     	; 0x3c4 <__vector_11+0xf0>
 3a4:	5e 98       	cbi	0x0b, 6	; 11
 3a6:	29 98       	cbi	0x05, 1	; 5
 3a8:	0e 94 56 01 	call	0x2ac	; 0x2ac <CalculateDeadTime>
 3ac:	6f ef       	ldi	r22, 0xFF	; 255
 3ae:	7f ef       	ldi	r23, 0xFF	; 255
 3b0:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <isLHS>
 3ba:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <count>
 3be:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <isDead>
 3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <__vector_11+0x104>
 3c4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <isDead>
 3c8:	0e 94 41 01 	call	0x282	; 0x282 <ConvertTimerValueToDutyCycle>
 3cc:	68 2f       	mov	r22, r24
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	8d e7       	ldi	r24, 0x7D	; 125
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 6c 00 	call	0xd8	; 0xd8 <PWM_Change>
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <main>:

int main(void)
{	
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	00 d0       	rcall	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 d0       	rcall	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
	stdout= &mystdout;//printf
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <__iob+0x3>
 40e:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <__iob+0x2>

    sei();
 412:	78 94       	sei
	UART_Init(UBRR_VALUE);
 414:	83 e3       	ldi	r24, 0x33	; 51
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 75 00 	call	0xea	; 0xea <UART_Init>
	ADC_Init();
 41c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	PWM_Init();
 420:	0e 94 61 00 	call	0xc2	; 0xc2 <PWM_Init>
	
	//output pin setup
	DDRB |= (1<<PB1)|(1<<PB2);
 424:	84 b1       	in	r24, 0x04	; 4
 426:	86 60       	ori	r24, 0x06	; 6
 428:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD5)|(1<<PD6);
 42a:	8a b1       	in	r24, 0x0a	; 10
 42c:	80 66       	ori	r24, 0x60	; 96
 42e:	8a b9       	out	0x0a, r24	; 10
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};
		
		//receive message code
		if(finished){
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
 430:	0f 2e       	mov	r0, r31
 432:	fb e1       	ldi	r31, 0x1B	; 27
 434:	2f 2e       	mov	r2, r31
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	3f 2e       	mov	r3, r31
 43a:	f0 2d       	mov	r31, r0
			//voltageLHSIndex++;
		//}
		
		//mock arrays
		for(int i = 0; i < NUMBER_OF_SAMPLES;i++){
			voltageRHS[i] = 1132;
 43c:	0f 2e       	mov	r0, r31
 43e:	fc e6       	ldi	r31, 0x6C	; 108
 440:	4f 2e       	mov	r4, r31
 442:	f4 e0       	ldi	r31, 0x04	; 4
 444:	5f 2e       	mov	r5, r31
 446:	61 2c       	mov	r6, r1
 448:	71 2c       	mov	r7, r1
 44a:	f0 2d       	mov	r31, r0
			voltageLHS[i] = 40;
 44c:	0f 2e       	mov	r0, r31
 44e:	f8 e2       	ldi	r31, 0x28	; 40
 450:	8f 2e       	mov	r8, r31
 452:	91 2c       	mov	r9, r1
 454:	a1 2c       	mov	r10, r1
 456:	b1 2c       	mov	r11, r1
 458:	f0 2d       	mov	r31, r0
			current[i] = 930;
 45a:	0f 2e       	mov	r0, r31
 45c:	f2 ea       	ldi	r31, 0xA2	; 162
 45e:	cf 2e       	mov	r12, r31
 460:	f3 e0       	ldi	r31, 0x03	; 3
 462:	df 2e       	mov	r13, r31
 464:	e1 2c       	mov	r14, r1
 466:	f1 2c       	mov	r15, r1
 468:	f0 2d       	mov	r31, r0


    while (1) 
    {	
		//reset index positions
		voltageLHSIndex = 0;
 46a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <voltageLHSIndex>
		voltageRHSIndex = 0;
 46e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
		currentIndex = 0;
 472:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <currentIndex>
		uint32_t rmsCurrent = 0;
		uint32_t voltageSum = 0;
		uint32_t powerArray[NUMBER_OF_SAMPLES] = {0};
		
		//receive message code
		if(finished){
 476:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <finished>
 47a:	88 23       	and	r24, r24
 47c:	09 f4       	brne	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47e:	d9 c0       	rjmp	.+434    	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
 480:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <pumpingEffortArray+0x2>
 484:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <pumpingEffortArray+0x1>
 488:	f1 01       	movw	r30, r2
 48a:	80 81       	ld	r24, Z
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 a2 00 	call	0x144	; 0x144 <concatenate>
 496:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <pumpParam+0x1>
 49a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <pumpParam>
			UART_Transmit(pumpParam);
 49e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pumpParam>
 4a2:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <pumpParam+0x1>
 4a6:	0e 94 84 00 	call	0x108	; 0x108 <UART_Transmit>
			for(int i = 0; i < 38; i++){
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
				pumpingEffortArray[i] = 0;
 4ae:	fc 01       	movw	r30, r24
 4b0:	e5 5e       	subi	r30, 0xE5	; 229
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	10 82       	st	Z, r1
		
		//receive message code
		if(finished){
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
			UART_Transmit(pumpParam);
			for(int i = 0; i < 38; i++){
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	86 32       	cpi	r24, 0x26	; 38
 4ba:	91 05       	cpc	r25, r1
 4bc:	c1 f7       	brne	.-16     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
				pumpingEffortArray[i] = 0;
			}

			finished = false;
 4be:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <finished>
			rx_count = 0;
 4c2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <rx_count+0x1>
 4c6:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <rx_count>
 4ca:	b3 c0       	rjmp	.+358    	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
			//voltageLHSIndex++;
		//}
		
		//mock arrays
		for(int i = 0; i < NUMBER_OF_SAMPLES;i++){
			voltageRHS[i] = 1132;
 4cc:	c9 01       	movw	r24, r18
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	fc 01       	movw	r30, r24
 4d8:	e8 5b       	subi	r30, 0xB8	; 184
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	40 82       	st	Z, r4
 4de:	51 82       	std	Z+1, r5	; 0x01
 4e0:	62 82       	std	Z+2, r6	; 0x02
 4e2:	73 82       	std	Z+3, r7	; 0x03
			voltageLHS[i] = 40;
 4e4:	fc 01       	movw	r30, r24
 4e6:	e8 56       	subi	r30, 0x68	; 104
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	80 82       	st	Z, r8
 4ec:	91 82       	std	Z+1, r9	; 0x01
 4ee:	a2 82       	std	Z+2, r10	; 0x02
 4f0:	b3 82       	std	Z+3, r11	; 0x03
			current[i] = 930;
 4f2:	fc 01       	movw	r30, r24
 4f4:	e8 51       	subi	r30, 0x18	; 24
 4f6:	fe 4f       	sbci	r31, 0xFE	; 254
 4f8:	c0 82       	st	Z, r12
 4fa:	d1 82       	std	Z+1, r13	; 0x01
 4fc:	e2 82       	std	Z+2, r14	; 0x02
 4fe:	f3 82       	std	Z+3, r15	; 0x03
			//printf("%d\n",voltageLHS[voltageLHSIndex]);
			//voltageLHSIndex++;
		//}
		
		//mock arrays
		for(int i = 0; i < NUMBER_OF_SAMPLES;i++){
 500:	2f 5f       	subi	r18, 0xFF	; 255
 502:	3f 4f       	sbci	r19, 0xFF	; 255
 504:	24 31       	cpi	r18, 0x14	; 20
 506:	31 05       	cpc	r19, r1
 508:	09 f7       	brne	.-62     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		
		//get voltage across the coil
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){
			if(voltageLHS[i]>voltageRHS[i]){
 50e:	9c 01       	movw	r18, r24
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	22 0f       	add	r18, r18
 516:	33 1f       	adc	r19, r19
 518:	f9 01       	movw	r30, r18
 51a:	e8 56       	subi	r30, 0x68	; 104
 51c:	fe 4f       	sbci	r31, 0xFE	; 254
 51e:	40 81       	ld	r20, Z
 520:	51 81       	ldd	r21, Z+1	; 0x01
 522:	62 81       	ldd	r22, Z+2	; 0x02
 524:	73 81       	ldd	r23, Z+3	; 0x03
 526:	f9 01       	movw	r30, r18
 528:	e8 5b       	subi	r30, 0xB8	; 184
 52a:	fe 4f       	sbci	r31, 0xFE	; 254
 52c:	00 81       	ld	r16, Z
 52e:	11 81       	ldd	r17, Z+1	; 0x01
 530:	22 81       	ldd	r18, Z+2	; 0x02
 532:	33 81       	ldd	r19, Z+3	; 0x03
 534:	04 17       	cp	r16, r20
 536:	15 07       	cpc	r17, r21
 538:	26 07       	cpc	r18, r22
 53a:	37 07       	cpc	r19, r23
 53c:	f8 f4       	brcc	.+62     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
				voltageAcrossTheCoil[i] = voltageLHS[i]-voltageRHS[i];
 53e:	dc 01       	movw	r26, r24
 540:	aa 0f       	add	r26, r26
 542:	bb 1f       	adc	r27, r27
 544:	aa 0f       	add	r26, r26
 546:	bb 1f       	adc	r27, r27
 548:	fd 01       	movw	r30, r26
 54a:	e8 56       	subi	r30, 0x68	; 104
 54c:	fe 4f       	sbci	r31, 0xFE	; 254
 54e:	40 81       	ld	r20, Z
 550:	51 81       	ldd	r21, Z+1	; 0x01
 552:	62 81       	ldd	r22, Z+2	; 0x02
 554:	73 81       	ldd	r23, Z+3	; 0x03
 556:	fd 01       	movw	r30, r26
 558:	e8 5b       	subi	r30, 0xB8	; 184
 55a:	fe 4f       	sbci	r31, 0xFE	; 254
 55c:	00 81       	ld	r16, Z
 55e:	11 81       	ldd	r17, Z+1	; 0x01
 560:	22 81       	ldd	r18, Z+2	; 0x02
 562:	33 81       	ldd	r19, Z+3	; 0x03
 564:	40 1b       	sub	r20, r16
 566:	51 0b       	sbc	r21, r17
 568:	62 0b       	sbc	r22, r18
 56a:	73 0b       	sbc	r23, r19
 56c:	fd 01       	movw	r30, r26
 56e:	e6 5c       	subi	r30, 0xC6	; 198
 570:	fd 4f       	sbci	r31, 0xFD	; 253
 572:	40 83       	st	Z, r20
 574:	51 83       	std	Z+1, r21	; 0x01
 576:	62 83       	std	Z+2, r22	; 0x02
 578:	73 83       	std	Z+3, r23	; 0x03
 57a:	1e c0       	rjmp	.+60     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
			}else{
				voltageAcrossTheCoil[i] = voltageRHS[i]-voltageLHS[i];
 57c:	dc 01       	movw	r26, r24
 57e:	aa 0f       	add	r26, r26
 580:	bb 1f       	adc	r27, r27
 582:	aa 0f       	add	r26, r26
 584:	bb 1f       	adc	r27, r27
 586:	fd 01       	movw	r30, r26
 588:	e8 5b       	subi	r30, 0xB8	; 184
 58a:	fe 4f       	sbci	r31, 0xFE	; 254
 58c:	40 81       	ld	r20, Z
 58e:	51 81       	ldd	r21, Z+1	; 0x01
 590:	62 81       	ldd	r22, Z+2	; 0x02
 592:	73 81       	ldd	r23, Z+3	; 0x03
 594:	fd 01       	movw	r30, r26
 596:	e8 56       	subi	r30, 0x68	; 104
 598:	fe 4f       	sbci	r31, 0xFE	; 254
 59a:	00 81       	ld	r16, Z
 59c:	11 81       	ldd	r17, Z+1	; 0x01
 59e:	22 81       	ldd	r18, Z+2	; 0x02
 5a0:	33 81       	ldd	r19, Z+3	; 0x03
 5a2:	40 1b       	sub	r20, r16
 5a4:	51 0b       	sbc	r21, r17
 5a6:	62 0b       	sbc	r22, r18
 5a8:	73 0b       	sbc	r23, r19
 5aa:	fd 01       	movw	r30, r26
 5ac:	e6 5c       	subi	r30, 0xC6	; 198
 5ae:	fd 4f       	sbci	r31, 0xFD	; 253
 5b0:	40 83       	st	Z, r20
 5b2:	51 83       	std	Z+1, r21	; 0x01
 5b4:	62 83       	std	Z+2, r22	; 0x02
 5b6:	73 83       	std	Z+3, r23	; 0x03
			}
			voltageSum += voltageAcrossTheCoil[i]*voltageAcrossTheCoil[i];
 5b8:	fc 01       	movw	r30, r24
 5ba:	ee 0f       	add	r30, r30
 5bc:	ff 1f       	adc	r31, r31
 5be:	ee 0f       	add	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	df 01       	movw	r26, r30
 5c4:	a6 5c       	subi	r26, 0xC6	; 198
 5c6:	bd 4f       	sbci	r27, 0xFD	; 253
 5c8:	4d 91       	ld	r20, X+
 5ca:	5d 91       	ld	r21, X+
 5cc:	6d 91       	ld	r22, X+
 5ce:	7c 91       	ld	r23, X
 5d0:	13 97       	sbiw	r26, 0x03	; 3
 5d2:	4d 91       	ld	r20, X+
 5d4:	5d 91       	ld	r21, X+
 5d6:	6d 91       	ld	r22, X+
 5d8:	7c 91       	ld	r23, X
			currentSum += current[i]*current[i];
 5da:	e8 51       	subi	r30, 0x18	; 24
 5dc:	fe 4f       	sbci	r31, 0xFE	; 254
 5de:	40 81       	ld	r20, Z
 5e0:	51 81       	ldd	r21, Z+1	; 0x01
 5e2:	62 81       	ldd	r22, Z+2	; 0x02
 5e4:	73 81       	ldd	r23, Z+3	; 0x03
 5e6:	40 81       	ld	r20, Z
 5e8:	51 81       	ldd	r21, Z+1	; 0x01
 5ea:	62 81       	ldd	r22, Z+2	; 0x02
 5ec:	73 81       	ldd	r23, Z+3	; 0x03
			
		}
		
		
		//get voltage across the coil
		for(int i = 0;i<NUMBER_OF_SAMPLES;i++){
 5ee:	01 96       	adiw	r24, 0x01	; 1
 5f0:	84 31       	cpi	r24, 0x14	; 20
 5f2:	91 05       	cpc	r25, r1
 5f4:	09 f0       	breq	.+2      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f6:	8b cf       	rjmp	.-234    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	90 e0       	ldi	r25, 0x00	; 0
		//printf("%d\n",rmsVoltage);
		//printf("%d\n",rmsCurrent);
		
		//calculate average power	
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
			powerArray[j] = (voltageAcrossTheCoil[j] * current[j]);
 5fc:	fc 01       	movw	r30, r24
 5fe:	ee 0f       	add	r30, r30
 600:	ff 1f       	adc	r31, r31
 602:	ee 0f       	add	r30, r30
 604:	ff 1f       	adc	r31, r31
 606:	df 01       	movw	r26, r30
 608:	a6 5c       	subi	r26, 0xC6	; 198
 60a:	bd 4f       	sbci	r27, 0xFD	; 253
 60c:	4d 91       	ld	r20, X+
 60e:	5d 91       	ld	r21, X+
 610:	6d 91       	ld	r22, X+
 612:	7c 91       	ld	r23, X
 614:	e8 51       	subi	r30, 0x18	; 24
 616:	fe 4f       	sbci	r31, 0xFE	; 254
 618:	40 81       	ld	r20, Z
 61a:	51 81       	ldd	r21, Z+1	; 0x01
 61c:	62 81       	ldd	r22, Z+2	; 0x02
 61e:	73 81       	ldd	r23, Z+3	; 0x03
		rmsCurrent = sqrt(rmsCurrent);
		//printf("%d\n",rmsVoltage);
		//printf("%d\n",rmsCurrent);
		
		//calculate average power	
		for(int j = 0; j < NUMBER_OF_SAMPLES; j++){
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	84 31       	cpi	r24, 0x14	; 20
 624:	91 05       	cpc	r25, r1
 626:	51 f7       	brne	.-44     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 628:	83 e1       	ldi	r24, 0x13	; 19
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	01 97       	sbiw	r24, 0x01	; 1
			powerArray[j] = (voltageAcrossTheCoil[j] * current[j]);
		}
		uint32_t powerTotal = 0;
		uint32_t rmsPower = 0;
		for (int i = 0; i < NUMBER_OF_SAMPLES-1; i++) {
 62e:	f1 f7       	brne	.-4      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 630:	1c cf       	rjmp	.-456    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		
		//receive message code
		if(finished){
			pumpParam = concatenate(pumpingEffortArray[0],pumpingEffortArray[1],pumpingEffortArray[2]);
			UART_Transmit(pumpParam);
			for(int i = 0; i < 38; i++){
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	4a cf       	rjmp	.-364    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>

00000638 <__udivmodhi4>:
 638:	aa 1b       	sub	r26, r26
 63a:	bb 1b       	sub	r27, r27
 63c:	51 e1       	ldi	r21, 0x11	; 17
 63e:	07 c0       	rjmp	.+14     	; 0x64e <__udivmodhi4_ep>

00000640 <__udivmodhi4_loop>:
 640:	aa 1f       	adc	r26, r26
 642:	bb 1f       	adc	r27, r27
 644:	a6 17       	cp	r26, r22
 646:	b7 07       	cpc	r27, r23
 648:	10 f0       	brcs	.+4      	; 0x64e <__udivmodhi4_ep>
 64a:	a6 1b       	sub	r26, r22
 64c:	b7 0b       	sbc	r27, r23

0000064e <__udivmodhi4_ep>:
 64e:	88 1f       	adc	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	5a 95       	dec	r21
 654:	a9 f7       	brne	.-22     	; 0x640 <__udivmodhi4_loop>
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	bc 01       	movw	r22, r24
 65c:	cd 01       	movw	r24, r26
 65e:	08 95       	ret

00000660 <__umulhisi3>:
 660:	a2 9f       	mul	r26, r18
 662:	b0 01       	movw	r22, r0
 664:	b3 9f       	mul	r27, r19
 666:	c0 01       	movw	r24, r0
 668:	a3 9f       	mul	r26, r19
 66a:	70 0d       	add	r23, r0
 66c:	81 1d       	adc	r24, r1
 66e:	11 24       	eor	r1, r1
 670:	91 1d       	adc	r25, r1
 672:	b2 9f       	mul	r27, r18
 674:	70 0d       	add	r23, r0
 676:	81 1d       	adc	r24, r1
 678:	11 24       	eor	r1, r1
 67a:	91 1d       	adc	r25, r1
 67c:	08 95       	ret

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
